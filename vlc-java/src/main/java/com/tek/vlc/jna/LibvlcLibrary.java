package com.tek.vlc.jna;

import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>libvlc</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface LibvlcLibrary extends Library {
    public static final String JNA_LIBRARY_NAME = "libvlc";
    public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(LibvlcLibrary.JNA_LIBRARY_NAME);
    public static final LibvlcLibrary INSTANCE = (LibvlcLibrary)Native.loadLibrary(LibvlcLibrary.JNA_LIBRARY_NAME, LibvlcLibrary.class);
    /**
     * Logging messages level.<br>
     * \note Future LibVLC versions may define new levels.<br>
     * <i>native declaration : line 414</i><br>
     * enum values
     */
    public static interface libvlc_log_level {
        /**
         * < Debug message<br>
         * <i>native declaration : line 416</i>
         */
        public static final int LIBVLC_DEBUG = 0;
        /**
         * < Important informational message<br>
         * <i>native declaration : line 417</i>
         */
        public static final int LIBVLC_NOTICE = 2;
        /**
         * < Warning (potential error) message<br>
         * <i>native declaration : line 418</i>
         */
        public static final int LIBVLC_WARNING = 3;
        /**
         * < Error message<br>
         * <i>native declaration : line 419</i>
         */
        public static final int LIBVLC_ERROR = 4;
    };
    /** enum values */
    public static interface libvlc_meta_t {
        /** <i>native declaration : line 757</i> */
        public static final int libvlc_meta_Title = 0;
        /** <i>native declaration : line 758</i> */
        public static final int libvlc_meta_Artist = 1;
        /** <i>native declaration : line 759</i> */
        public static final int libvlc_meta_Genre = 2;
        /** <i>native declaration : line 760</i> */
        public static final int libvlc_meta_Copyright = 3;
        /** <i>native declaration : line 761</i> */
        public static final int libvlc_meta_Album = 4;
        /** <i>native declaration : line 762</i> */
        public static final int libvlc_meta_TrackNumber = 5;
        /** <i>native declaration : line 763</i> */
        public static final int libvlc_meta_Description = 6;
        /** <i>native declaration : line 764</i> */
        public static final int libvlc_meta_Rating = 7;
        /** <i>native declaration : line 765</i> */
        public static final int libvlc_meta_Date = 8;
        /** <i>native declaration : line 766</i> */
        public static final int libvlc_meta_Setting = 9;
        /** <i>native declaration : line 767</i> */
        public static final int libvlc_meta_URL = 10;
        /** <i>native declaration : line 768</i> */
        public static final int libvlc_meta_Language = 11;
        /** <i>native declaration : line 769</i> */
        public static final int libvlc_meta_NowPlaying = 12;
        /** <i>native declaration : line 770</i> */
        public static final int libvlc_meta_Publisher = 13;
        /** <i>native declaration : line 771</i> */
        public static final int libvlc_meta_EncodedBy = 14;
        /** <i>native declaration : line 772</i> */
        public static final int libvlc_meta_ArtworkURL = 15;
        /** <i>native declaration : line 773</i> */
        public static final int libvlc_meta_TrackID = 16;
        /** <i>native declaration : line 774</i> */
        public static final int libvlc_meta_TrackTotal = 17;
        /** <i>native declaration : line 775</i> */
        public static final int libvlc_meta_Director = 18;
        /** <i>native declaration : line 776</i> */
        public static final int libvlc_meta_Season = 19;
        /** <i>native declaration : line 777</i> */
        public static final int libvlc_meta_Episode = 20;
        /** <i>native declaration : line 778</i> */
        public static final int libvlc_meta_ShowName = 21;
        /** <i>native declaration : line 779</i> */
        public static final int libvlc_meta_Actors = 22;
        /** <i>native declaration : line 780</i> */
        public static final int libvlc_meta_AlbumArtist = 23;
        /** <i>native declaration : line 781</i> */
        public static final int libvlc_meta_DiscNumber = 24;
    };
    /** enum values */
    public static interface libvlc_state_t {
        /** <i>native declaration : line 798</i> */
        public static final int libvlc_NothingSpecial = 0;
        /** <i>native declaration : line 799</i> */
        public static final int libvlc_Opening = 1;
        /** <i>native declaration : line 800</i> */
        public static final int libvlc_Buffering = 2;
        /** <i>native declaration : line 801</i> */
        public static final int libvlc_Playing = 3;
        /** <i>native declaration : line 802</i> */
        public static final int libvlc_Paused = 4;
        /** <i>native declaration : line 803</i> */
        public static final int libvlc_Stopped = 5;
        /** <i>native declaration : line 804</i> */
        public static final int libvlc_Ended = 6;
        /** <i>native declaration : line 805</i> */
        public static final int libvlc_Error = 7;
    };
    public static final int libvlc_media_option_trusted = 0x2;
    public static final int libvlc_media_option_unique = 0x100;
    /** enum values */
    public static interface libvlc_track_type_t {
        /** <i>native declaration : line 816</i> */
        public static final int libvlc_track_unknown = -1;
        /** <i>native declaration : line 817</i> */
        public static final int libvlc_track_audio = 0;
        /** <i>native declaration : line 818</i> */
        public static final int libvlc_track_video = 1;
        /** <i>native declaration : line 819</i> */
        public static final int libvlc_track_text = 2;
    };
    /** enum values */
    public static interface libvlc_media_type_t {
        /** <i>native declaration : line 940</i> */
        public static final int libvlc_media_type_unknown = 0;
        /** <i>native declaration : line 941</i> */
        public static final int libvlc_media_type_file = 1;
        /** <i>native declaration : line 942</i> */
        public static final int libvlc_media_type_directory = 2;
        /** <i>native declaration : line 943</i> */
        public static final int libvlc_media_type_disc = 3;
        /** <i>native declaration : line 944</i> */
        public static final int libvlc_media_type_stream = 4;
        /** <i>native declaration : line 945</i> */
        public static final int libvlc_media_type_playlist = 5;
    };
    /** enum values */
    public static interface libvlc_media_parse_flag_t {
        /** <i>native declaration : line 960</i> */
        public static final int libvlc_media_parse_local = 0x00;
        /** <i>native declaration : line 964</i> */
        public static final int libvlc_media_parse_network = 0x01;
        /** <i>native declaration : line 968</i> */
        public static final int libvlc_media_fetch_local = 0x02;
        /** <i>native declaration : line 972</i> */
        public static final int libvlc_media_fetch_network = 0x04;
    };
    /** enum values */
    public static interface libvlc_video_marquee_option_t {
        /** <i>native declaration : line 1606</i> */
        public static final int libvlc_marquee_Enable = 0;
        /**
         * string argument<br>
         * <i>native declaration : line 1607</i>
         */
        public static final int libvlc_marquee_Text = 1;
        /** <i>native declaration : line 1608</i> */
        public static final int libvlc_marquee_Color = 2;
        /** <i>native declaration : line 1609</i> */
        public static final int libvlc_marquee_Opacity = 3;
        /** <i>native declaration : line 1610</i> */
        public static final int libvlc_marquee_Position = 4;
        /** <i>native declaration : line 1611</i> */
        public static final int libvlc_marquee_Refresh = 5;
        /** <i>native declaration : line 1612</i> */
        public static final int libvlc_marquee_Size = 6;
        /** <i>native declaration : line 1613</i> */
        public static final int libvlc_marquee_Timeout = 7;
        /** <i>native declaration : line 1614</i> */
        public static final int libvlc_marquee_X = 8;
        /** <i>native declaration : line 1615</i> */
        public static final int libvlc_marquee_Y = 9;
    };
    /** enum values */
    public static interface libvlc_navigate_mode_t {
        /** <i>native declaration : line 1623</i> */
        public static final int libvlc_navigate_activate = 0;
        /** <i>native declaration : line 1624</i> */
        public static final int libvlc_navigate_up = 1;
        /** <i>native declaration : line 1625</i> */
        public static final int libvlc_navigate_down = 2;
        /** <i>native declaration : line 1626</i> */
        public static final int libvlc_navigate_left = 3;
        /** <i>native declaration : line 1627</i> */
        public static final int libvlc_navigate_right = 4;
    };
    /** enum values */
    public static interface libvlc_position_t {
        /** <i>native declaration : line 1634</i> */
        public static final int libvlc_position_disable = -1;
        /** <i>native declaration : line 1635</i> */
        public static final int libvlc_position_center = 0;
        /** <i>native declaration : line 1636</i> */
        public static final int libvlc_position_left = 1;
        /** <i>native declaration : line 1637</i> */
        public static final int libvlc_position_right = 2;
        /** <i>native declaration : line 1638</i> */
        public static final int libvlc_position_top = 3;
        /** <i>native declaration : line 1639</i> */
        public static final int libvlc_position_top_left = 4;
        /** <i>native declaration : line 1640</i> */
        public static final int libvlc_position_top_right = 5;
        /** <i>native declaration : line 1641</i> */
        public static final int libvlc_position_bottom = 6;
        /** <i>native declaration : line 1642</i> */
        public static final int libvlc_position_bottom_left = 7;
        /** <i>native declaration : line 1643</i> */
        public static final int libvlc_position_bottom_right = 8;
    };
    /**
     * option values for libvlc_video_{get,set}_logo_{int,string}<br>
     * <i>native declaration : line 2796</i><br>
     * enum values
     */
    public static interface libvlc_video_logo_option_t {
        /** <i>native declaration : line 2797</i> */
        public static final int libvlc_logo_enable = 0;
        /**
         * < string argument, "file,d,t;file,d,t;..."<br>
         * <i>native declaration : line 2798</i>
         */
        public static final int libvlc_logo_file = 1;
        /** <i>native declaration : line 2799</i> */
        public static final int libvlc_logo_x = 2;
        /** <i>native declaration : line 2800</i> */
        public static final int libvlc_logo_y = 3;
        /** <i>native declaration : line 2801</i> */
        public static final int libvlc_logo_delay = 4;
        /** <i>native declaration : line 2802</i> */
        public static final int libvlc_logo_repeat = 5;
        /** <i>native declaration : line 2803</i> */
        public static final int libvlc_logo_opacity = 6;
        /** <i>native declaration : line 2804</i> */
        public static final int libvlc_logo_position = 7;
    };
    /**
     * option values for libvlc_video_{get,set}_adjust_{int,float,bool}<br>
     * <i>native declaration : line 2842</i><br>
     * enum values
     */
    public static interface libvlc_video_adjust_option_t {
        /** <i>native declaration : line 2843</i> */
        public static final int libvlc_adjust_Enable = 0;
        /** <i>native declaration : line 2844</i> */
        public static final int libvlc_adjust_Contrast = 1;
        /** <i>native declaration : line 2845</i> */
        public static final int libvlc_adjust_Brightness = 2;
        /** <i>native declaration : line 2846</i> */
        public static final int libvlc_adjust_Hue = 3;
        /** <i>native declaration : line 2847</i> */
        public static final int libvlc_adjust_Saturation = 4;
        /** <i>native declaration : line 2848</i> */
        public static final int libvlc_adjust_Gamma = 5;
    };
    /** enum values */
    public static interface libvlc_audio_output_device_types_t {
        /** <i>native declaration : line 2907</i> */
        public static final int libvlc_AudioOutputDevice_Error = -1;
        /** <i>native declaration : line 2908</i> */
        public static final int libvlc_AudioOutputDevice_Mono = 1;
        /** <i>native declaration : line 2909</i> */
        public static final int libvlc_AudioOutputDevice_Stereo = 2;
        /** <i>native declaration : line 2910</i> */
        public static final int libvlc_AudioOutputDevice_2F2R = 4;
        /** <i>native declaration : line 2911</i> */
        public static final int libvlc_AudioOutputDevice_3F2R = 5;
        /** <i>native declaration : line 2912</i> */
        public static final int libvlc_AudioOutputDevice_5_1 = 6;
        /** <i>native declaration : line 2913</i> */
        public static final int libvlc_AudioOutputDevice_6_1 = 7;
        /** <i>native declaration : line 2914</i> */
        public static final int libvlc_AudioOutputDevice_7_1 = 8;
        /** <i>native declaration : line 2915</i> */
        public static final int libvlc_AudioOutputDevice_SPDIF = 10;
    };
    /** enum values */
    public static interface libvlc_audio_output_channel_t {
        /** <i>native declaration : line 2922</i> */
        public static final int libvlc_AudioChannel_Error = -1;
        /** <i>native declaration : line 2923</i> */
        public static final int libvlc_AudioChannel_Stereo = 1;
        /** <i>native declaration : line 2924</i> */
        public static final int libvlc_AudioChannel_RStereo = 2;
        /** <i>native declaration : line 2925</i> */
        public static final int libvlc_AudioChannel_Left = 3;
        /** <i>native declaration : line 2926</i> */
        public static final int libvlc_AudioChannel_Right = 4;
        /** <i>native declaration : line 2927</i> */
        public static final int libvlc_AudioChannel_Dolbys = 5;
    };
    /** enum values */
    public static interface libvlc_playback_mode_t {
        /** <i>native declaration : line 3682</i> */
        public static final int libvlc_playback_mode_default = 0;
        /** <i>native declaration : line 3683</i> */
        public static final int libvlc_playback_mode_loop = 1;
        /** <i>native declaration : line 3684</i> */
        public static final int libvlc_playback_mode_repeat = 2;
    };
    public static final int LIBVLC_STRUCTURES_H = (int)1;
    public static final int VLC_LIBVLC_H = (int)1;
    public static final int VLC_LIBVLC_MEDIA_H = (int)1;
    public static final int VLC_LIBVLC_MEDIA_PLAYER_H = (int)1;
    public static final int LIBVLC_MEDIA_LIST_H = (int)1;
    public static final int LIBVLC_MEDIA_LIST_PLAYER_H = (int)1;
    public static final int VLC_LIBVLC_MEDIA_LIBRARY_H = (int)1;
    public static final int VLC_LIBVLC_MEDIA_DISCOVERER_H = (int)1;
    public static final int LIBVLC_VLM_H = (int)1;
    public interface libvlc_callback_t extends Callback {
        void apply(LibvlcLibrary.libvlc_event_t libvlc_event_tPtr1, Pointer voidPtr1);
    };
    public interface libvlc_log_cb extends Callback {
        void apply(Pointer data, int level, Pointer ctx, Pointer fmt, Object... args);
    };
    /** <i>native declaration : line 260</i> */
    public interface libvlc_set_exit_handler_cb_callback extends Callback {
        void apply(Pointer voidPtr1);
    };
    public interface libvlc_media_open_cb extends Callback {
        int apply(Pointer opaque, PointerByReference datap, LongByReference sizep);
    };
    /**
     * Callback prototype to read data from a custom bitstream input media.<br>
     * * \param opaque private pointer as set by the @ref libvlc_media_open_cb<br>
     *               callback<br>
     * \param buf start address of the buffer to read data into<br>
     * \param len bytes length of the buffer<br>
     * * \return strictly positive number of bytes read, 0 on end-of-stream,<br>
     *         or -1 on non-recoverable error<br>
     * * \note If no data is immediately available, then the callback should sleep.<br>
     * \warning The application is responsible for avoiding deadlock situations.<br>
     * In particular, the callback should return an error if playback is stopped;<br>
     * if it does not return, then libvlc_media_player_stop() will never return.<br>
     * <i>native declaration : line 1012</i>
     */
    public interface ssize_t extends Callback {
        LibvlcLibrary.ssize_t_callback apply(Pointer libvlc_media_read_cb);
    };
    public interface libvlc_media_seek_cb extends Callback {
        int apply(Pointer opaque, long offset);
    };
    public interface libvlc_media_close_cb extends Callback {
        void apply(Pointer opaque);
    };
    public interface ssize_t_callback extends Callback {
        int apply(Pointer opaque, Pointer buf, NativeSize len);
    };
    public interface libvlc_video_lock_cb extends Callback {
        Pointer apply(Pointer opaque, PointerByReference planes);
    };
    public interface libvlc_video_unlock_cb extends Callback {
        void apply(Pointer opaque, Pointer picture, PointerByReference planes);
    };
    public interface libvlc_video_display_cb extends Callback {
        void apply(Pointer opaque, Pointer picture);
    };
    public interface libvlc_video_format_cb extends Callback {
        int apply(PointerByReference opaque, Pointer chroma, IntByReference width, IntByReference height, IntByReference pitches, IntByReference lines);
    };
    public interface libvlc_video_cleanup_cb extends Callback {
        void apply(Pointer opaque);
    };
    public interface libvlc_audio_play_cb extends Callback {
        void apply(Pointer data, Pointer samples, int count, long pts);
    };
    public interface libvlc_audio_pause_cb extends Callback {
        void apply(Pointer data, long pts);
    };
    public interface libvlc_audio_resume_cb extends Callback {
        void apply(Pointer data, long pts);
    };
    public interface libvlc_audio_flush_cb extends Callback {
        void apply(Pointer data, long pts);
    };
    public interface libvlc_audio_drain_cb extends Callback {
        void apply(Pointer data);
    };
    public interface libvlc_audio_set_volume_cb extends Callback {
        void apply(Pointer data, float volume, byte mute);
    };
    public interface libvlc_audio_setup_cb extends Callback {
        int apply(PointerByReference data, Pointer format, IntByReference rate, IntByReference channels);
    };
    public interface libvlc_audio_cleanup_cb extends Callback {
        void apply(Pointer data);
    };
    /**
     * A human-readable error message for the last LibVLC error in the calling<br>
     * thread. The resulting string is valid until another error occurs (at least<br>
     * until the next LibVLC call).<br>
     * @warning<br>
     * This will be NULL if there was no error.<br>
     * Original signature : <code>char* libvlc_errmsg()</code><br>
     * <i>native declaration : line 161</i>
     */
    Pointer libvlc_errmsg();
    /**
     * Clears the LibVLC error status for the current thread. This is optional.<br>
     * By default, the error status is automatically overridden when a new error<br>
     * occurs, and destroyed when the thread exits.<br>
     * Original signature : <code>void libvlc_clearerr()</code><br>
     * <i>native declaration : line 168</i>
     */
    void libvlc_clearerr();
    /**
     * Sets the LibVLC error status and message for the current thread.<br>
     * Any previous error is overridden.<br>
     * \param fmt the format string<br>
     * \param ap the arguments<br>
     * \return a nul terminated string in any case<br>
     * Original signature : <code>char* libvlc_vprinterr(const char*, va_list)</code><br>
     * <i>native declaration : line 177</i><br>
     * @deprecated use the safer methods {@link #libvlc_vprinterr(java.lang.String, java.lang.Object)} and {@link #libvlc_vprinterr(com.sun.jna.Pointer, java.lang.Object)} instead
     */
    @Deprecated 
    Pointer libvlc_vprinterr(Pointer fmt, Object... ap);
    /**
     * Sets the LibVLC error status and message for the current thread.<br>
     * Any previous error is overridden.<br>
     * \param fmt the format string<br>
     * \param ap the arguments<br>
     * \return a nul terminated string in any case<br>
     * Original signature : <code>char* libvlc_vprinterr(const char*, va_list)</code><br>
     * <i>native declaration : line 177</i>
     */
    Pointer libvlc_vprinterr(String fmt, Object... ap);
    /**
     * Sets the LibVLC error status and message for the current thread.<br>
     * Any previous error is overridden.<br>
     * \param fmt the format string<br>
     * \param args the arguments<br>
     * \return a nul terminated string in any case<br>
     * Original signature : <code>char* libvlc_printerr(const char*, null)</code><br>
     * <i>native declaration : line 186</i><br>
     * @deprecated use the safer methods {@link #libvlc_printerr(java.lang.String, java.lang.Object)} and {@link #libvlc_printerr(com.sun.jna.Pointer, java.lang.Object)} instead
     */
    @Deprecated 
    Pointer libvlc_printerr(Pointer fmt, Object... varArgs1);
    /**
     * Sets the LibVLC error status and message for the current thread.<br>
     * Any previous error is overridden.<br>
     * \param fmt the format string<br>
     * \param args the arguments<br>
     * \return a nul terminated string in any case<br>
     * Original signature : <code>char* libvlc_printerr(const char*, null)</code><br>
     * <i>native declaration : line 186</i>
     */
    Pointer libvlc_printerr(String fmt, Object... varArgs1);
    /**
     * Create and initialize a libvlc instance.<br>
     * This functions accept a list of "command line" arguments similar to the<br>
     * main(). These arguments affect the LibVLC instance default configuration.<br>
     * \version<br>
     * Arguments are meant to be passed from the command line to LibVLC, just like<br>
     * VLC media player does. The list of valid arguments depends on the LibVLC<br>
     * version, the operating system and platform, and set of available LibVLC<br>
     * plugins. Invalid or unsupported arguments will cause the function to fail<br>
     * (i.e. return NULL). Also, some arguments may alter the behaviour or<br>
     * otherwise interfere with other LibVLC functions.<br>
     * \warning<br>
     * There is absolutely no warranty or promise of forward, backward and<br>
     * cross-platform compatibility with regards to libvlc_new() arguments.<br>
     * We recommend that you do not use them, other than when debugging.<br>
     * \param argc the number of arguments (should be 0)<br>
     * \param argv list of arguments (should be NULL)<br>
     * \return the libvlc instance or NULL in case of error<br>
     * Original signature : <code>libvlc_instance_t* libvlc_new(int, const const char**)</code><br>
     * <i>native declaration : line 212</i><br>
     * @deprecated use the safer methods {@link #libvlc_new(int, java.lang.String[])} and {@link #libvlc_new(int, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_new(int argc, PointerByReference argv);
    /**
     * Create and initialize a libvlc instance.<br>
     * This functions accept a list of "command line" arguments similar to the<br>
     * main(). These arguments affect the LibVLC instance default configuration.<br>
     * \version<br>
     * Arguments are meant to be passed from the command line to LibVLC, just like<br>
     * VLC media player does. The list of valid arguments depends on the LibVLC<br>
     * version, the operating system and platform, and set of available LibVLC<br>
     * plugins. Invalid or unsupported arguments will cause the function to fail<br>
     * (i.e. return NULL). Also, some arguments may alter the behaviour or<br>
     * otherwise interfere with other LibVLC functions.<br>
     * \warning<br>
     * There is absolutely no warranty or promise of forward, backward and<br>
     * cross-platform compatibility with regards to libvlc_new() arguments.<br>
     * We recommend that you do not use them, other than when debugging.<br>
     * \param argc the number of arguments (should be 0)<br>
     * \param argv list of arguments (should be NULL)<br>
     * \return the libvlc instance or NULL in case of error<br>
     * Original signature : <code>libvlc_instance_t* libvlc_new(int, const const char**)</code><br>
     * <i>native declaration : line 212</i>
     */
    PointerByReference libvlc_new(int argc, String argv[]);
    /**
     * Decrement the reference count of a libvlc instance, and destroy it<br>
     * if it reaches zero.<br>
     * \param p_instance the instance to destroy<br>
     * Original signature : <code>void libvlc_release(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 221</i><br>
     * @deprecated use the safer method {@link #libvlc_release(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_release(Pointer p_instance);
    /**
     * Decrement the reference count of a libvlc instance, and destroy it<br>
     * if it reaches zero.<br>
     * \param p_instance the instance to destroy<br>
     * Original signature : <code>void libvlc_release(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 221</i>
     */
    void libvlc_release(PointerByReference p_instance);
    /**
     * Increments the reference count of a libvlc instance.<br>
     * The initial reference count is 1 after libvlc_new() returns.<br>
     * \param p_instance the instance to reference<br>
     * Original signature : <code>void libvlc_retain(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 229</i><br>
     * @deprecated use the safer method {@link #libvlc_retain(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_retain(Pointer p_instance);
    /**
     * Increments the reference count of a libvlc instance.<br>
     * The initial reference count is 1 after libvlc_new() returns.<br>
     * \param p_instance the instance to reference<br>
     * Original signature : <code>void libvlc_retain(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 229</i>
     */
    void libvlc_retain(PointerByReference p_instance);
    /**
     * Try to start a user interface for the libvlc instance.<br>
     * \param p_instance the instance<br>
     * \param name interface name, or NULL for default<br>
     * \return 0 on success, -1 on error.<br>
     * Original signature : <code>int libvlc_add_intf(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 239</i><br>
     * @deprecated use the safer methods {@link #libvlc_add_intf(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_add_intf(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_add_intf(Pointer p_instance, Pointer name);
    /**
     * Try to start a user interface for the libvlc instance.<br>
     * \param p_instance the instance<br>
     * \param name interface name, or NULL for default<br>
     * \return 0 on success, -1 on error.<br>
     * Original signature : <code>int libvlc_add_intf(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 239</i>
     */
    int libvlc_add_intf(PointerByReference p_instance, String name);
    /**
     * Try to start a user interface for the libvlc instance.<br>
     * \param p_instance the instance<br>
     * \param name interface name, or NULL for default<br>
     * \return 0 on success, -1 on error.<br>
     * Original signature : <code>int libvlc_add_intf(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 239</i>
     */
    int libvlc_add_intf(PointerByReference p_instance, Pointer name);
    /**
     * Registers a callback for the LibVLC exit event. This is mostly useful if<br>
     * the VLC playlist and/or at least one interface are started with<br>
     * libvlc_playlist_play() or libvlc_add_intf() respectively.<br>
     * Typically, this function will wake up your application main loop (from<br>
     * another thread).<br>
     * \note This function should be called before the playlist or interface are<br>
     * started. Otherwise, there is a small race condition: the exit event could<br>
     * be raised before the handler is registered.<br>
     * \param p_instance LibVLC instance<br>
     * \param cb callback to invoke when LibVLC wants to exit,<br>
     *           or NULL to disable the exit handler (as by default)<br>
     * \param opaque data pointer for the callback<br>
     * \warning This function and libvlc_wait() cannot be used at the same time.<br>
     * Original signature : <code>void libvlc_set_exit_handler(libvlc_instance_t*, libvlc_set_exit_handler_cb_callback*, void*)</code><br>
     * <i>native declaration : line 259</i><br>
     * @deprecated use the safer method {@link #libvlc_set_exit_handler(com.sun.jna.ptr.PointerByReference, libvlc.LibvlcLibrary.libvlc_set_exit_handler_cb_callback, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_set_exit_handler(Pointer p_instance, LibvlcLibrary.libvlc_set_exit_handler_cb_callback cb, Pointer opaque);
    /**
     * Registers a callback for the LibVLC exit event. This is mostly useful if<br>
     * the VLC playlist and/or at least one interface are started with<br>
     * libvlc_playlist_play() or libvlc_add_intf() respectively.<br>
     * Typically, this function will wake up your application main loop (from<br>
     * another thread).<br>
     * \note This function should be called before the playlist or interface are<br>
     * started. Otherwise, there is a small race condition: the exit event could<br>
     * be raised before the handler is registered.<br>
     * \param p_instance LibVLC instance<br>
     * \param cb callback to invoke when LibVLC wants to exit,<br>
     *           or NULL to disable the exit handler (as by default)<br>
     * \param opaque data pointer for the callback<br>
     * \warning This function and libvlc_wait() cannot be used at the same time.<br>
     * Original signature : <code>void libvlc_set_exit_handler(libvlc_instance_t*, libvlc_set_exit_handler_cb_callback*, void*)</code><br>
     * <i>native declaration : line 259</i>
     */
    void libvlc_set_exit_handler(PointerByReference p_instance, LibvlcLibrary.libvlc_set_exit_handler_cb_callback cb, Pointer opaque);
    /**
     * Waits until an interface causes the instance to exit.<br>
     * You should start at least one interface first, using libvlc_add_intf().<br>
     * \param p_instance the instance<br>
     * \warning This function wastes one thread doing basically nothing.<br>
     * libvlc_set_exit_handler() should be used instead.<br>
     * Original signature : <code>void libvlc_wait(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 271</i><br>
     * @deprecated use the safer method {@link #libvlc_wait(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_wait(Pointer p_instance);
    /**
     * Waits until an interface causes the instance to exit.<br>
     * You should start at least one interface first, using libvlc_add_intf().<br>
     * \param p_instance the instance<br>
     * \warning This function wastes one thread doing basically nothing.<br>
     * libvlc_set_exit_handler() should be used instead.<br>
     * Original signature : <code>void libvlc_wait(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 271</i>
     */
    void libvlc_wait(PointerByReference p_instance);
    /**
     * Sets the application name. LibVLC passes this as the user agent string<br>
     * when a protocol requires it.<br>
     * \param p_instance LibVLC instance<br>
     * \param name human-readable application name, e.g. "FooBar player 1.2.3"<br>
     * \param http HTTP User Agent, e.g. "FooBar/1.2.3 Python/2.6.0"<br>
     * \version LibVLC 1.1.1 or later<br>
     * Original signature : <code>void libvlc_set_user_agent(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 283</i><br>
     * @deprecated use the safer methods {@link #libvlc_set_user_agent(com.sun.jna.ptr.PointerByReference, java.lang.String, java.lang.String)} and {@link #libvlc_set_user_agent(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_set_user_agent(Pointer p_instance, Pointer name, Pointer http);
    /**
     * Sets the application name. LibVLC passes this as the user agent string<br>
     * when a protocol requires it.<br>
     * \param p_instance LibVLC instance<br>
     * \param name human-readable application name, e.g. "FooBar player 1.2.3"<br>
     * \param http HTTP User Agent, e.g. "FooBar/1.2.3 Python/2.6.0"<br>
     * \version LibVLC 1.1.1 or later<br>
     * Original signature : <code>void libvlc_set_user_agent(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 283</i>
     */
    void libvlc_set_user_agent(PointerByReference p_instance, String name, String http);
    /**
     * Sets the application name. LibVLC passes this as the user agent string<br>
     * when a protocol requires it.<br>
     * \param p_instance LibVLC instance<br>
     * \param name human-readable application name, e.g. "FooBar player 1.2.3"<br>
     * \param http HTTP User Agent, e.g. "FooBar/1.2.3 Python/2.6.0"<br>
     * \version LibVLC 1.1.1 or later<br>
     * Original signature : <code>void libvlc_set_user_agent(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 283</i>
     */
    void libvlc_set_user_agent(PointerByReference p_instance, Pointer name, Pointer http);
    /**
     * Sets some meta-information about the application.<br>
     * See also libvlc_set_user_agent().<br>
     * \param p_instance LibVLC instance<br>
     * \param id Java-style application identifier, e.g. "com.acme.foobar"<br>
     * \param version application version numbers, e.g. "1.2.3"<br>
     * \param icon application icon name, e.g. "foobar"<br>
     * \version LibVLC 2.1.0 or later.<br>
     * Original signature : <code>void libvlc_set_app_id(libvlc_instance_t*, const char*, const char*, const char*)</code><br>
     * <i>native declaration : line 297</i><br>
     * @deprecated use the safer methods {@link #libvlc_set_app_id(com.sun.jna.ptr.PointerByReference, java.lang.String, java.lang.String, java.lang.String)} and {@link #libvlc_set_app_id(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_set_app_id(Pointer p_instance, Pointer id, Pointer version, Pointer icon);
    /**
     * Sets some meta-information about the application.<br>
     * See also libvlc_set_user_agent().<br>
     * \param p_instance LibVLC instance<br>
     * \param id Java-style application identifier, e.g. "com.acme.foobar"<br>
     * \param version application version numbers, e.g. "1.2.3"<br>
     * \param icon application icon name, e.g. "foobar"<br>
     * \version LibVLC 2.1.0 or later.<br>
     * Original signature : <code>void libvlc_set_app_id(libvlc_instance_t*, const char*, const char*, const char*)</code><br>
     * <i>native declaration : line 297</i>
     */
    void libvlc_set_app_id(PointerByReference p_instance, String id, String version, String icon);
    /**
     * Sets some meta-information about the application.<br>
     * See also libvlc_set_user_agent().<br>
     * \param p_instance LibVLC instance<br>
     * \param id Java-style application identifier, e.g. "com.acme.foobar"<br>
     * \param version application version numbers, e.g. "1.2.3"<br>
     * \param icon application icon name, e.g. "foobar"<br>
     * \version LibVLC 2.1.0 or later.<br>
     * Original signature : <code>void libvlc_set_app_id(libvlc_instance_t*, const char*, const char*, const char*)</code><br>
     * <i>native declaration : line 297</i>
     */
    void libvlc_set_app_id(PointerByReference p_instance, Pointer id, Pointer version, Pointer icon);
    /**
     * Retrieve libvlc version.<br>
     * Example: "1.1.0-git The Luggage"<br>
     * \return a string containing the libvlc version<br>
     * Original signature : <code>char* libvlc_get_version()</code><br>
     * <i>native declaration : line 307</i>
     */
    Pointer libvlc_get_version();
    /**
     * Retrieve libvlc compiler version.<br>
     * Example: "gcc version 4.2.3 (Ubuntu 4.2.3-2ubuntu6)"<br>
     * \return a string containing the libvlc compiler version<br>
     * Original signature : <code>char* libvlc_get_compiler()</code><br>
     * <i>native declaration : line 316</i>
     */
    Pointer libvlc_get_compiler();
    /**
     * Retrieve libvlc changeset.<br>
     * Example: "aa9bce0bc4"<br>
     * \return a string containing the libvlc changeset<br>
     * Original signature : <code>char* libvlc_get_changeset()</code><br>
     * <i>native declaration : line 325</i>
     */
    Pointer libvlc_get_changeset();
    /**
     * Frees an heap allocation returned by a LibVLC function.<br>
     * If you know you're using the same underlying C run-time as the LibVLC<br>
     * implementation, then you can call ANSI C free() directly instead.<br>
     * \param ptr the pointer<br>
     * Original signature : <code>void libvlc_free(void*)</code><br>
     * <i>native declaration : line 334</i>
     */
    void libvlc_free(Pointer ptr);
    /**
     * Register for an event notification.<br>
     * \param p_event_manager the event manager to which you want to attach to.<br>
     *        Generally it is obtained by vlc_my_object_event_manager() where<br>
     *        my_object is the object you want to listen to.<br>
     * \param i_event_type the desired event to which we want to listen<br>
     * \param f_callback the function to call when i_event_type occurs<br>
     * \param user_data user provided data to carry with the event<br>
     * \return 0 on success, ENOMEM on error<br>
     * Original signature : <code>int libvlc_event_attach(libvlc_event_manager_t*, libvlc_event_type_t, libvlc_callback_t, void*)</code><br>
     * <i>native declaration : line 377</i><br>
     * @deprecated use the safer method {@link #libvlc_event_attach(com.sun.jna.ptr.PointerByReference, int, libvlc.LibvlcLibrary.libvlc_callback_t, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_event_attach(Pointer p_event_manager, int i_event_type, LibvlcLibrary.libvlc_callback_t f_callback, Pointer user_data);
    /**
     * Register for an event notification.<br>
     * \param p_event_manager the event manager to which you want to attach to.<br>
     *        Generally it is obtained by vlc_my_object_event_manager() where<br>
     *        my_object is the object you want to listen to.<br>
     * \param i_event_type the desired event to which we want to listen<br>
     * \param f_callback the function to call when i_event_type occurs<br>
     * \param user_data user provided data to carry with the event<br>
     * \return 0 on success, ENOMEM on error<br>
     * Original signature : <code>int libvlc_event_attach(libvlc_event_manager_t*, libvlc_event_type_t, libvlc_callback_t, void*)</code><br>
     * <i>native declaration : line 377</i>
     */
    int libvlc_event_attach(PointerByReference p_event_manager, int i_event_type, LibvlcLibrary.libvlc_callback_t f_callback, Pointer user_data);
    /**
     * Unregister an event notification.<br>
     * \param p_event_manager the event manager<br>
     * \param i_event_type the desired event to which we want to unregister<br>
     * \param f_callback the function to call when i_event_type occurs<br>
     * \param p_user_data user provided data to carry with the event<br>
     * Original signature : <code>void libvlc_event_detach(libvlc_event_manager_t*, libvlc_event_type_t, libvlc_callback_t, void*)</code><br>
     * <i>native declaration : line 390</i><br>
     * @deprecated use the safer method {@link #libvlc_event_detach(com.sun.jna.ptr.PointerByReference, int, libvlc.LibvlcLibrary.libvlc_callback_t, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_event_detach(Pointer p_event_manager, int i_event_type, LibvlcLibrary.libvlc_callback_t f_callback, Pointer p_user_data);
    /**
     * Unregister an event notification.<br>
     * \param p_event_manager the event manager<br>
     * \param i_event_type the desired event to which we want to unregister<br>
     * \param f_callback the function to call when i_event_type occurs<br>
     * \param p_user_data user provided data to carry with the event<br>
     * Original signature : <code>void libvlc_event_detach(libvlc_event_manager_t*, libvlc_event_type_t, libvlc_callback_t, void*)</code><br>
     * <i>native declaration : line 390</i>
     */
    void libvlc_event_detach(PointerByReference p_event_manager, int i_event_type, LibvlcLibrary.libvlc_callback_t f_callback, Pointer p_user_data);
    /**
     * Get an event's type name.<br>
     * \param event_type the desired event<br>
     * Original signature : <code>char* libvlc_event_type_name(libvlc_event_type_t)</code><br>
     * <i>native declaration : line 400</i>
     */
    Pointer libvlc_event_type_name(int event_type);
    /**
     * Gets debugging information about a log message: the name of the VLC module<br>
     * emitting the message and the message location within the source code.<br>
     * The returned module name and file name will be NULL if unknown.<br>
     * The returned line number will similarly be zero if unknown.<br>
     * \param ctx message context (as passed to the @ref libvlc_log_cb callback)<br>
     * \param module module name storage (or NULL) [OUT]<br>
     * \param file source code file name storage (or NULL) [OUT]<br>
     * \param line source code file line number storage (or NULL) [OUT]<br>
     * \warning The returned module name and source code file name, if non-NULL,<br>
     * are only valid until the logging callback returns.<br>
     * \version LibVLC 2.1.0 or later<br>
     * Original signature : <code>void libvlc_log_get_context(const libvlc_log_t*, const char**, const char**, unsigned*)</code><br>
     * <i>native declaration : line 440</i><br>
     * @deprecated use the safer methods {@link #libvlc_log_get_context(com.sun.jna.ptr.PointerByReference, java.lang.String[], java.lang.String[], java.nio.IntBuffer)} and {@link #libvlc_log_get_context(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated 
    void libvlc_log_get_context(Pointer ctx, PointerByReference module, PointerByReference file, IntByReference line);
    /**
     * Gets debugging information about a log message: the name of the VLC module<br>
     * emitting the message and the message location within the source code.<br>
     * The returned module name and file name will be NULL if unknown.<br>
     * The returned line number will similarly be zero if unknown.<br>
     * \param ctx message context (as passed to the @ref libvlc_log_cb callback)<br>
     * \param module module name storage (or NULL) [OUT]<br>
     * \param file source code file name storage (or NULL) [OUT]<br>
     * \param line source code file line number storage (or NULL) [OUT]<br>
     * \warning The returned module name and source code file name, if non-NULL,<br>
     * are only valid until the logging callback returns.<br>
     * \version LibVLC 2.1.0 or later<br>
     * Original signature : <code>void libvlc_log_get_context(const libvlc_log_t*, const char**, const char**, unsigned*)</code><br>
     * <i>native declaration : line 440</i>
     */
    void libvlc_log_get_context(PointerByReference ctx, String module[], String file[], IntBuffer line);
    /**
     * Gets debugging information about a log message: the name of the VLC module<br>
     * emitting the message and the message location within the source code.<br>
     * The returned module name and file name will be NULL if unknown.<br>
     * The returned line number will similarly be zero if unknown.<br>
     * \param ctx message context (as passed to the @ref libvlc_log_cb callback)<br>
     * \param module module name storage (or NULL) [OUT]<br>
     * \param file source code file name storage (or NULL) [OUT]<br>
     * \param line source code file line number storage (or NULL) [OUT]<br>
     * \warning The returned module name and source code file name, if non-NULL,<br>
     * are only valid until the logging callback returns.<br>
     * \version LibVLC 2.1.0 or later<br>
     * Original signature : <code>void libvlc_log_get_context(const libvlc_log_t*, const char**, const char**, unsigned*)</code><br>
     * <i>native declaration : line 440</i>
     */
    void libvlc_log_get_context(PointerByReference ctx, PointerByReference module, PointerByReference file, IntByReference line);
    /**
     * Gets VLC object information about a log message: the type name of the VLC<br>
     * object emitting the message, the object header if any and a temporaly-unique<br>
     * object identifier. This information is mainly meant for <b>manual</b><br>
     * troubleshooting.<br>
     * The returned type name may be "generic" if unknown, but it cannot be NULL.<br>
     * The returned header will be NULL if unset; in current versions, the header<br>
     * is used to distinguish for VLM inputs.<br>
     * The returned object ID will be zero if the message is not associated with<br>
     * any VLC object.<br>
     * \param ctx message context (as passed to the @ref libvlc_log_cb callback)<br>
     * \param name object name storage (or NULL) [OUT]<br>
     * \param header object header (or NULL) [OUT]<br>
     * \param line source code file line number storage (or NULL) [OUT]<br>
     * \warning The returned module name and source code file name, if non-NULL,<br>
     * are only valid until the logging callback returns.<br>
     * \version LibVLC 2.1.0 or later<br>
     * Original signature : <code>void libvlc_log_get_object(const libvlc_log_t*, const char**, const char**, uintptr_t*)</code><br>
     * <i>native declaration : line 464</i><br>
     * @deprecated use the safer methods {@link #libvlc_log_get_object(com.sun.jna.ptr.PointerByReference, java.lang.String[], java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #libvlc_log_get_object(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_log_get_object(Pointer ctx, PointerByReference name, PointerByReference header, PointerByReference id);
    /**
     * Gets VLC object information about a log message: the type name of the VLC<br>
     * object emitting the message, the object header if any and a temporaly-unique<br>
     * object identifier. This information is mainly meant for <b>manual</b><br>
     * troubleshooting.<br>
     * The returned type name may be "generic" if unknown, but it cannot be NULL.<br>
     * The returned header will be NULL if unset; in current versions, the header<br>
     * is used to distinguish for VLM inputs.<br>
     * The returned object ID will be zero if the message is not associated with<br>
     * any VLC object.<br>
     * \param ctx message context (as passed to the @ref libvlc_log_cb callback)<br>
     * \param name object name storage (or NULL) [OUT]<br>
     * \param header object header (or NULL) [OUT]<br>
     * \param line source code file line number storage (or NULL) [OUT]<br>
     * \warning The returned module name and source code file name, if non-NULL,<br>
     * are only valid until the logging callback returns.<br>
     * \version LibVLC 2.1.0 or later<br>
     * Original signature : <code>void libvlc_log_get_object(const libvlc_log_t*, const char**, const char**, uintptr_t*)</code><br>
     * <i>native declaration : line 464</i>
     */
    void libvlc_log_get_object(PointerByReference ctx, String name[], String header[], PointerByReference id);
    /**
     * Gets VLC object information about a log message: the type name of the VLC<br>
     * object emitting the message, the object header if any and a temporaly-unique<br>
     * object identifier. This information is mainly meant for <b>manual</b><br>
     * troubleshooting.<br>
     * The returned type name may be "generic" if unknown, but it cannot be NULL.<br>
     * The returned header will be NULL if unset; in current versions, the header<br>
     * is used to distinguish for VLM inputs.<br>
     * The returned object ID will be zero if the message is not associated with<br>
     * any VLC object.<br>
     * \param ctx message context (as passed to the @ref libvlc_log_cb callback)<br>
     * \param name object name storage (or NULL) [OUT]<br>
     * \param header object header (or NULL) [OUT]<br>
     * \param line source code file line number storage (or NULL) [OUT]<br>
     * \warning The returned module name and source code file name, if non-NULL,<br>
     * are only valid until the logging callback returns.<br>
     * \version LibVLC 2.1.0 or later<br>
     * Original signature : <code>void libvlc_log_get_object(const libvlc_log_t*, const char**, const char**, uintptr_t*)</code><br>
     * <i>native declaration : line 464</i>
     */
    void libvlc_log_get_object(PointerByReference ctx, PointerByReference name, PointerByReference header, PointerByReference id);
    /**
     * Unsets the logging callback for a LibVLC instance. This is rarely needed:<br>
     * the callback is implicitly unset when the instance is destroyed.<br>
     * This function will wait for any pending callbacks invocation to complete<br>
     * (causing a deadlock if called from within the callback).<br>
     * \param p_instance libvlc instance<br>
     * \version LibVLC 2.1.0 or later<br>
     * Original signature : <code>void libvlc_log_unset(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 490</i><br>
     * @deprecated use the safer method {@link #libvlc_log_unset(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_log_unset(Pointer libvlc_instance_tPtr1);
    /**
     * Unsets the logging callback for a LibVLC instance. This is rarely needed:<br>
     * the callback is implicitly unset when the instance is destroyed.<br>
     * This function will wait for any pending callbacks invocation to complete<br>
     * (causing a deadlock if called from within the callback).<br>
     * \param p_instance libvlc instance<br>
     * \version LibVLC 2.1.0 or later<br>
     * Original signature : <code>void libvlc_log_unset(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 490</i>
     */
    void libvlc_log_unset(PointerByReference libvlc_instance_tPtr1);
    /**
     * Sets the logging callback for a LibVLC instance.<br>
     * This function is thread-safe: it will wait for any pending callbacks<br>
     * invocation to complete.<br>
     * \param cb callback function pointer<br>
     * \param data opaque data pointer for the callback function<br>
     * \note Some log messages (especially debug) are emitted by LibVLC while<br>
     * is being initialized. These messages cannot be captured with this interface.<br>
     * \warning A deadlock may occur if this function is called from the callback.<br>
     * \param p_instance libvlc instance<br>
     * \version LibVLC 2.1.0 or later<br>
     * Original signature : <code>void libvlc_log_set(libvlc_instance_t*, libvlc_log_cb, void*)</code><br>
     * <i>native declaration : line 508</i><br>
     * @deprecated use the safer method {@link #libvlc_log_set(com.sun.jna.ptr.PointerByReference, libvlc.LibvlcLibrary.libvlc_log_cb, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_log_set(Pointer libvlc_instance_tPtr1, LibvlcLibrary.libvlc_log_cb cb, Pointer data);
    /**
     * Sets the logging callback for a LibVLC instance.<br>
     * This function is thread-safe: it will wait for any pending callbacks<br>
     * invocation to complete.<br>
     * \param cb callback function pointer<br>
     * \param data opaque data pointer for the callback function<br>
     * \note Some log messages (especially debug) are emitted by LibVLC while<br>
     * is being initialized. These messages cannot be captured with this interface.<br>
     * \warning A deadlock may occur if this function is called from the callback.<br>
     * \param p_instance libvlc instance<br>
     * \version LibVLC 2.1.0 or later<br>
     * Original signature : <code>void libvlc_log_set(libvlc_instance_t*, libvlc_log_cb, void*)</code><br>
     * <i>native declaration : line 508</i>
     */
    void libvlc_log_set(PointerByReference libvlc_instance_tPtr1, LibvlcLibrary.libvlc_log_cb cb, Pointer data);
    /**
     * Sets up logging to a file.<br>
     * \param p_instance libvlc instance<br>
     * \param stream FILE pointer opened for writing<br>
     *         (the FILE pointer must remain valid until libvlc_log_unset())<br>
     * \version LibVLC 2.1.0 or later<br>
     * Original signature : <code>void libvlc_log_set_file(libvlc_instance_t*, FILE*)</code><br>
     * <i>native declaration : line 519</i><br>
     * @deprecated use the safer method {@link #libvlc_log_set_file(com.sun.jna.ptr.PointerByReference, libvlc.LibvlcLibrary.FILE)} instead
     */
    @Deprecated 
    void libvlc_log_set_file(Pointer libvlc_instance_tPtr1, LibvlcLibrary.FILE stream);
    /**
     * Sets up logging to a file.<br>
     * \param p_instance libvlc instance<br>
     * \param stream FILE pointer opened for writing<br>
     *         (the FILE pointer must remain valid until libvlc_log_unset())<br>
     * \version LibVLC 2.1.0 or later<br>
     * Original signature : <code>void libvlc_log_set_file(libvlc_instance_t*, FILE*)</code><br>
     * <i>native declaration : line 519</i>
     */
    void libvlc_log_set_file(PointerByReference libvlc_instance_tPtr1, LibvlcLibrary.FILE stream);
    /**
     * Always returns minus one.<br>
     * This function is only provided for backward compatibility.<br>
     * \param p_instance ignored<br>
     * \return always -1<br>
     * Original signature : <code>int libvlc_get_log_verbosity(const libvlc_instance_t*)</code><br>
     * <i>native declaration : line 529</i><br>
     * @deprecated use the safer method {@link #libvlc_get_log_verbosity(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_get_log_verbosity(Pointer p_instance);
    /**
     * Always returns minus one.<br>
     * This function is only provided for backward compatibility.<br>
     * \param p_instance ignored<br>
     * \return always -1<br>
     * Original signature : <code>int libvlc_get_log_verbosity(const libvlc_instance_t*)</code><br>
     * <i>native declaration : line 529</i>
     */
    int libvlc_get_log_verbosity(PointerByReference p_instance);
    /**
     * This function does nothing.<br>
     * It is only provided for backward compatibility.<br>
     * \param p_instance ignored<br>
     * \param level ignored<br>
     * Original signature : <code>void libvlc_set_log_verbosity(libvlc_instance_t*, unsigned)</code><br>
     * <i>native declaration : line 539</i><br>
     * @deprecated use the safer method {@link #libvlc_set_log_verbosity(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    void libvlc_set_log_verbosity(Pointer p_instance, int level);
    /**
     * This function does nothing.<br>
     * It is only provided for backward compatibility.<br>
     * \param p_instance ignored<br>
     * \param level ignored<br>
     * Original signature : <code>void libvlc_set_log_verbosity(libvlc_instance_t*, unsigned)</code><br>
     * <i>native declaration : line 539</i>
     */
    void libvlc_set_log_verbosity(PointerByReference p_instance, int level);
    /**
     * This function does nothing useful.<br>
     * It is only provided for backward compatibility.<br>
     * \param p_instance libvlc instance<br>
     * \return an unique pointer or NULL on error<br>
     * Original signature : <code>libvlc_log_t* libvlc_log_open(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 549</i><br>
     * @deprecated use the safer method {@link #libvlc_log_open(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_log_open(Pointer p_instance);
    /**
     * This function does nothing useful.<br>
     * It is only provided for backward compatibility.<br>
     * \param p_instance libvlc instance<br>
     * \return an unique pointer or NULL on error<br>
     * Original signature : <code>libvlc_log_t* libvlc_log_open(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 549</i>
     */
    PointerByReference libvlc_log_open(PointerByReference p_instance);
    /**
     * Frees memory allocated by libvlc_log_open().<br>
     * \param p_log libvlc log instance or NULL<br>
     * Original signature : <code>void libvlc_log_close(libvlc_log_t*)</code><br>
     * <i>native declaration : line 557</i><br>
     * @deprecated use the safer method {@link #libvlc_log_close(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_log_close(Pointer p_log);
    /**
     * Frees memory allocated by libvlc_log_open().<br>
     * \param p_log libvlc log instance or NULL<br>
     * Original signature : <code>void libvlc_log_close(libvlc_log_t*)</code><br>
     * <i>native declaration : line 557</i>
     */
    void libvlc_log_close(PointerByReference p_log);
    /**
     * Always returns zero.<br>
     * This function is only provided for backward compatibility.<br>
     * \param p_log ignored<br>
     * \return always zero<br>
     * Original signature : <code>int libvlc_log_count(const libvlc_log_t*)</code><br>
     * <i>native declaration : line 567</i><br>
     * @deprecated use the safer method {@link #libvlc_log_count(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_log_count(Pointer p_log);
    /**
     * Always returns zero.<br>
     * This function is only provided for backward compatibility.<br>
     * \param p_log ignored<br>
     * \return always zero<br>
     * Original signature : <code>int libvlc_log_count(const libvlc_log_t*)</code><br>
     * <i>native declaration : line 567</i>
     */
    int libvlc_log_count(PointerByReference p_log);
    /**
     * This function does nothing.<br>
     * It is only provided for backward compatibility.<br>
     * \param p_log ignored<br>
     * Original signature : <code>void libvlc_log_clear(libvlc_log_t*)</code><br>
     * <i>native declaration : line 576</i><br>
     * @deprecated use the safer method {@link #libvlc_log_clear(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_log_clear(Pointer p_log);
    /**
     * This function does nothing.<br>
     * It is only provided for backward compatibility.<br>
     * \param p_log ignored<br>
     * Original signature : <code>void libvlc_log_clear(libvlc_log_t*)</code><br>
     * <i>native declaration : line 576</i>
     */
    void libvlc_log_clear(PointerByReference p_log);
    /**
     * This function does nothing useful.<br>
     * It is only provided for backward compatibility.<br>
     * \param p_log ignored<br>
     * \return an unique pointer or NULL on error or if the parameter was NULL<br>
     * Original signature : <code>libvlc_log_iterator_t* libvlc_log_get_iterator(const libvlc_log_t*)</code><br>
     * <i>native declaration : line 586</i><br>
     * @deprecated use the safer method {@link #libvlc_log_get_iterator(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_log_get_iterator(Pointer p_log);
    /**
     * This function does nothing useful.<br>
     * It is only provided for backward compatibility.<br>
     * \param p_log ignored<br>
     * \return an unique pointer or NULL on error or if the parameter was NULL<br>
     * Original signature : <code>libvlc_log_iterator_t* libvlc_log_get_iterator(const libvlc_log_t*)</code><br>
     * <i>native declaration : line 586</i>
     */
    PointerByReference libvlc_log_get_iterator(PointerByReference p_log);
    /**
     * Frees memory allocated by libvlc_log_get_iterator().<br>
     * \param p_iter libvlc log iterator or NULL<br>
     * Original signature : <code>void libvlc_log_iterator_free(libvlc_log_iterator_t*)</code><br>
     * <i>native declaration : line 594</i><br>
     * @deprecated use the safer method {@link #libvlc_log_iterator_free(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_log_iterator_free(Pointer p_iter);
    /**
     * Frees memory allocated by libvlc_log_get_iterator().<br>
     * \param p_iter libvlc log iterator or NULL<br>
     * Original signature : <code>void libvlc_log_iterator_free(libvlc_log_iterator_t*)</code><br>
     * <i>native declaration : line 594</i>
     */
    void libvlc_log_iterator_free(PointerByReference p_iter);
    /**
     * Always returns zero.<br>
     * This function is only provided for backward compatibility.<br>
     * \param p_iter ignored<br>
     * \return always zero<br>
     * Original signature : <code>int libvlc_log_iterator_has_next(const libvlc_log_iterator_t*)</code><br>
     * <i>native declaration : line 604</i><br>
     * @deprecated use the safer method {@link #libvlc_log_iterator_has_next(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_log_iterator_has_next(Pointer p_iter);
    /**
     * Always returns zero.<br>
     * This function is only provided for backward compatibility.<br>
     * \param p_iter ignored<br>
     * \return always zero<br>
     * Original signature : <code>int libvlc_log_iterator_has_next(const libvlc_log_iterator_t*)</code><br>
     * <i>native declaration : line 604</i>
     */
    int libvlc_log_iterator_has_next(PointerByReference p_iter);
    /**
     * Always returns NULL.<br>
     * This function is only provided for backward compatibility.<br>
     * \param p_iter libvlc log iterator or NULL<br>
     * \param p_buf ignored<br>
     * \return always NULL<br>
     * Original signature : <code>libvlc_log_message_t* libvlc_log_iterator_next(libvlc_log_iterator_t*, libvlc_log_message_t*)</code><br>
     * <i>native declaration : line 615</i><br>
     * @deprecated use the safer method {@link #libvlc_log_iterator_next(com.sun.jna.ptr.PointerByReference, libvlc.libvlc_log_message_t)} instead
     */
    @Deprecated 
    libvlc_log_message_t libvlc_log_iterator_next(Pointer p_iter, libvlc_log_message_t p_buf);
    /**
     * Always returns NULL.<br>
     * This function is only provided for backward compatibility.<br>
     * \param p_iter libvlc log iterator or NULL<br>
     * \param p_buf ignored<br>
     * \return always NULL<br>
     * Original signature : <code>libvlc_log_message_t* libvlc_log_iterator_next(libvlc_log_iterator_t*, libvlc_log_message_t*)</code><br>
     * <i>native declaration : line 615</i>
     */
    libvlc_log_message_t libvlc_log_iterator_next(PointerByReference p_iter, libvlc_log_message_t p_buf);
    /**
     * Release a list of module descriptions.<br>
     * \param p_list the list to be released<br>
     * Original signature : <code>void libvlc_module_description_list_release(libvlc_module_description_t*)</code><br>
     * <i>native declaration : line 638</i>
     */
    void libvlc_module_description_list_release(libvlc_module_description_t p_list);
    /**
     * Returns a list of audio filters that are available.<br>
     * \param p_instance libvlc instance<br>
     * \return a list of module descriptions. It should be freed with libvlc_module_description_list_release().<br>
     *         In case of an error, NULL is returned.<br>
     * \see libvlc_module_description_t<br>
     * \see libvlc_module_description_list_release<br>
     * Original signature : <code>libvlc_module_description_t* libvlc_audio_filter_list_get(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 652</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_filter_list_get(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    libvlc_module_description_t libvlc_audio_filter_list_get(Pointer p_instance);
    /**
     * Returns a list of audio filters that are available.<br>
     * \param p_instance libvlc instance<br>
     * \return a list of module descriptions. It should be freed with libvlc_module_description_list_release().<br>
     *         In case of an error, NULL is returned.<br>
     * \see libvlc_module_description_t<br>
     * \see libvlc_module_description_list_release<br>
     * Original signature : <code>libvlc_module_description_t* libvlc_audio_filter_list_get(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 652</i>
     */
    libvlc_module_description_t libvlc_audio_filter_list_get(PointerByReference p_instance);
    /**
     * Returns a list of video filters that are available.<br>
     * \param p_instance libvlc instance<br>
     * \return a list of module descriptions. It should be freed with libvlc_module_description_list_release().<br>
     *         In case of an error, NULL is returned.<br>
     * \see libvlc_module_description_t<br>
     * \see libvlc_module_description_list_release<br>
     * Original signature : <code>libvlc_module_description_t* libvlc_video_filter_list_get(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 666</i><br>
     * @deprecated use the safer method {@link #libvlc_video_filter_list_get(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    libvlc_module_description_t libvlc_video_filter_list_get(Pointer p_instance);
    /**
     * Returns a list of video filters that are available.<br>
     * \param p_instance libvlc instance<br>
     * \return a list of module descriptions. It should be freed with libvlc_module_description_list_release().<br>
     *         In case of an error, NULL is returned.<br>
     * \see libvlc_module_description_t<br>
     * \see libvlc_module_description_list_release<br>
     * Original signature : <code>libvlc_module_description_t* libvlc_video_filter_list_get(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 666</i>
     */
    libvlc_module_description_t libvlc_video_filter_list_get(PointerByReference p_instance);
    /**
     * Return the current time as defined by LibVLC. The unit is the microsecond.<br>
     * Time increases monotonically (regardless of time zone changes and RTC<br>
     * adjustements).<br>
     * The origin is arbitrary but consistent across the whole system<br>
     * (e.g. the system uptim, the time since the system was booted).<br>
     * \note On systems that support it, the POSIX monotonic clock is used.<br>
     * Original signature : <code>int64_t libvlc_clock()</code><br>
     * <i>native declaration : line 684</i>
     */
    long libvlc_clock();
    /**
     * Return the delay (in microseconds) until a certain timestamp.<br>
     * \param pts timestamp<br>
     * \return negative if timestamp is in the past,<br>
     * positive if it is in the future<br>
     * Original signature : <code>int64_t libvlc_delay(int64_t)</code><br>
     * <i>native declaration : line 692</i>
     */
    long libvlc_delay(long pts);
    /**
     * Create a media with a certain given media resource location,<br>
     * for instance a valid URL.<br>
     * \note To refer to a local file with this function,<br>
     * the file://... URI syntax <b>must</b> be used (see IETF RFC3986).<br>
     * We recommend using libvlc_media_new_path() instead when dealing with<br>
     * local files.<br>
     * \see libvlc_media_release<br>
     * \param p_instance the instance<br>
     * \param psz_mrl the media location<br>
     * \return the newly created media or NULL on error<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_new_location(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 1048</i><br>
     * @deprecated use the safer methods {@link #libvlc_media_new_location(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_media_new_location(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_new_location(Pointer p_instance, Pointer psz_mrl);
    /**
     * Create a media with a certain given media resource location,<br>
     * for instance a valid URL.<br>
     * \note To refer to a local file with this function,<br>
     * the file://... URI syntax <b>must</b> be used (see IETF RFC3986).<br>
     * We recommend using libvlc_media_new_path() instead when dealing with<br>
     * local files.<br>
     * \see libvlc_media_release<br>
     * \param p_instance the instance<br>
     * \param psz_mrl the media location<br>
     * \return the newly created media or NULL on error<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_new_location(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 1048</i>
     */
    PointerByReference libvlc_media_new_location(PointerByReference p_instance, String psz_mrl);
    /**
     * Create a media with a certain given media resource location,<br>
     * for instance a valid URL.<br>
     * \note To refer to a local file with this function,<br>
     * the file://... URI syntax <b>must</b> be used (see IETF RFC3986).<br>
     * We recommend using libvlc_media_new_path() instead when dealing with<br>
     * local files.<br>
     * \see libvlc_media_release<br>
     * \param p_instance the instance<br>
     * \param psz_mrl the media location<br>
     * \return the newly created media or NULL on error<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_new_location(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 1048</i>
     */
    PointerByReference libvlc_media_new_location(PointerByReference p_instance, Pointer psz_mrl);
    /**
     * Create a media for a certain file path.<br>
     * \see libvlc_media_release<br>
     * \param p_instance the instance<br>
     * \param path local filesystem path<br>
     * \return the newly created media or NULL on error<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_new_path(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 1061</i><br>
     * @deprecated use the safer methods {@link #libvlc_media_new_path(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_media_new_path(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_new_path(Pointer p_instance, Pointer path);
    /**
     * Create a media for a certain file path.<br>
     * \see libvlc_media_release<br>
     * \param p_instance the instance<br>
     * \param path local filesystem path<br>
     * \return the newly created media or NULL on error<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_new_path(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 1061</i>
     */
    PointerByReference libvlc_media_new_path(PointerByReference p_instance, String path);
    /**
     * Create a media for a certain file path.<br>
     * \see libvlc_media_release<br>
     * \param p_instance the instance<br>
     * \param path local filesystem path<br>
     * \return the newly created media or NULL on error<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_new_path(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 1061</i>
     */
    PointerByReference libvlc_media_new_path(PointerByReference p_instance, Pointer path);
    /**
     * Create a media for an already open file descriptor.<br>
     * The file descriptor shall be open for reading (or reading and writing).<br>
     * Regular file descriptors, pipe read descriptors and character device<br>
     * descriptors (including TTYs) are supported on all platforms.<br>
     * Block device descriptors are supported where available.<br>
     * Directory descriptors are supported on systems that provide fdopendir().<br>
     * Sockets are supported on all platforms where they are file descriptors,<br>
     * i.e. all except Windows.<br>
     * \note This library will <b>not</b> automatically close the file descriptor<br>
     * under any circumstance. Nevertheless, a file descriptor can usually only be<br>
     * rendered once in a media player. To render it a second time, the file<br>
     * descriptor should probably be rewound to the beginning with lseek().<br>
     * \see libvlc_media_release<br>
     * \version LibVLC 1.1.5 and later.<br>
     * \param p_instance the instance<br>
     * \param fd open file descriptor<br>
     * \return the newly created media or NULL on error<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_new_fd(libvlc_instance_t*, int)</code><br>
     * <i>native declaration : line 1089</i><br>
     * @deprecated use the safer method {@link #libvlc_media_new_fd(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_new_fd(Pointer p_instance, int fd);
    /**
     * Create a media for an already open file descriptor.<br>
     * The file descriptor shall be open for reading (or reading and writing).<br>
     * Regular file descriptors, pipe read descriptors and character device<br>
     * descriptors (including TTYs) are supported on all platforms.<br>
     * Block device descriptors are supported where available.<br>
     * Directory descriptors are supported on systems that provide fdopendir().<br>
     * Sockets are supported on all platforms where they are file descriptors,<br>
     * i.e. all except Windows.<br>
     * \note This library will <b>not</b> automatically close the file descriptor<br>
     * under any circumstance. Nevertheless, a file descriptor can usually only be<br>
     * rendered once in a media player. To render it a second time, the file<br>
     * descriptor should probably be rewound to the beginning with lseek().<br>
     * \see libvlc_media_release<br>
     * \version LibVLC 1.1.5 and later.<br>
     * \param p_instance the instance<br>
     * \param fd open file descriptor<br>
     * \return the newly created media or NULL on error<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_new_fd(libvlc_instance_t*, int)</code><br>
     * <i>native declaration : line 1089</i>
     */
    PointerByReference libvlc_media_new_fd(PointerByReference p_instance, int fd);
    /**
     * Create a media with custom callbacks to read the data from.<br>
     * \param instance LibVLC instance<br>
     * \param open_cb callback to open the custom bitstream input media<br>
     * \param read_cb callback to read data (must not be NULL)<br>
     * \param seek_cb callback to seek, or NULL if seeking is not supported<br>
     * \param close_cb callback to close the media, or NULL if unnecessary<br>
     * \param opaque data pointer for the open callback<br>
     * \return the newly created media or NULL on error<br>
     * \note If open_cb is NULL, the opaque pointer will be passed to read_cb,<br>
     * seek_cb and close_cb, and the stream size will be treated as unknown.<br>
     * \note The callbacks may be called asynchronously (from another thread).<br>
     * A single stream instance need not be reentrant. However the open_cb needs to<br>
     * be reentrant if the media is used by multiple player instances.<br>
     * \warning The callbacks may be used until all or any player instances<br>
     * that were supplied the media item are stopped.<br>
     * \see libvlc_media_release<br>
     * \version LibVLC 3.0.0 and later.<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_new_callbacks(libvlc_instance_t*, libvlc_media_open_cb, libvlc_media_read_cb, libvlc_media_seek_cb, libvlc_media_close_cb, void*)</code><br>
     * <i>native declaration : line 1119</i><br>
     * @deprecated use the safer method {@link #libvlc_media_new_callbacks(com.sun.jna.ptr.PointerByReference, libvlc.LibvlcLibrary.libvlc_media_open_cb, libvlc.LibvlcLibrary.libvlc_media_read_cb, libvlc.LibvlcLibrary.libvlc_media_seek_cb, libvlc.LibvlcLibrary.libvlc_media_close_cb, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_new_callbacks(Pointer instance, LibvlcLibrary.libvlc_media_open_cb open_cb, LibvlcLibrary.libvlc_media_read_cb read_cb, LibvlcLibrary.libvlc_media_seek_cb seek_cb, LibvlcLibrary.libvlc_media_close_cb close_cb, Pointer opaque);
    /**
     * Create a media with custom callbacks to read the data from.<br>
     * \param instance LibVLC instance<br>
     * \param open_cb callback to open the custom bitstream input media<br>
     * \param read_cb callback to read data (must not be NULL)<br>
     * \param seek_cb callback to seek, or NULL if seeking is not supported<br>
     * \param close_cb callback to close the media, or NULL if unnecessary<br>
     * \param opaque data pointer for the open callback<br>
     * \return the newly created media or NULL on error<br>
     * \note If open_cb is NULL, the opaque pointer will be passed to read_cb,<br>
     * seek_cb and close_cb, and the stream size will be treated as unknown.<br>
     * \note The callbacks may be called asynchronously (from another thread).<br>
     * A single stream instance need not be reentrant. However the open_cb needs to<br>
     * be reentrant if the media is used by multiple player instances.<br>
     * \warning The callbacks may be used until all or any player instances<br>
     * that were supplied the media item are stopped.<br>
     * \see libvlc_media_release<br>
     * \version LibVLC 3.0.0 and later.<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_new_callbacks(libvlc_instance_t*, libvlc_media_open_cb, libvlc_media_read_cb, libvlc_media_seek_cb, libvlc_media_close_cb, void*)</code><br>
     * <i>native declaration : line 1119</i>
     */
    PointerByReference libvlc_media_new_callbacks(PointerByReference instance, LibvlcLibrary.libvlc_media_open_cb open_cb, LibvlcLibrary.libvlc_media_read_cb read_cb, LibvlcLibrary.libvlc_media_seek_cb seek_cb, LibvlcLibrary.libvlc_media_close_cb close_cb, Pointer opaque);
    /**
     * Create a media as an empty node with a given name.<br>
     * \see libvlc_media_release<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the node<br>
     * \return the new empty media or NULL on error<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_new_as_node(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 1136</i><br>
     * @deprecated use the safer methods {@link #libvlc_media_new_as_node(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_media_new_as_node(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_new_as_node(Pointer p_instance, Pointer psz_name);
    /**
     * Create a media as an empty node with a given name.<br>
     * \see libvlc_media_release<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the node<br>
     * \return the new empty media or NULL on error<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_new_as_node(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 1136</i>
     */
    PointerByReference libvlc_media_new_as_node(PointerByReference p_instance, String psz_name);
    /**
     * Create a media as an empty node with a given name.<br>
     * \see libvlc_media_release<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the node<br>
     * \return the new empty media or NULL on error<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_new_as_node(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 1136</i>
     */
    PointerByReference libvlc_media_new_as_node(PointerByReference p_instance, Pointer psz_name);
    /**
     * Add an option to the media.<br>
     * This option will be used to determine how the media_player will<br>
     * read the media. This allows to use VLC's advanced<br>
     * reading/streaming options on a per-media basis.<br>
     * \note The options are listed in 'vlc --long-help' from the command line,<br>
     * e.g. "-sout-all". Keep in mind that available options and their semantics<br>
     * vary across LibVLC versions and builds.<br>
     * \warning Not all options affects libvlc_media_t objects:<br>
     * Specifically, due to architectural issues most audio and video options,<br>
     * such as text renderer options, have no effects on an individual media.<br>
     * These options must be set through libvlc_new() instead.<br>
     * \param p_md the media descriptor<br>
     * \param psz_options the options (as a string)<br>
     * Original signature : <code>void libvlc_media_add_option(libvlc_media_t*, const char*)</code><br>
     * <i>native declaration : line 1158</i><br>
     * @deprecated use the safer methods {@link #libvlc_media_add_option(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_media_add_option(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_media_add_option(Pointer p_md, Pointer psz_options);
    /**
     * Add an option to the media.<br>
     * This option will be used to determine how the media_player will<br>
     * read the media. This allows to use VLC's advanced<br>
     * reading/streaming options on a per-media basis.<br>
     * \note The options are listed in 'vlc --long-help' from the command line,<br>
     * e.g. "-sout-all". Keep in mind that available options and their semantics<br>
     * vary across LibVLC versions and builds.<br>
     * \warning Not all options affects libvlc_media_t objects:<br>
     * Specifically, due to architectural issues most audio and video options,<br>
     * such as text renderer options, have no effects on an individual media.<br>
     * These options must be set through libvlc_new() instead.<br>
     * \param p_md the media descriptor<br>
     * \param psz_options the options (as a string)<br>
     * Original signature : <code>void libvlc_media_add_option(libvlc_media_t*, const char*)</code><br>
     * <i>native declaration : line 1158</i>
     */
    void libvlc_media_add_option(PointerByReference p_md, String psz_options);
    /**
     * Add an option to the media.<br>
     * This option will be used to determine how the media_player will<br>
     * read the media. This allows to use VLC's advanced<br>
     * reading/streaming options on a per-media basis.<br>
     * \note The options are listed in 'vlc --long-help' from the command line,<br>
     * e.g. "-sout-all". Keep in mind that available options and their semantics<br>
     * vary across LibVLC versions and builds.<br>
     * \warning Not all options affects libvlc_media_t objects:<br>
     * Specifically, due to architectural issues most audio and video options,<br>
     * such as text renderer options, have no effects on an individual media.<br>
     * These options must be set through libvlc_new() instead.<br>
     * \param p_md the media descriptor<br>
     * \param psz_options the options (as a string)<br>
     * Original signature : <code>void libvlc_media_add_option(libvlc_media_t*, const char*)</code><br>
     * <i>native declaration : line 1158</i>
     */
    void libvlc_media_add_option(PointerByReference p_md, Pointer psz_options);
    /**
     * Add an option to the media with configurable flags.<br>
     * This option will be used to determine how the media_player will<br>
     * read the media. This allows to use VLC's advanced<br>
     * reading/streaming options on a per-media basis.<br>
     * The options are detailed in vlc --long-help, for instance<br>
     * "--sout-all". Note that all options are not usable on medias:<br>
     * specifically, due to architectural issues, video-related options<br>
     * such as text renderer options cannot be set on a single media. They<br>
     * must be set on the whole libvlc instance instead.<br>
     * \param p_md the media descriptor<br>
     * \param psz_options the options (as a string)<br>
     * \param i_flags the flags for this option<br>
     * Original signature : <code>void libvlc_media_add_option_flag(libvlc_media_t*, const char*, unsigned)</code><br>
     * <i>native declaration : line 1179</i><br>
     * @deprecated use the safer methods {@link #libvlc_media_add_option_flag(com.sun.jna.ptr.PointerByReference, java.lang.String, int)} and {@link #libvlc_media_add_option_flag(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int)} instead
     */
    @Deprecated 
    void libvlc_media_add_option_flag(Pointer p_md, Pointer psz_options, int i_flags);
    /**
     * Add an option to the media with configurable flags.<br>
     * This option will be used to determine how the media_player will<br>
     * read the media. This allows to use VLC's advanced<br>
     * reading/streaming options on a per-media basis.<br>
     * The options are detailed in vlc --long-help, for instance<br>
     * "--sout-all". Note that all options are not usable on medias:<br>
     * specifically, due to architectural issues, video-related options<br>
     * such as text renderer options cannot be set on a single media. They<br>
     * must be set on the whole libvlc instance instead.<br>
     * \param p_md the media descriptor<br>
     * \param psz_options the options (as a string)<br>
     * \param i_flags the flags for this option<br>
     * Original signature : <code>void libvlc_media_add_option_flag(libvlc_media_t*, const char*, unsigned)</code><br>
     * <i>native declaration : line 1179</i>
     */
    void libvlc_media_add_option_flag(PointerByReference p_md, String psz_options, int i_flags);
    /**
     * Add an option to the media with configurable flags.<br>
     * This option will be used to determine how the media_player will<br>
     * read the media. This allows to use VLC's advanced<br>
     * reading/streaming options on a per-media basis.<br>
     * The options are detailed in vlc --long-help, for instance<br>
     * "--sout-all". Note that all options are not usable on medias:<br>
     * specifically, due to architectural issues, video-related options<br>
     * such as text renderer options cannot be set on a single media. They<br>
     * must be set on the whole libvlc instance instead.<br>
     * \param p_md the media descriptor<br>
     * \param psz_options the options (as a string)<br>
     * \param i_flags the flags for this option<br>
     * Original signature : <code>void libvlc_media_add_option_flag(libvlc_media_t*, const char*, unsigned)</code><br>
     * <i>native declaration : line 1179</i>
     */
    void libvlc_media_add_option_flag(PointerByReference p_md, Pointer psz_options, int i_flags);
    /**
     * Retain a reference to a media descriptor object (libvlc_media_t). Use<br>
     * libvlc_media_release() to decrement the reference count of a<br>
     * media descriptor object.<br>
     * \param p_md the media descriptor<br>
     * Original signature : <code>void libvlc_media_retain(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1192</i><br>
     * @deprecated use the safer method {@link #libvlc_media_retain(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_retain(Pointer p_md);
    /**
     * Retain a reference to a media descriptor object (libvlc_media_t). Use<br>
     * libvlc_media_release() to decrement the reference count of a<br>
     * media descriptor object.<br>
     * \param p_md the media descriptor<br>
     * Original signature : <code>void libvlc_media_retain(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1192</i>
     */
    void libvlc_media_retain(PointerByReference p_md);
    /**
     * Decrement the reference count of a media descriptor object. If the<br>
     * reference count is 0, then libvlc_media_release() will release the<br>
     * media descriptor object. It will send out an libvlc_MediaFreed event<br>
     * to all listeners. If the media descriptor object has been released it<br>
     * should not be used again.<br>
     * \param p_md the media descriptor<br>
     * Original signature : <code>void libvlc_media_release(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1203</i><br>
     * @deprecated use the safer method {@link #libvlc_media_release(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_release(Pointer p_md);
    /**
     * Decrement the reference count of a media descriptor object. If the<br>
     * reference count is 0, then libvlc_media_release() will release the<br>
     * media descriptor object. It will send out an libvlc_MediaFreed event<br>
     * to all listeners. If the media descriptor object has been released it<br>
     * should not be used again.<br>
     * \param p_md the media descriptor<br>
     * Original signature : <code>void libvlc_media_release(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1203</i>
     */
    void libvlc_media_release(PointerByReference p_md);
    /**
     * Get the media resource locator (mrl) from a media descriptor object<br>
     * \param p_md a media descriptor object<br>
     * \return string with mrl of media descriptor object<br>
     * Original signature : <code>char* libvlc_media_get_mrl(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1212</i><br>
     * @deprecated use the safer method {@link #libvlc_media_get_mrl(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    Pointer libvlc_media_get_mrl(Pointer p_md);
    /**
     * Get the media resource locator (mrl) from a media descriptor object<br>
     * \param p_md a media descriptor object<br>
     * \return string with mrl of media descriptor object<br>
     * Original signature : <code>char* libvlc_media_get_mrl(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1212</i>
     */
    Pointer libvlc_media_get_mrl(PointerByReference p_md);
    /**
     * Duplicate a media descriptor object.<br>
     * \param p_md a media descriptor object.<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_duplicate(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1219</i><br>
     * @deprecated use the safer method {@link #libvlc_media_duplicate(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_duplicate(Pointer p_md);
    /**
     * Duplicate a media descriptor object.<br>
     * \param p_md a media descriptor object.<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_duplicate(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1219</i>
     */
    PointerByReference libvlc_media_duplicate(PointerByReference p_md);
    /**
     * Read the meta of the media.<br>
     * If the media has not yet been parsed this will return NULL.<br>
     * This methods automatically calls libvlc_media_parse_async(), so after calling<br>
     * it you may receive a libvlc_MediaMetaChanged event. If you prefer a synchronous<br>
     * version ensure that you call libvlc_media_parse() before get_meta().<br>
     * \see libvlc_media_parse<br>
     * \see libvlc_media_parse_async<br>
     * \see libvlc_MediaMetaChanged<br>
     * \param p_md the media descriptor<br>
     * \param e_meta the meta to read<br>
     * \return the media's meta<br>
     * Original signature : <code>char* libvlc_media_get_meta(libvlc_media_t*, libvlc_meta_t)</code><br>
     * <i>native declaration : line 1238</i><br>
     * @deprecated use the safer method {@link #libvlc_media_get_meta(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    Pointer libvlc_media_get_meta(Pointer p_md, int e_meta);
    /**
     * Read the meta of the media.<br>
     * If the media has not yet been parsed this will return NULL.<br>
     * This methods automatically calls libvlc_media_parse_async(), so after calling<br>
     * it you may receive a libvlc_MediaMetaChanged event. If you prefer a synchronous<br>
     * version ensure that you call libvlc_media_parse() before get_meta().<br>
     * \see libvlc_media_parse<br>
     * \see libvlc_media_parse_async<br>
     * \see libvlc_MediaMetaChanged<br>
     * \param p_md the media descriptor<br>
     * \param e_meta the meta to read<br>
     * \return the media's meta<br>
     * Original signature : <code>char* libvlc_media_get_meta(libvlc_media_t*, libvlc_meta_t)</code><br>
     * <i>native declaration : line 1238</i>
     */
    Pointer libvlc_media_get_meta(PointerByReference p_md, int e_meta);
    /**
     * Set the meta of the media (this function will not save the meta, call<br>
     * libvlc_media_save_meta in order to save the meta)<br>
     * \param p_md the media descriptor<br>
     * \param e_meta the meta to write<br>
     * \param psz_value the media's meta<br>
     * Original signature : <code>void libvlc_media_set_meta(libvlc_media_t*, libvlc_meta_t, const char*)</code><br>
     * <i>native declaration : line 1249</i><br>
     * @deprecated use the safer methods {@link #libvlc_media_set_meta(com.sun.jna.ptr.PointerByReference, int, java.lang.String)} and {@link #libvlc_media_set_meta(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_media_set_meta(Pointer p_md, int e_meta, Pointer psz_value);
    /**
     * Set the meta of the media (this function will not save the meta, call<br>
     * libvlc_media_save_meta in order to save the meta)<br>
     * \param p_md the media descriptor<br>
     * \param e_meta the meta to write<br>
     * \param psz_value the media's meta<br>
     * Original signature : <code>void libvlc_media_set_meta(libvlc_media_t*, libvlc_meta_t, const char*)</code><br>
     * <i>native declaration : line 1249</i>
     */
    void libvlc_media_set_meta(PointerByReference p_md, int e_meta, String psz_value);
    /**
     * Set the meta of the media (this function will not save the meta, call<br>
     * libvlc_media_save_meta in order to save the meta)<br>
     * \param p_md the media descriptor<br>
     * \param e_meta the meta to write<br>
     * \param psz_value the media's meta<br>
     * Original signature : <code>void libvlc_media_set_meta(libvlc_media_t*, libvlc_meta_t, const char*)</code><br>
     * <i>native declaration : line 1249</i>
     */
    void libvlc_media_set_meta(PointerByReference p_md, int e_meta, Pointer psz_value);
    /**
     * Save the meta previously set<br>
     * \param p_md the media desriptor<br>
     * \return true if the write operation was successful<br>
     * Original signature : <code>int libvlc_media_save_meta(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1260</i><br>
     * @deprecated use the safer method {@link #libvlc_media_save_meta(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_save_meta(Pointer p_md);
    /**
     * Save the meta previously set<br>
     * \param p_md the media desriptor<br>
     * \return true if the write operation was successful<br>
     * Original signature : <code>int libvlc_media_save_meta(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1260</i>
     */
    int libvlc_media_save_meta(PointerByReference p_md);
    /**
     * Get current state of media descriptor object. Possible media states<br>
     * are defined in libvlc_structures.c ( libvlc_NothingSpecial=0,<br>
     * libvlc_Opening, libvlc_Buffering, libvlc_Playing, libvlc_Paused,<br>
     * libvlc_Stopped, libvlc_Ended,<br>
     * libvlc_Error).<br>
     * \see libvlc_state_t<br>
     * \param p_md a media descriptor object<br>
     * \return state of media descriptor object<br>
     * Original signature : <code>libvlc_state_t libvlc_media_get_state(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1274</i><br>
     * @deprecated use the safer method {@link #libvlc_media_get_state(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_get_state(Pointer p_md);
    /**
     * Get current state of media descriptor object. Possible media states<br>
     * are defined in libvlc_structures.c ( libvlc_NothingSpecial=0,<br>
     * libvlc_Opening, libvlc_Buffering, libvlc_Playing, libvlc_Paused,<br>
     * libvlc_Stopped, libvlc_Ended,<br>
     * libvlc_Error).<br>
     * \see libvlc_state_t<br>
     * \param p_md a media descriptor object<br>
     * \return state of media descriptor object<br>
     * Original signature : <code>libvlc_state_t libvlc_media_get_state(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1274</i>
     */
    int libvlc_media_get_state(PointerByReference p_md);
    /**
     * Get the current statistics about the media<br>
     * \param p_md: media descriptor object<br>
     * \param p_stats: structure that contain the statistics about the media<br>
     *                 (this structure must be allocated by the caller)<br>
     * \return true if the statistics are available, false otherwise<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_get_stats(libvlc_media_t*, libvlc_media_stats_t*)</code><br>
     * <i>native declaration : line 1287</i><br>
     * @deprecated use the safer method {@link #libvlc_media_get_stats(com.sun.jna.ptr.PointerByReference, libvlc.libvlc_media_stats_t)} instead
     */
    @Deprecated 
    int libvlc_media_get_stats(Pointer p_md, libvlc_media_stats_t p_stats);
    /**
     * Get the current statistics about the media<br>
     * \param p_md: media descriptor object<br>
     * \param p_stats: structure that contain the statistics about the media<br>
     *                 (this structure must be allocated by the caller)<br>
     * \return true if the statistics are available, false otherwise<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_get_stats(libvlc_media_t*, libvlc_media_stats_t*)</code><br>
     * <i>native declaration : line 1287</i>
     */
    int libvlc_media_get_stats(PointerByReference p_md, libvlc_media_stats_t p_stats);
    /**
     * Get subitems of media descriptor object. This will increment<br>
     * the reference count of supplied media descriptor object. Use<br>
     * libvlc_media_list_release() to decrement the reference counting.<br>
     * \param p_md media descriptor object<br>
     * \return list of media descriptor subitems or NULL<br>
     * Original signature : <code>libvlc_media_list_t* libvlc_media_subitems(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1302</i><br>
     * @deprecated use the safer method {@link #libvlc_media_subitems(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_subitems(Pointer p_md);
    /**
     * Get subitems of media descriptor object. This will increment<br>
     * the reference count of supplied media descriptor object. Use<br>
     * libvlc_media_list_release() to decrement the reference counting.<br>
     * \param p_md media descriptor object<br>
     * \return list of media descriptor subitems or NULL<br>
     * Original signature : <code>libvlc_media_list_t* libvlc_media_subitems(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1302</i>
     */
    PointerByReference libvlc_media_subitems(PointerByReference p_md);
    /**
     * Get event manager from media descriptor object.<br>
     * NOTE: this function doesn't increment reference counting.<br>
     * \param p_md a media descriptor object<br>
     * \return event manager object<br>
     * Original signature : <code>libvlc_event_manager_t* libvlc_media_event_manager(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1312</i><br>
     * @deprecated use the safer method {@link #libvlc_media_event_manager(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_event_manager(Pointer p_md);
    /**
     * Get event manager from media descriptor object.<br>
     * NOTE: this function doesn't increment reference counting.<br>
     * \param p_md a media descriptor object<br>
     * \return event manager object<br>
     * Original signature : <code>libvlc_event_manager_t* libvlc_media_event_manager(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1312</i>
     */
    PointerByReference libvlc_media_event_manager(PointerByReference p_md);
    /**
     * Get duration (in ms) of media descriptor object item.<br>
     * \param p_md media descriptor object<br>
     * \return duration of media item or -1 on error<br>
     * Original signature : <code>libvlc_time_t libvlc_media_get_duration(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1321</i><br>
     * @deprecated use the safer method {@link #libvlc_media_get_duration(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    long libvlc_media_get_duration(Pointer p_md);
    /**
     * Get duration (in ms) of media descriptor object item.<br>
     * \param p_md media descriptor object<br>
     * \return duration of media item or -1 on error<br>
     * Original signature : <code>libvlc_time_t libvlc_media_get_duration(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1321</i>
     */
    long libvlc_media_get_duration(PointerByReference p_md);
    /**
     * Parse a media.<br>
     * This fetches (local) art, meta data and tracks information.<br>
     * The method is synchronous.<br>
     * \see libvlc_media_parse_async<br>
     * \see libvlc_media_get_meta<br>
     * \see libvlc_media_get_tracks_info<br>
     * \param p_md media descriptor object<br>
     * Original signature : <code>void libvlc_media_parse(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1336</i><br>
     * @deprecated use the safer method {@link #libvlc_media_parse(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_parse(Pointer p_md);
    /**
     * Parse a media.<br>
     * This fetches (local) art, meta data and tracks information.<br>
     * The method is synchronous.<br>
     * \see libvlc_media_parse_async<br>
     * \see libvlc_media_get_meta<br>
     * \see libvlc_media_get_tracks_info<br>
     * \param p_md media descriptor object<br>
     * Original signature : <code>void libvlc_media_parse(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1336</i>
     */
    void libvlc_media_parse(PointerByReference p_md);
    /**
     * Parse a media.<br>
     * This fetches (local) art, meta data and tracks information.<br>
     * The method is the asynchronous of libvlc_media_parse().<br>
     * To track when this is over you can listen to libvlc_MediaParsedChanged<br>
     * event. However if the media was already parsed you will not receive this<br>
     * event.<br>
     * \see libvlc_media_parse<br>
     * \see libvlc_MediaParsedChanged<br>
     * \see libvlc_media_get_meta<br>
     * \see libvlc_media_get_tracks_info<br>
     * \param p_md media descriptor object<br>
     * Original signature : <code>void libvlc_media_parse_async(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1356</i><br>
     * @deprecated use the safer method {@link #libvlc_media_parse_async(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_parse_async(Pointer p_md);
    /**
     * Parse a media.<br>
     * This fetches (local) art, meta data and tracks information.<br>
     * The method is the asynchronous of libvlc_media_parse().<br>
     * To track when this is over you can listen to libvlc_MediaParsedChanged<br>
     * event. However if the media was already parsed you will not receive this<br>
     * event.<br>
     * \see libvlc_media_parse<br>
     * \see libvlc_MediaParsedChanged<br>
     * \see libvlc_media_get_meta<br>
     * \see libvlc_media_get_tracks_info<br>
     * \param p_md media descriptor object<br>
     * Original signature : <code>void libvlc_media_parse_async(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1356</i>
     */
    void libvlc_media_parse_async(PointerByReference p_md);
    /**
     * Parse the media asynchronously with options.<br>
     * This fetches (local or network) art, meta data and/or tracks information.<br>
     * This method is the extended version of libvlc_media_parse_async().<br>
     * To track when this is over you can listen to libvlc_MediaParsedChanged<br>
     * event. However if this functions returns an error, you will not receive this<br>
     * event.<br>
     * It uses a flag to specify parse options (see libvlc_media_parse_flag_t). All<br>
     * these flags can be combined. By default, media is parsed if it's a local<br>
     * file.<br>
     * \see libvlc_MediaParsedChanged<br>
     * \see libvlc_media_get_meta<br>
     * \see libvlc_media_tracks_get<br>
     * \see libvlc_media_parse_flag_t<br>
     * \param p_md media descriptor object<br>
     * \param parse_flag parse options:<br>
     * \return -1 in case of error, 0 otherwise<br>
     * \version LibVLC 3.0.0 or later<br>
     * Original signature : <code>int libvlc_media_parse_with_options(libvlc_media_t*, libvlc_media_parse_flag_t)</code><br>
     * <i>native declaration : line 1383</i><br>
     * @deprecated use the safer method {@link #libvlc_media_parse_with_options(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    int libvlc_media_parse_with_options(Pointer p_md, int parse_flag);
    /**
     * Parse the media asynchronously with options.<br>
     * This fetches (local or network) art, meta data and/or tracks information.<br>
     * This method is the extended version of libvlc_media_parse_async().<br>
     * To track when this is over you can listen to libvlc_MediaParsedChanged<br>
     * event. However if this functions returns an error, you will not receive this<br>
     * event.<br>
     * It uses a flag to specify parse options (see libvlc_media_parse_flag_t). All<br>
     * these flags can be combined. By default, media is parsed if it's a local<br>
     * file.<br>
     * \see libvlc_MediaParsedChanged<br>
     * \see libvlc_media_get_meta<br>
     * \see libvlc_media_tracks_get<br>
     * \see libvlc_media_parse_flag_t<br>
     * \param p_md media descriptor object<br>
     * \param parse_flag parse options:<br>
     * \return -1 in case of error, 0 otherwise<br>
     * \version LibVLC 3.0.0 or later<br>
     * Original signature : <code>int libvlc_media_parse_with_options(libvlc_media_t*, libvlc_media_parse_flag_t)</code><br>
     * <i>native declaration : line 1383</i>
     */
    int libvlc_media_parse_with_options(PointerByReference p_md, int parse_flag);
    /**
     * Get Parsed status for media descriptor object.<br>
     * \see libvlc_MediaParsedChanged<br>
     * \param p_md media descriptor object<br>
     * \return true if media object has been parsed otherwise it returns false<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_is_parsed(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1397</i><br>
     * @deprecated use the safer method {@link #libvlc_media_is_parsed(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_is_parsed(Pointer p_md);
    /**
     * Get Parsed status for media descriptor object.<br>
     * \see libvlc_MediaParsedChanged<br>
     * \param p_md media descriptor object<br>
     * \return true if media object has been parsed otherwise it returns false<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_is_parsed(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1397</i>
     */
    int libvlc_media_is_parsed(PointerByReference p_md);
    /**
     * Sets media descriptor's user_data. user_data is specialized data<br>
     * accessed by the host application, VLC.framework uses it as a pointer to<br>
     * an native object that references a libvlc_media_t pointer<br>
     * \param p_md media descriptor object<br>
     * \param p_new_user_data pointer to user data<br>
     * Original signature : <code>void libvlc_media_set_user_data(libvlc_media_t*, void*)</code><br>
     * <i>native declaration : line 1408</i><br>
     * @deprecated use the safer method {@link #libvlc_media_set_user_data(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_media_set_user_data(Pointer p_md, Pointer p_new_user_data);
    /**
     * Sets media descriptor's user_data. user_data is specialized data<br>
     * accessed by the host application, VLC.framework uses it as a pointer to<br>
     * an native object that references a libvlc_media_t pointer<br>
     * \param p_md media descriptor object<br>
     * \param p_new_user_data pointer to user data<br>
     * Original signature : <code>void libvlc_media_set_user_data(libvlc_media_t*, void*)</code><br>
     * <i>native declaration : line 1408</i>
     */
    void libvlc_media_set_user_data(PointerByReference p_md, Pointer p_new_user_data);
    /**
     * Get media descriptor's user_data. user_data is specialized data<br>
     * accessed by the host application, VLC.framework uses it as a pointer to<br>
     * an native object that references a libvlc_media_t pointer<br>
     * \param p_md media descriptor object<br>
     * Original signature : <code>void* libvlc_media_get_user_data(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1418</i><br>
     * @deprecated use the safer method {@link #libvlc_media_get_user_data(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    Pointer libvlc_media_get_user_data(Pointer p_md);
    /**
     * Get media descriptor's user_data. user_data is specialized data<br>
     * accessed by the host application, VLC.framework uses it as a pointer to<br>
     * an native object that references a libvlc_media_t pointer<br>
     * \param p_md media descriptor object<br>
     * Original signature : <code>void* libvlc_media_get_user_data(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1418</i>
     */
    Pointer libvlc_media_get_user_data(PointerByReference p_md);
    /**
     * Get media descriptor's elementary streams description<br>
     * Note, you need to call libvlc_media_parse() or play the media at least once<br>
     * before calling this function.<br>
     * Not doing this will result in an empty array.<br>
     * \deprecated Use libvlc_media_tracks_get instead<br>
     * \param p_md media descriptor object<br>
     * \param tracks address to store an allocated array of Elementary Streams<br>
     *        descriptions (must be freed by the caller) [OUT]<br>
     * \return the number of Elementary Streams<br>
     * Original signature : <code>int libvlc_media_get_tracks_info(libvlc_media_t*, libvlc_media_track_info_t**)</code><br>
     * <i>native declaration : line 1436</i><br>
     * @deprecated use the safer method {@link #libvlc_media_get_tracks_info(com.sun.jna.ptr.PointerByReference, libvlc.libvlc_media_track_info_t.ByReference[])} instead
     */
    @Deprecated 
    int libvlc_media_get_tracks_info(Pointer p_md, PointerByReference tracks);
    /**
     * Get media descriptor's elementary streams description<br>
     * Note, you need to call libvlc_media_parse() or play the media at least once<br>
     * before calling this function.<br>
     * Not doing this will result in an empty array.<br>
     * \deprecated Use libvlc_media_tracks_get instead<br>
     * \param p_md media descriptor object<br>
     * \param tracks address to store an allocated array of Elementary Streams<br>
     *        descriptions (must be freed by the caller) [OUT]<br>
     * \return the number of Elementary Streams<br>
     * Original signature : <code>int libvlc_media_get_tracks_info(libvlc_media_t*, libvlc_media_track_info_t**)</code><br>
     * <i>native declaration : line 1436</i>
     */
    int libvlc_media_get_tracks_info(PointerByReference p_md, libvlc_media_track_info_t.ByReference tracks[]);
    /**
     * Get media descriptor's elementary streams description<br>
     * Note, you need to call libvlc_media_parse() or play the media at least once<br>
     * before calling this function.<br>
     * Not doing this will result in an empty array.<br>
     * \version LibVLC 2.1.0 and later.<br>
     * \param p_md media descriptor object<br>
     * \param tracks address to store an allocated array of Elementary Streams<br>
     *        descriptions (must be freed with libvlc_media_tracks_release<br>
     * by the caller) [OUT]<br>
     * \return the number of Elementary Streams (zero on error)<br>
     * Original signature : <code>int libvlc_media_tracks_get(libvlc_media_t*, libvlc_media_track_t***)</code><br>
     * <i>native declaration : line 1456</i><br>
     * @deprecated use the safer method {@link #libvlc_media_tracks_get(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_tracks_get(Pointer p_md, PointerByReference tracks);
    /**
     * Get media descriptor's elementary streams description<br>
     * Note, you need to call libvlc_media_parse() or play the media at least once<br>
     * before calling this function.<br>
     * Not doing this will result in an empty array.<br>
     * \version LibVLC 2.1.0 and later.<br>
     * \param p_md media descriptor object<br>
     * \param tracks address to store an allocated array of Elementary Streams<br>
     *        descriptions (must be freed with libvlc_media_tracks_release<br>
     * by the caller) [OUT]<br>
     * \return the number of Elementary Streams (zero on error)<br>
     * Original signature : <code>int libvlc_media_tracks_get(libvlc_media_t*, libvlc_media_track_t***)</code><br>
     * <i>native declaration : line 1456</i>
     */
    int libvlc_media_tracks_get(PointerByReference p_md, PointerByReference tracks);
    /**
     * Get codec description from media elementary stream<br>
     * \version LibVLC 3.0.0 and later.<br>
     * \see libvlc_media_track_t<br>
     * \param i_type i_type from libvlc_media_track_t<br>
     * \param i_codec i_codec or i_original_fourcc from libvlc_media_track_t<br>
     * \return codec description<br>
     * Original signature : <code>char* libvlc_media_get_codec_description(libvlc_track_type_t, uint32_t)</code><br>
     * <i>native declaration : line 1472</i>
     */
    Pointer libvlc_media_get_codec_description(int i_type, int i_codec);
    /**
     * Release media descriptor's elementary streams description array<br>
     * \version LibVLC 2.1.0 and later.<br>
     * \param p_tracks tracks info array to release<br>
     * \param i_count number of elements in the array<br>
     * Original signature : <code>void libvlc_media_tracks_release(libvlc_media_track_t**, unsigned)</code><br>
     * <i>native declaration : line 1484</i><br>
     * @deprecated use the safer method {@link #libvlc_media_tracks_release(libvlc.libvlc_media_track_t.ByReference[], int)} instead
     */
    @Deprecated 
    void libvlc_media_tracks_release(PointerByReference p_tracks, int i_count);
    /**
     * Release media descriptor's elementary streams description array<br>
     * \version LibVLC 2.1.0 and later.<br>
     * \param p_tracks tracks info array to release<br>
     * \param i_count number of elements in the array<br>
     * Original signature : <code>void libvlc_media_tracks_release(libvlc_media_track_t**, unsigned)</code><br>
     * <i>native declaration : line 1484</i>
     */
    void libvlc_media_tracks_release(libvlc_media_track_t.ByReference p_tracks[], int i_count);
    /**
     * Get the media type of the media descriptor object<br>
     * \version LibVLC 3.0.0 and later.<br>
     * \see libvlc_media_type_t<br>
     * \param p_md media descriptor object<br>
     * \return media type<br>
     * Original signature : <code>libvlc_media_type_t libvlc_media_get_type(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1499</i><br>
     * @deprecated use the safer method {@link #libvlc_media_get_type(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_get_type(Pointer p_md);
    /**
     * Get the media type of the media descriptor object<br>
     * \version LibVLC 3.0.0 and later.<br>
     * \see libvlc_media_type_t<br>
     * \param p_md media descriptor object<br>
     * \return media type<br>
     * Original signature : <code>libvlc_media_type_t libvlc_media_get_type(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1499</i>
     */
    int libvlc_media_get_type(PointerByReference p_md);
    /**
     * Create an empty Media Player object<br>
     * \param p_libvlc_instance the libvlc instance in which the Media Player<br>
     *        should be created.<br>
     * \return a new media player object, or NULL on error.<br>
     * Original signature : <code>libvlc_media_player_t* libvlc_media_player_new(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 1660</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_new(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_player_new(Pointer p_libvlc_instance);
    /**
     * Create an empty Media Player object<br>
     * \param p_libvlc_instance the libvlc instance in which the Media Player<br>
     *        should be created.<br>
     * \return a new media player object, or NULL on error.<br>
     * Original signature : <code>libvlc_media_player_t* libvlc_media_player_new(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 1660</i>
     */
    PointerByReference libvlc_media_player_new(PointerByReference p_libvlc_instance);
    /**
     * Create a Media Player object from a Media<br>
     * \param p_md the media. Afterwards the p_md can be safely<br>
     *        destroyed.<br>
     * \return a new media player object, or NULL on error.<br>
     * Original signature : <code>libvlc_media_player_t* libvlc_media_player_new_from_media(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1669</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_new_from_media(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_player_new_from_media(Pointer p_md);
    /**
     * Create a Media Player object from a Media<br>
     * \param p_md the media. Afterwards the p_md can be safely<br>
     *        destroyed.<br>
     * \return a new media player object, or NULL on error.<br>
     * Original signature : <code>libvlc_media_player_t* libvlc_media_player_new_from_media(libvlc_media_t*)</code><br>
     * <i>native declaration : line 1669</i>
     */
    PointerByReference libvlc_media_player_new_from_media(PointerByReference p_md);
    /**
     * Release a media_player after use<br>
     * Decrement the reference count of a media player object. If the<br>
     * reference count is 0, then libvlc_media_player_release() will<br>
     * release the media player object. If the media player object<br>
     * has been released, then it should not be used again.<br>
     * \param p_mi the Media Player to free<br>
     * Original signature : <code>void libvlc_media_player_release(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1680</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_release(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_player_release(Pointer p_mi);
    /**
     * Release a media_player after use<br>
     * Decrement the reference count of a media player object. If the<br>
     * reference count is 0, then libvlc_media_player_release() will<br>
     * release the media player object. If the media player object<br>
     * has been released, then it should not be used again.<br>
     * \param p_mi the Media Player to free<br>
     * Original signature : <code>void libvlc_media_player_release(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1680</i>
     */
    void libvlc_media_player_release(PointerByReference p_mi);
    /**
     * Retain a reference to a media player object. Use<br>
     * libvlc_media_player_release() to decrement reference count.<br>
     * \param p_mi media player object<br>
     * Original signature : <code>void libvlc_media_player_retain(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1688</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_retain(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_player_retain(Pointer p_mi);
    /**
     * Retain a reference to a media player object. Use<br>
     * libvlc_media_player_release() to decrement reference count.<br>
     * \param p_mi media player object<br>
     * Original signature : <code>void libvlc_media_player_retain(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1688</i>
     */
    void libvlc_media_player_retain(PointerByReference p_mi);
    /**
     * Set the media that will be used by the media_player. If any,<br>
     * previous md will be released.<br>
     * \param p_mi the Media Player<br>
     * \param p_md the Media. Afterwards the p_md can be safely<br>
     *        destroyed.<br>
     * Original signature : <code>void libvlc_media_player_set_media(libvlc_media_player_t*, libvlc_media_t*)</code><br>
     * <i>native declaration : line 1698</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_set_media(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_player_set_media(Pointer p_mi, Pointer p_md);
    /**
     * Set the media that will be used by the media_player. If any,<br>
     * previous md will be released.<br>
     * \param p_mi the Media Player<br>
     * \param p_md the Media. Afterwards the p_md can be safely<br>
     *        destroyed.<br>
     * Original signature : <code>void libvlc_media_player_set_media(libvlc_media_player_t*, libvlc_media_t*)</code><br>
     * <i>native declaration : line 1698</i>
     */
    void libvlc_media_player_set_media(PointerByReference p_mi, PointerByReference p_md);
    /**
     * Get the media used by the media_player.<br>
     * \param p_mi the Media Player<br>
     * \return the media associated with p_mi, or NULL if no<br>
     *         media is associated<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_player_get_media(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1708</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_media(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_player_get_media(Pointer p_mi);
    /**
     * Get the media used by the media_player.<br>
     * \param p_mi the Media Player<br>
     * \return the media associated with p_mi, or NULL if no<br>
     *         media is associated<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_player_get_media(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1708</i>
     */
    PointerByReference libvlc_media_player_get_media(PointerByReference p_mi);
    /**
     * Get the Event Manager from which the media player send event.<br>
     * \param p_mi the Media Player<br>
     * \return the event manager associated with p_mi<br>
     * Original signature : <code>libvlc_event_manager_t* libvlc_media_player_event_manager(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1716</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_event_manager(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_player_event_manager(Pointer p_mi);
    /**
     * Get the Event Manager from which the media player send event.<br>
     * \param p_mi the Media Player<br>
     * \return the event manager associated with p_mi<br>
     * Original signature : <code>libvlc_event_manager_t* libvlc_media_player_event_manager(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1716</i>
     */
    PointerByReference libvlc_media_player_event_manager(PointerByReference p_mi);
    /**
     * is_playing<br>
     * \param p_mi the Media Player<br>
     * \return 1 if the media player is playing, 0 otherwise<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_player_is_playing(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1726</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_is_playing(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_is_playing(Pointer p_mi);
    /**
     * is_playing<br>
     * \param p_mi the Media Player<br>
     * \return 1 if the media player is playing, 0 otherwise<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_player_is_playing(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1726</i>
     */
    int libvlc_media_player_is_playing(PointerByReference p_mi);
    /**
     * Play<br>
     * \param p_mi the Media Player<br>
     * \return 0 if playback started (and was already started), or -1 on error.<br>
     * Original signature : <code>int libvlc_media_player_play(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1734</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_play(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_play(Pointer p_mi);
    /**
     * Play<br>
     * \param p_mi the Media Player<br>
     * \return 0 if playback started (and was already started), or -1 on error.<br>
     * Original signature : <code>int libvlc_media_player_play(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1734</i>
     */
    int libvlc_media_player_play(PointerByReference p_mi);
    /**
     * Pause or resume (no effect if there is no media)<br>
     * \param mp the Media Player<br>
     * \param do_pause play/resume if zero, pause if non-zero<br>
     * \version LibVLC 1.1.1 or later<br>
     * Original signature : <code>void libvlc_media_player_set_pause(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 1743</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_set_pause(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    void libvlc_media_player_set_pause(Pointer mp, int do_pause);
    /**
     * Pause or resume (no effect if there is no media)<br>
     * \param mp the Media Player<br>
     * \param do_pause play/resume if zero, pause if non-zero<br>
     * \version LibVLC 1.1.1 or later<br>
     * Original signature : <code>void libvlc_media_player_set_pause(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 1743</i>
     */
    void libvlc_media_player_set_pause(PointerByReference mp, int do_pause);
    /**
     * Toggle pause (no effect if there is no media)<br>
     * \param p_mi the Media Player<br>
     * Original signature : <code>void libvlc_media_player_pause(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1751</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_pause(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_player_pause(Pointer p_mi);
    /**
     * Toggle pause (no effect if there is no media)<br>
     * \param p_mi the Media Player<br>
     * Original signature : <code>void libvlc_media_player_pause(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1751</i>
     */
    void libvlc_media_player_pause(PointerByReference p_mi);
    /**
     * Stop (no effect if there is no media)<br>
     * \param p_mi the Media Player<br>
     * Original signature : <code>void libvlc_media_player_stop(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1758</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_stop(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_player_stop(Pointer p_mi);
    /**
     * Stop (no effect if there is no media)<br>
     * \param p_mi the Media Player<br>
     * Original signature : <code>void libvlc_media_player_stop(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1758</i>
     */
    void libvlc_media_player_stop(PointerByReference p_mi);
    /**
     * Set callbacks and private data to render decoded video to a custom area<br>
     * in memory.<br>
     * Use libvlc_video_set_format() or libvlc_video_set_format_callbacks()<br>
     * to configure the decoded format.<br>
     * \param mp the media player<br>
     * \param lock callback to lock video memory (must not be NULL)<br>
     * \param unlock callback to unlock video memory (or NULL if not needed)<br>
     * \param display callback to display video (or NULL if not needed)<br>
     * \param opaque private pointer for the three callbacks (as first parameter)<br>
     * \version LibVLC 1.1.1 or later<br>
     * Original signature : <code>void libvlc_video_set_callbacks(libvlc_media_player_t*, libvlc_video_lock_cb, libvlc_video_unlock_cb, libvlc_video_display_cb, void*)</code><br>
     * <i>native declaration : line 1861</i><br>
     * @deprecated use the safer method {@link #libvlc_video_set_callbacks(com.sun.jna.ptr.PointerByReference, libvlc.LibvlcLibrary.libvlc_video_lock_cb, libvlc.LibvlcLibrary.libvlc_video_unlock_cb, libvlc.LibvlcLibrary.libvlc_video_display_cb, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_video_set_callbacks(Pointer mp, LibvlcLibrary.libvlc_video_lock_cb lock, LibvlcLibrary.libvlc_video_unlock_cb unlock, LibvlcLibrary.libvlc_video_display_cb display, Pointer opaque);
    /**
     * Set callbacks and private data to render decoded video to a custom area<br>
     * in memory.<br>
     * Use libvlc_video_set_format() or libvlc_video_set_format_callbacks()<br>
     * to configure the decoded format.<br>
     * \param mp the media player<br>
     * \param lock callback to lock video memory (must not be NULL)<br>
     * \param unlock callback to unlock video memory (or NULL if not needed)<br>
     * \param display callback to display video (or NULL if not needed)<br>
     * \param opaque private pointer for the three callbacks (as first parameter)<br>
     * \version LibVLC 1.1.1 or later<br>
     * Original signature : <code>void libvlc_video_set_callbacks(libvlc_media_player_t*, libvlc_video_lock_cb, libvlc_video_unlock_cb, libvlc_video_display_cb, void*)</code><br>
     * <i>native declaration : line 1861</i>
     */
    void libvlc_video_set_callbacks(PointerByReference mp, LibvlcLibrary.libvlc_video_lock_cb lock, LibvlcLibrary.libvlc_video_unlock_cb unlock, LibvlcLibrary.libvlc_video_display_cb display, Pointer opaque);
    /**
     * Set decoded video chroma and dimensions.<br>
     * This only works in combination with libvlc_video_set_callbacks(),<br>
     * and is mutually exclusive with libvlc_video_set_format_callbacks().<br>
     * \param mp the media player<br>
     * \param chroma a four-characters string identifying the chroma<br>
     *               (e.g. "RV32" or "YUYV")<br>
     * \param width pixel width<br>
     * \param height pixel height<br>
     * \param pitch line pitch (in bytes)<br>
     * \version LibVLC 1.1.1 or later<br>
     * \bug All pixel planes are expected to have the same pitch.<br>
     * To use the YCbCr color space with chrominance subsampling,<br>
     * consider using libvlc_video_set_format_callbacks() instead.<br>
     * Original signature : <code>void libvlc_video_set_format(libvlc_media_player_t*, const char*, unsigned, unsigned, unsigned)</code><br>
     * <i>native declaration : line 1884</i><br>
     * @deprecated use the safer methods {@link #libvlc_video_set_format(com.sun.jna.ptr.PointerByReference, java.lang.String, int, int, int)} and {@link #libvlc_video_set_format(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int, int, int)} instead
     */
    @Deprecated 
    void libvlc_video_set_format(Pointer mp, Pointer chroma, int width, int height, int pitch);
    /**
     * Set decoded video chroma and dimensions.<br>
     * This only works in combination with libvlc_video_set_callbacks(),<br>
     * and is mutually exclusive with libvlc_video_set_format_callbacks().<br>
     * \param mp the media player<br>
     * \param chroma a four-characters string identifying the chroma<br>
     *               (e.g. "RV32" or "YUYV")<br>
     * \param width pixel width<br>
     * \param height pixel height<br>
     * \param pitch line pitch (in bytes)<br>
     * \version LibVLC 1.1.1 or later<br>
     * \bug All pixel planes are expected to have the same pitch.<br>
     * To use the YCbCr color space with chrominance subsampling,<br>
     * consider using libvlc_video_set_format_callbacks() instead.<br>
     * Original signature : <code>void libvlc_video_set_format(libvlc_media_player_t*, const char*, unsigned, unsigned, unsigned)</code><br>
     * <i>native declaration : line 1884</i>
     */
    void libvlc_video_set_format(PointerByReference mp, String chroma, int width, int height, int pitch);
    /**
     * Set decoded video chroma and dimensions.<br>
     * This only works in combination with libvlc_video_set_callbacks(),<br>
     * and is mutually exclusive with libvlc_video_set_format_callbacks().<br>
     * \param mp the media player<br>
     * \param chroma a four-characters string identifying the chroma<br>
     *               (e.g. "RV32" or "YUYV")<br>
     * \param width pixel width<br>
     * \param height pixel height<br>
     * \param pitch line pitch (in bytes)<br>
     * \version LibVLC 1.1.1 or later<br>
     * \bug All pixel planes are expected to have the same pitch.<br>
     * To use the YCbCr color space with chrominance subsampling,<br>
     * consider using libvlc_video_set_format_callbacks() instead.<br>
     * Original signature : <code>void libvlc_video_set_format(libvlc_media_player_t*, const char*, unsigned, unsigned, unsigned)</code><br>
     * <i>native declaration : line 1884</i>
     */
    void libvlc_video_set_format(PointerByReference mp, Pointer chroma, int width, int height, int pitch);
    /**
     * Set decoded video chroma and dimensions. This only works in combination with<br>
     * libvlc_video_set_callbacks().<br>
     * \param mp the media player<br>
     * \param setup callback to select the video format (cannot be NULL)<br>
     * \param cleanup callback to release any allocated resources (or NULL)<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>void libvlc_video_set_format_callbacks(libvlc_media_player_t*, libvlc_video_format_cb, libvlc_video_cleanup_cb)</code><br>
     * <i>native declaration : line 1898</i><br>
     * @deprecated use the safer method {@link #libvlc_video_set_format_callbacks(com.sun.jna.ptr.PointerByReference, libvlc.LibvlcLibrary.libvlc_video_format_cb, libvlc.LibvlcLibrary.libvlc_video_cleanup_cb)} instead
     */
    @Deprecated 
    void libvlc_video_set_format_callbacks(Pointer mp, LibvlcLibrary.libvlc_video_format_cb setup, LibvlcLibrary.libvlc_video_cleanup_cb cleanup);
    /**
     * Set decoded video chroma and dimensions. This only works in combination with<br>
     * libvlc_video_set_callbacks().<br>
     * \param mp the media player<br>
     * \param setup callback to select the video format (cannot be NULL)<br>
     * \param cleanup callback to release any allocated resources (or NULL)<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>void libvlc_video_set_format_callbacks(libvlc_media_player_t*, libvlc_video_format_cb, libvlc_video_cleanup_cb)</code><br>
     * <i>native declaration : line 1898</i>
     */
    void libvlc_video_set_format_callbacks(PointerByReference mp, LibvlcLibrary.libvlc_video_format_cb setup, LibvlcLibrary.libvlc_video_cleanup_cb cleanup);
    /**
     * Set the NSView handler where the media player should render its video output.<br>
     * Use the vout called "macosx".<br>
     * The drawable is an NSObject that follow the VLCOpenGLVideoViewEmbedding<br>
     * protocol:<br>
     * @begincode<br>
     * \@protocol VLCOpenGLVideoViewEmbedding <NSObject><br>
     * - (void)addVoutSubview:(NSView *)view;<br>
     * - (void)removeVoutSubview:(NSView *)view;<br>
     * \@end<br>
     * @endcode<br>
     * Or it can be an NSView object.<br>
     * If you want to use it along with Qt4 see the QMacCocoaViewContainer. Then<br>
     * the following code should work:<br>
     * @begincode<br>
     * {<br>
     *     NSView *video = [[NSView alloc] init];<br>
     *     QMacCocoaViewContainer *container = new QMacCocoaViewContainer(video, parent);<br>
     *     libvlc_media_player_set_nsobject(mp, video);<br>
     *     [video release];<br>
     * }<br>
     * @endcode<br>
     * You can find a live example in VLCVideoView in VLCKit.framework.<br>
     * \param p_mi the Media Player<br>
     * \param drawable the drawable that is either an NSView or an object following<br>
     * the VLCOpenGLVideoViewEmbedding protocol.<br>
     * Original signature : <code>void libvlc_media_player_set_nsobject(libvlc_media_player_t*, void*)</code><br>
     * <i>native declaration : line 1936</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_set_nsobject(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_media_player_set_nsobject(Pointer p_mi, Pointer drawable);
    /**
     * Set the NSView handler where the media player should render its video output.<br>
     * Use the vout called "macosx".<br>
     * The drawable is an NSObject that follow the VLCOpenGLVideoViewEmbedding<br>
     * protocol:<br>
     * @begincode<br>
     * \@protocol VLCOpenGLVideoViewEmbedding <NSObject><br>
     * - (void)addVoutSubview:(NSView *)view;<br>
     * - (void)removeVoutSubview:(NSView *)view;<br>
     * \@end<br>
     * @endcode<br>
     * Or it can be an NSView object.<br>
     * If you want to use it along with Qt4 see the QMacCocoaViewContainer. Then<br>
     * the following code should work:<br>
     * @begincode<br>
     * {<br>
     *     NSView *video = [[NSView alloc] init];<br>
     *     QMacCocoaViewContainer *container = new QMacCocoaViewContainer(video, parent);<br>
     *     libvlc_media_player_set_nsobject(mp, video);<br>
     *     [video release];<br>
     * }<br>
     * @endcode<br>
     * You can find a live example in VLCVideoView in VLCKit.framework.<br>
     * \param p_mi the Media Player<br>
     * \param drawable the drawable that is either an NSView or an object following<br>
     * the VLCOpenGLVideoViewEmbedding protocol.<br>
     * Original signature : <code>void libvlc_media_player_set_nsobject(libvlc_media_player_t*, void*)</code><br>
     * <i>native declaration : line 1936</i>
     */
    void libvlc_media_player_set_nsobject(PointerByReference p_mi, Pointer drawable);
    /**
     * Get the NSView handler previously set with libvlc_media_player_set_nsobject().<br>
     * \param p_mi the Media Player<br>
     * \return the NSView handler or 0 if none where set<br>
     * Original signature : <code>void* libvlc_media_player_get_nsobject(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1944</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_nsobject(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    Pointer libvlc_media_player_get_nsobject(Pointer p_mi);
    /**
     * Get the NSView handler previously set with libvlc_media_player_set_nsobject().<br>
     * \param p_mi the Media Player<br>
     * \return the NSView handler or 0 if none where set<br>
     * Original signature : <code>void* libvlc_media_player_get_nsobject(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1944</i>
     */
    Pointer libvlc_media_player_get_nsobject(PointerByReference p_mi);
    /**
     * Set the agl handler where the media player should render its video output.<br>
     * \param p_mi the Media Player<br>
     * \param drawable the agl handler<br>
     * Original signature : <code>void libvlc_media_player_set_agl(libvlc_media_player_t*, uint32_t)</code><br>
     * <i>native declaration : line 1952</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_set_agl(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    void libvlc_media_player_set_agl(Pointer p_mi, int drawable);
    /**
     * Set the agl handler where the media player should render its video output.<br>
     * \param p_mi the Media Player<br>
     * \param drawable the agl handler<br>
     * Original signature : <code>void libvlc_media_player_set_agl(libvlc_media_player_t*, uint32_t)</code><br>
     * <i>native declaration : line 1952</i>
     */
    void libvlc_media_player_set_agl(PointerByReference p_mi, int drawable);
    /**
     * Get the agl handler previously set with libvlc_media_player_set_agl().<br>
     * \param p_mi the Media Player<br>
     * \return the agl handler or 0 if none where set<br>
     * Original signature : <code>uint32_t libvlc_media_player_get_agl(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1960</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_agl(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_get_agl(Pointer p_mi);
    /**
     * Get the agl handler previously set with libvlc_media_player_set_agl().<br>
     * \param p_mi the Media Player<br>
     * \return the agl handler or 0 if none where set<br>
     * Original signature : <code>uint32_t libvlc_media_player_get_agl(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1960</i>
     */
    int libvlc_media_player_get_agl(PointerByReference p_mi);
    /**
     * Set an X Window System drawable where the media player should render its<br>
     * video output. If LibVLC was built without X11 output support, then this has<br>
     * no effects.<br>
     * The specified identifier must correspond to an existing Input/Output class<br>
     * X11 window. Pixmaps are <b>not</b> supported. The caller shall ensure that<br>
     * the X11 server is the same as the one the VLC instance has been configured<br>
     * with. This function must be called before video playback is started;<br>
     * otherwise it will only take effect after playback stop and restart.<br>
     * \param p_mi the Media Player<br>
     * \param drawable the ID of the X window<br>
     * Original signature : <code>void libvlc_media_player_set_xwindow(libvlc_media_player_t*, uint32_t)</code><br>
     * <i>native declaration : line 1976</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_set_xwindow(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    void libvlc_media_player_set_xwindow(Pointer p_mi, int drawable);
    /**
     * Set an X Window System drawable where the media player should render its<br>
     * video output. If LibVLC was built without X11 output support, then this has<br>
     * no effects.<br>
     * The specified identifier must correspond to an existing Input/Output class<br>
     * X11 window. Pixmaps are <b>not</b> supported. The caller shall ensure that<br>
     * the X11 server is the same as the one the VLC instance has been configured<br>
     * with. This function must be called before video playback is started;<br>
     * otherwise it will only take effect after playback stop and restart.<br>
     * \param p_mi the Media Player<br>
     * \param drawable the ID of the X window<br>
     * Original signature : <code>void libvlc_media_player_set_xwindow(libvlc_media_player_t*, uint32_t)</code><br>
     * <i>native declaration : line 1976</i>
     */
    void libvlc_media_player_set_xwindow(PointerByReference p_mi, int drawable);
    /**
     * Get the X Window System window identifier previously set with<br>
     * libvlc_media_player_set_xwindow(). Note that this will return the identifier<br>
     * even if VLC is not currently using it (for instance if it is playing an<br>
     * audio-only input).<br>
     * \param p_mi the Media Player<br>
     * \return an X window ID, or 0 if none where set.<br>
     * Original signature : <code>uint32_t libvlc_media_player_get_xwindow(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1987</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_xwindow(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_get_xwindow(Pointer p_mi);
    /**
     * Get the X Window System window identifier previously set with<br>
     * libvlc_media_player_set_xwindow(). Note that this will return the identifier<br>
     * even if VLC is not currently using it (for instance if it is playing an<br>
     * audio-only input).<br>
     * \param p_mi the Media Player<br>
     * \return an X window ID, or 0 if none where set.<br>
     * Original signature : <code>uint32_t libvlc_media_player_get_xwindow(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 1987</i>
     */
    int libvlc_media_player_get_xwindow(PointerByReference p_mi);
    /**
     * Set a Win32/Win64 API window handle (HWND) where the media player should<br>
     * render its video output. If LibVLC was built without Win32/Win64 API output<br>
     * support, then this has no effects.<br>
     * \param p_mi the Media Player<br>
     * \param drawable windows handle of the drawable<br>
     * Original signature : <code>void libvlc_media_player_set_hwnd(libvlc_media_player_t*, void*)</code><br>
     * <i>native declaration : line 1997</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_set_hwnd(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_media_player_set_hwnd(Pointer p_mi, Pointer drawable);
    /**
     * Set a Win32/Win64 API window handle (HWND) where the media player should<br>
     * render its video output. If LibVLC was built without Win32/Win64 API output<br>
     * support, then this has no effects.<br>
     * \param p_mi the Media Player<br>
     * \param drawable windows handle of the drawable<br>
     * Original signature : <code>void libvlc_media_player_set_hwnd(libvlc_media_player_t*, void*)</code><br>
     * <i>native declaration : line 1997</i>
     */
    void libvlc_media_player_set_hwnd(PointerByReference p_mi, Pointer drawable);
    /**
     * Get the Windows API window handle (HWND) previously set with<br>
     * libvlc_media_player_set_hwnd(). The handle will be returned even if LibVLC<br>
     * is not currently outputting any video to it.<br>
     * \param p_mi the Media Player<br>
     * \return a window handle or NULL if there are none.<br>
     * Original signature : <code>void* libvlc_media_player_get_hwnd(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2007</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_hwnd(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    Pointer libvlc_media_player_get_hwnd(Pointer p_mi);
    /**
     * Get the Windows API window handle (HWND) previously set with<br>
     * libvlc_media_player_set_hwnd(). The handle will be returned even if LibVLC<br>
     * is not currently outputting any video to it.<br>
     * \param p_mi the Media Player<br>
     * \return a window handle or NULL if there are none.<br>
     * Original signature : <code>void* libvlc_media_player_get_hwnd(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2007</i>
     */
    Pointer libvlc_media_player_get_hwnd(PointerByReference p_mi);
    /**
     * Set callbacks and private data for decoded audio.<br>
     * Use libvlc_audio_set_format() or libvlc_audio_set_format_callbacks()<br>
     * to configure the decoded audio format.<br>
     * \param mp the media player<br>
     * \param play callback to play audio samples (must not be NULL)<br>
     * \param pause callback to pause playback (or NULL to ignore)<br>
     * \param resume callback to resume playback (or NULL to ignore)<br>
     * \param flush callback to flush audio buffers (or NULL to ignore)<br>
     * \param drain callback to drain audio buffers (or NULL to ignore)<br>
     * \param opaque private pointer for the audio callbacks (as first parameter)<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>void libvlc_audio_set_callbacks(libvlc_media_player_t*, libvlc_audio_play_cb, libvlc_audio_pause_cb, libvlc_audio_resume_cb, libvlc_audio_flush_cb, libvlc_audio_drain_cb, void*)</code><br>
     * <i>native declaration : line 2073</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_set_callbacks(com.sun.jna.ptr.PointerByReference, libvlc.LibvlcLibrary.libvlc_audio_play_cb, libvlc.LibvlcLibrary.libvlc_audio_pause_cb, libvlc.LibvlcLibrary.libvlc_audio_resume_cb, libvlc.LibvlcLibrary.libvlc_audio_flush_cb, libvlc.LibvlcLibrary.libvlc_audio_drain_cb, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_audio_set_callbacks(Pointer mp, LibvlcLibrary.libvlc_audio_play_cb play, LibvlcLibrary.libvlc_audio_pause_cb pause, LibvlcLibrary.libvlc_audio_resume_cb resume, LibvlcLibrary.libvlc_audio_flush_cb flush, LibvlcLibrary.libvlc_audio_drain_cb drain, Pointer opaque);
    /**
     * Set callbacks and private data for decoded audio.<br>
     * Use libvlc_audio_set_format() or libvlc_audio_set_format_callbacks()<br>
     * to configure the decoded audio format.<br>
     * \param mp the media player<br>
     * \param play callback to play audio samples (must not be NULL)<br>
     * \param pause callback to pause playback (or NULL to ignore)<br>
     * \param resume callback to resume playback (or NULL to ignore)<br>
     * \param flush callback to flush audio buffers (or NULL to ignore)<br>
     * \param drain callback to drain audio buffers (or NULL to ignore)<br>
     * \param opaque private pointer for the audio callbacks (as first parameter)<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>void libvlc_audio_set_callbacks(libvlc_media_player_t*, libvlc_audio_play_cb, libvlc_audio_pause_cb, libvlc_audio_resume_cb, libvlc_audio_flush_cb, libvlc_audio_drain_cb, void*)</code><br>
     * <i>native declaration : line 2073</i>
     */
    void libvlc_audio_set_callbacks(PointerByReference mp, LibvlcLibrary.libvlc_audio_play_cb play, LibvlcLibrary.libvlc_audio_pause_cb pause, LibvlcLibrary.libvlc_audio_resume_cb resume, LibvlcLibrary.libvlc_audio_flush_cb flush, LibvlcLibrary.libvlc_audio_drain_cb drain, Pointer opaque);
    /**
     * Set callbacks and private data for decoded audio. This only works in<br>
     * combination with libvlc_audio_set_callbacks().<br>
     * Use libvlc_audio_set_format() or libvlc_audio_set_format_callbacks()<br>
     * to configure the decoded audio format.<br>
     * \param mp the media player<br>
     * \param set_volume callback to apply audio volume,<br>
     *                   or NULL to apply volume in software<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>void libvlc_audio_set_volume_callback(libvlc_media_player_t*, libvlc_audio_set_volume_cb)</code><br>
     * <i>native declaration : line 2093</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_set_volume_callback(com.sun.jna.ptr.PointerByReference, libvlc.LibvlcLibrary.libvlc_audio_set_volume_cb)} instead
     */
    @Deprecated 
    void libvlc_audio_set_volume_callback(Pointer mp, LibvlcLibrary.libvlc_audio_set_volume_cb set_volume);
    /**
     * Set callbacks and private data for decoded audio. This only works in<br>
     * combination with libvlc_audio_set_callbacks().<br>
     * Use libvlc_audio_set_format() or libvlc_audio_set_format_callbacks()<br>
     * to configure the decoded audio format.<br>
     * \param mp the media player<br>
     * \param set_volume callback to apply audio volume,<br>
     *                   or NULL to apply volume in software<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>void libvlc_audio_set_volume_callback(libvlc_media_player_t*, libvlc_audio_set_volume_cb)</code><br>
     * <i>native declaration : line 2093</i>
     */
    void libvlc_audio_set_volume_callback(PointerByReference mp, LibvlcLibrary.libvlc_audio_set_volume_cb set_volume);
    /**
     * Set decoded audio format. This only works in combination with<br>
     * libvlc_audio_set_callbacks().<br>
     * \param mp the media player<br>
     * \param setup callback to select the audio format (cannot be NULL)<br>
     * \param cleanup callback to release any allocated resources (or NULL)<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>void libvlc_audio_set_format_callbacks(libvlc_media_player_t*, libvlc_audio_setup_cb, libvlc_audio_cleanup_cb)</code><br>
     * <i>native declaration : line 2126</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_set_format_callbacks(com.sun.jna.ptr.PointerByReference, libvlc.LibvlcLibrary.libvlc_audio_setup_cb, libvlc.LibvlcLibrary.libvlc_audio_cleanup_cb)} instead
     */
    @Deprecated 
    void libvlc_audio_set_format_callbacks(Pointer mp, LibvlcLibrary.libvlc_audio_setup_cb setup, LibvlcLibrary.libvlc_audio_cleanup_cb cleanup);
    /**
     * Set decoded audio format. This only works in combination with<br>
     * libvlc_audio_set_callbacks().<br>
     * \param mp the media player<br>
     * \param setup callback to select the audio format (cannot be NULL)<br>
     * \param cleanup callback to release any allocated resources (or NULL)<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>void libvlc_audio_set_format_callbacks(libvlc_media_player_t*, libvlc_audio_setup_cb, libvlc_audio_cleanup_cb)</code><br>
     * <i>native declaration : line 2126</i>
     */
    void libvlc_audio_set_format_callbacks(PointerByReference mp, LibvlcLibrary.libvlc_audio_setup_cb setup, LibvlcLibrary.libvlc_audio_cleanup_cb cleanup);
    /**
     * Set decoded audio format.<br>
     * This only works in combination with libvlc_audio_set_callbacks(),<br>
     * and is mutually exclusive with libvlc_audio_set_format_callbacks().<br>
     * \param mp the media player<br>
     * \param format a four-characters string identifying the sample format<br>
     *               (e.g. "S16N" or "FL32")<br>
     * \param rate sample rate (expressed in Hz)<br>
     * \param channels channels count<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>void libvlc_audio_set_format(libvlc_media_player_t*, const char*, unsigned, unsigned)</code><br>
     * <i>native declaration : line 2143</i><br>
     * @deprecated use the safer methods {@link #libvlc_audio_set_format(com.sun.jna.ptr.PointerByReference, java.lang.String, int, int)} and {@link #libvlc_audio_set_format(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int, int)} instead
     */
    @Deprecated 
    void libvlc_audio_set_format(Pointer mp, Pointer format, int rate, int channels);
    /**
     * Set decoded audio format.<br>
     * This only works in combination with libvlc_audio_set_callbacks(),<br>
     * and is mutually exclusive with libvlc_audio_set_format_callbacks().<br>
     * \param mp the media player<br>
     * \param format a four-characters string identifying the sample format<br>
     *               (e.g. "S16N" or "FL32")<br>
     * \param rate sample rate (expressed in Hz)<br>
     * \param channels channels count<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>void libvlc_audio_set_format(libvlc_media_player_t*, const char*, unsigned, unsigned)</code><br>
     * <i>native declaration : line 2143</i>
     */
    void libvlc_audio_set_format(PointerByReference mp, String format, int rate, int channels);
    /**
     * Set decoded audio format.<br>
     * This only works in combination with libvlc_audio_set_callbacks(),<br>
     * and is mutually exclusive with libvlc_audio_set_format_callbacks().<br>
     * \param mp the media player<br>
     * \param format a four-characters string identifying the sample format<br>
     *               (e.g. "S16N" or "FL32")<br>
     * \param rate sample rate (expressed in Hz)<br>
     * \param channels channels count<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>void libvlc_audio_set_format(libvlc_media_player_t*, const char*, unsigned, unsigned)</code><br>
     * <i>native declaration : line 2143</i>
     */
    void libvlc_audio_set_format(PointerByReference mp, Pointer format, int rate, int channels);
    /**
     * Get the current movie length (in ms).<br>
     * \param p_mi the Media Player<br>
     * \return the movie length (in ms), or -1 if there is no media.<br>
     * Original signature : <code>libvlc_time_t libvlc_media_player_get_length(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2154</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_length(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    long libvlc_media_player_get_length(Pointer p_mi);
    /**
     * Get the current movie length (in ms).<br>
     * \param p_mi the Media Player<br>
     * \return the movie length (in ms), or -1 if there is no media.<br>
     * Original signature : <code>libvlc_time_t libvlc_media_player_get_length(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2154</i>
     */
    long libvlc_media_player_get_length(PointerByReference p_mi);
    /**
     * Get the current movie time (in ms).<br>
     * \param p_mi the Media Player<br>
     * \return the movie time (in ms), or -1 if there is no media.<br>
     * Original signature : <code>libvlc_time_t libvlc_media_player_get_time(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2162</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_time(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    long libvlc_media_player_get_time(Pointer p_mi);
    /**
     * Get the current movie time (in ms).<br>
     * \param p_mi the Media Player<br>
     * \return the movie time (in ms), or -1 if there is no media.<br>
     * Original signature : <code>libvlc_time_t libvlc_media_player_get_time(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2162</i>
     */
    long libvlc_media_player_get_time(PointerByReference p_mi);
    /**
     * Set the movie time (in ms). This has no effect if no media is being played.<br>
     * Not all formats and protocols support this.<br>
     * \param p_mi the Media Player<br>
     * \param i_time the movie time (in ms).<br>
     * Original signature : <code>void libvlc_media_player_set_time(libvlc_media_player_t*, libvlc_time_t)</code><br>
     * <i>native declaration : line 2171</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_set_time(com.sun.jna.ptr.PointerByReference, long)} instead
     */
    @Deprecated 
    void libvlc_media_player_set_time(Pointer p_mi, long i_time);
    /**
     * Set the movie time (in ms). This has no effect if no media is being played.<br>
     * Not all formats and protocols support this.<br>
     * \param p_mi the Media Player<br>
     * \param i_time the movie time (in ms).<br>
     * Original signature : <code>void libvlc_media_player_set_time(libvlc_media_player_t*, libvlc_time_t)</code><br>
     * <i>native declaration : line 2171</i>
     */
    void libvlc_media_player_set_time(PointerByReference p_mi, long i_time);
    /**
     * Get movie position as percentage between 0.0 and 1.0.<br>
     * \param p_mi the Media Player<br>
     * \return movie position, or -1. in case of error<br>
     * Original signature : <code>float libvlc_media_player_get_position(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2179</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_position(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    float libvlc_media_player_get_position(Pointer p_mi);
    /**
     * Get movie position as percentage between 0.0 and 1.0.<br>
     * \param p_mi the Media Player<br>
     * \return movie position, or -1. in case of error<br>
     * Original signature : <code>float libvlc_media_player_get_position(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2179</i>
     */
    float libvlc_media_player_get_position(PointerByReference p_mi);
    /**
     * Set movie position as percentage between 0.0 and 1.0. <br>
     * This has no effect if playback is not enabled.<br>
     * This might not work depending on the underlying input format and protocol.<br>
     * \param p_mi the Media Player<br>
     * \param f_pos the position<br>
     * Original signature : <code>void libvlc_media_player_set_position(libvlc_media_player_t*, float)</code><br>
     * <i>native declaration : line 2189</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_set_position(com.sun.jna.ptr.PointerByReference, float)} instead
     */
    @Deprecated 
    void libvlc_media_player_set_position(Pointer p_mi, float f_pos);
    /**
     * Set movie position as percentage between 0.0 and 1.0. <br>
     * This has no effect if playback is not enabled.<br>
     * This might not work depending on the underlying input format and protocol.<br>
     * \param p_mi the Media Player<br>
     * \param f_pos the position<br>
     * Original signature : <code>void libvlc_media_player_set_position(libvlc_media_player_t*, float)</code><br>
     * <i>native declaration : line 2189</i>
     */
    void libvlc_media_player_set_position(PointerByReference p_mi, float f_pos);
    /**
     * Set movie chapter (if applicable).<br>
     * \param p_mi the Media Player<br>
     * \param i_chapter chapter number to play<br>
     * Original signature : <code>void libvlc_media_player_set_chapter(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2197</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_set_chapter(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    void libvlc_media_player_set_chapter(Pointer p_mi, int i_chapter);
    /**
     * Set movie chapter (if applicable).<br>
     * \param p_mi the Media Player<br>
     * \param i_chapter chapter number to play<br>
     * Original signature : <code>void libvlc_media_player_set_chapter(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2197</i>
     */
    void libvlc_media_player_set_chapter(PointerByReference p_mi, int i_chapter);
    /**
     * Get movie chapter.<br>
     * \param p_mi the Media Player<br>
     * \return chapter number currently playing, or -1 if there is no media.<br>
     * Original signature : <code>int libvlc_media_player_get_chapter(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2205</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_chapter(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_get_chapter(Pointer p_mi);
    /**
     * Get movie chapter.<br>
     * \param p_mi the Media Player<br>
     * \return chapter number currently playing, or -1 if there is no media.<br>
     * Original signature : <code>int libvlc_media_player_get_chapter(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2205</i>
     */
    int libvlc_media_player_get_chapter(PointerByReference p_mi);
    /**
     * Get movie chapter count<br>
     * \param p_mi the Media Player<br>
     * \return number of chapters in movie, or -1.<br>
     * Original signature : <code>int libvlc_media_player_get_chapter_count(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2213</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_chapter_count(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_get_chapter_count(Pointer p_mi);
    /**
     * Get movie chapter count<br>
     * \param p_mi the Media Player<br>
     * \return number of chapters in movie, or -1.<br>
     * Original signature : <code>int libvlc_media_player_get_chapter_count(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2213</i>
     */
    int libvlc_media_player_get_chapter_count(PointerByReference p_mi);
    /**
     * Is the player able to play<br>
     * \param p_mi the Media Player<br>
     * \return boolean<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_player_will_play(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2223</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_will_play(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_will_play(Pointer p_mi);
    /**
     * Is the player able to play<br>
     * \param p_mi the Media Player<br>
     * \return boolean<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_player_will_play(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2223</i>
     */
    int libvlc_media_player_will_play(PointerByReference p_mi);
    /**
     * Get title chapter count<br>
     * \param p_mi the Media Player<br>
     * \param i_title title<br>
     * \return number of chapters in title, or -1<br>
     * Original signature : <code>int libvlc_media_player_get_chapter_count_for_title(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2232</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_chapter_count_for_title(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    int libvlc_media_player_get_chapter_count_for_title(Pointer p_mi, int i_title);
    /**
     * Get title chapter count<br>
     * \param p_mi the Media Player<br>
     * \param i_title title<br>
     * \return number of chapters in title, or -1<br>
     * Original signature : <code>int libvlc_media_player_get_chapter_count_for_title(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2232</i>
     */
    int libvlc_media_player_get_chapter_count_for_title(PointerByReference p_mi, int i_title);
    /**
     * Set movie title<br>
     * \param p_mi the Media Player<br>
     * \param i_title title number to play<br>
     * Original signature : <code>void libvlc_media_player_set_title(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2241</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_set_title(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    void libvlc_media_player_set_title(Pointer p_mi, int i_title);
    /**
     * Set movie title<br>
     * \param p_mi the Media Player<br>
     * \param i_title title number to play<br>
     * Original signature : <code>void libvlc_media_player_set_title(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2241</i>
     */
    void libvlc_media_player_set_title(PointerByReference p_mi, int i_title);
    /**
     * Get movie title<br>
     * \param p_mi the Media Player<br>
     * \return title number currently playing, or -1<br>
     * Original signature : <code>int libvlc_media_player_get_title(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2249</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_title(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_get_title(Pointer p_mi);
    /**
     * Get movie title<br>
     * \param p_mi the Media Player<br>
     * \return title number currently playing, or -1<br>
     * Original signature : <code>int libvlc_media_player_get_title(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2249</i>
     */
    int libvlc_media_player_get_title(PointerByReference p_mi);
    /**
     * Get movie title count<br>
     * \param p_mi the Media Player<br>
     * \return title number count, or -1<br>
     * Original signature : <code>int libvlc_media_player_get_title_count(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2257</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_title_count(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_get_title_count(Pointer p_mi);
    /**
     * Get movie title count<br>
     * \param p_mi the Media Player<br>
     * \return title number count, or -1<br>
     * Original signature : <code>int libvlc_media_player_get_title_count(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2257</i>
     */
    int libvlc_media_player_get_title_count(PointerByReference p_mi);
    /**
     * Set previous chapter (if applicable)<br>
     * \param p_mi the Media Player<br>
     * Original signature : <code>void libvlc_media_player_previous_chapter(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2264</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_previous_chapter(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_player_previous_chapter(Pointer p_mi);
    /**
     * Set previous chapter (if applicable)<br>
     * \param p_mi the Media Player<br>
     * Original signature : <code>void libvlc_media_player_previous_chapter(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2264</i>
     */
    void libvlc_media_player_previous_chapter(PointerByReference p_mi);
    /**
     * Set next chapter (if applicable)<br>
     * \param p_mi the Media Player<br>
     * Original signature : <code>void libvlc_media_player_next_chapter(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2271</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_next_chapter(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_player_next_chapter(Pointer p_mi);
    /**
     * Set next chapter (if applicable)<br>
     * \param p_mi the Media Player<br>
     * Original signature : <code>void libvlc_media_player_next_chapter(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2271</i>
     */
    void libvlc_media_player_next_chapter(PointerByReference p_mi);
    /**
     * Get the requested movie play rate.<br>
     * @warning Depending on the underlying media, the requested rate may be<br>
     * different from the real playback rate.<br>
     * \param p_mi the Media Player<br>
     * \return movie play rate<br>
     * Original signature : <code>float libvlc_media_player_get_rate(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2281</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_rate(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    float libvlc_media_player_get_rate(Pointer p_mi);
    /**
     * Get the requested movie play rate.<br>
     * @warning Depending on the underlying media, the requested rate may be<br>
     * different from the real playback rate.<br>
     * \param p_mi the Media Player<br>
     * \return movie play rate<br>
     * Original signature : <code>float libvlc_media_player_get_rate(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2281</i>
     */
    float libvlc_media_player_get_rate(PointerByReference p_mi);
    /**
     * Set movie play rate<br>
     * \param p_mi the Media Player<br>
     * \param rate movie play rate to set<br>
     * \return -1 if an error was detected, 0 otherwise (but even then, it might<br>
     * not actually work depending on the underlying media protocol)<br>
     * Original signature : <code>int libvlc_media_player_set_rate(libvlc_media_player_t*, float)</code><br>
     * <i>native declaration : line 2291</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_set_rate(com.sun.jna.ptr.PointerByReference, float)} instead
     */
    @Deprecated 
    int libvlc_media_player_set_rate(Pointer p_mi, float rate);
    /**
     * Set movie play rate<br>
     * \param p_mi the Media Player<br>
     * \param rate movie play rate to set<br>
     * \return -1 if an error was detected, 0 otherwise (but even then, it might<br>
     * not actually work depending on the underlying media protocol)<br>
     * Original signature : <code>int libvlc_media_player_set_rate(libvlc_media_player_t*, float)</code><br>
     * <i>native declaration : line 2291</i>
     */
    int libvlc_media_player_set_rate(PointerByReference p_mi, float rate);
    /**
     * Get current movie state<br>
     * \param p_mi the Media Player<br>
     * \return the current state of the media player (playing, paused, ...) \see libvlc_state_t<br>
     * Original signature : <code>libvlc_state_t libvlc_media_player_get_state(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2299</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_state(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_get_state(Pointer p_mi);
    /**
     * Get current movie state<br>
     * \param p_mi the Media Player<br>
     * \return the current state of the media player (playing, paused, ...) \see libvlc_state_t<br>
     * Original signature : <code>libvlc_state_t libvlc_media_player_get_state(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2299</i>
     */
    int libvlc_media_player_get_state(PointerByReference p_mi);
    /**
     * Get movie fps rate<br>
     * \param p_mi the Media Player<br>
     * \return frames per second (fps) for this playing movie, or 0 if unspecified<br>
     * Original signature : <code>float libvlc_media_player_get_fps(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2307</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_get_fps(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    float libvlc_media_player_get_fps(Pointer p_mi);
    /**
     * Get movie fps rate<br>
     * \param p_mi the Media Player<br>
     * \return frames per second (fps) for this playing movie, or 0 if unspecified<br>
     * Original signature : <code>float libvlc_media_player_get_fps(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2307</i>
     */
    float libvlc_media_player_get_fps(PointerByReference p_mi);
    /**
     * How many video outputs does this media player have?<br>
     * \param p_mi the media player<br>
     * \return the number of video outputs<br>
     * Original signature : <code>int libvlc_media_player_has_vout(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2317</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_has_vout(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_has_vout(Pointer p_mi);
    /**
     * How many video outputs does this media player have?<br>
     * \param p_mi the media player<br>
     * \return the number of video outputs<br>
     * Original signature : <code>int libvlc_media_player_has_vout(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2317</i>
     */
    int libvlc_media_player_has_vout(PointerByReference p_mi);
    /**
     * Is this media player seekable?<br>
     * \param p_mi the media player<br>
     * \return true if the media player can seek<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_player_is_seekable(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2327</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_is_seekable(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_is_seekable(Pointer p_mi);
    /**
     * Is this media player seekable?<br>
     * \param p_mi the media player<br>
     * \return true if the media player can seek<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_player_is_seekable(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2327</i>
     */
    int libvlc_media_player_is_seekable(PointerByReference p_mi);
    /**
     * Can this media player be paused?<br>
     * \param p_mi the media player<br>
     * \return true if the media player can pause<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_player_can_pause(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2337</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_can_pause(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_can_pause(Pointer p_mi);
    /**
     * Can this media player be paused?<br>
     * \param p_mi the media player<br>
     * \return true if the media player can pause<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_player_can_pause(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2337</i>
     */
    int libvlc_media_player_can_pause(PointerByReference p_mi);
    /**
     * Check if the current program is scrambled<br>
     * \param p_mi the media player<br>
     * \return true if the current program is scrambled<br>
     * \libvlc_return_bool<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>int libvlc_media_player_program_scrambled(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2348</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_program_scrambled(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_program_scrambled(Pointer p_mi);
    /**
     * Check if the current program is scrambled<br>
     * \param p_mi the media player<br>
     * \return true if the current program is scrambled<br>
     * \libvlc_return_bool<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>int libvlc_media_player_program_scrambled(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2348</i>
     */
    int libvlc_media_player_program_scrambled(PointerByReference p_mi);
    /**
     * Display the next frame (if supported)<br>
     * \param p_mi the media player<br>
     * Original signature : <code>void libvlc_media_player_next_frame(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2355</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_next_frame(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_player_next_frame(Pointer p_mi);
    /**
     * Display the next frame (if supported)<br>
     * \param p_mi the media player<br>
     * Original signature : <code>void libvlc_media_player_next_frame(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2355</i>
     */
    void libvlc_media_player_next_frame(PointerByReference p_mi);
    /**
     * Navigate through DVD Menu<br>
     * \param p_mi the Media Player<br>
     * \param navigate the Navigation mode<br>
     * \version libVLC 2.0.0 or later<br>
     * Original signature : <code>void libvlc_media_player_navigate(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2364</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_navigate(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    void libvlc_media_player_navigate(Pointer p_mi, int navigate);
    /**
     * Navigate through DVD Menu<br>
     * \param p_mi the Media Player<br>
     * \param navigate the Navigation mode<br>
     * \version libVLC 2.0.0 or later<br>
     * Original signature : <code>void libvlc_media_player_navigate(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2364</i>
     */
    void libvlc_media_player_navigate(PointerByReference p_mi, int navigate);
    /**
     * Set if, and how, the video title will be shown when media is played.<br>
     * \param p_mi the media player<br>
     * \param position position at which to display the title, or libvlc_position_disable to prevent the title from being displayed<br>
     * \param timeout title display timeout in milliseconds (ignored if libvlc_position_disable)<br>
     * \version libVLC 2.1.0 or later<br>
     * Original signature : <code>void libvlc_media_player_set_video_title_display(libvlc_media_player_t*, libvlc_position_t, unsigned int)</code><br>
     * <i>native declaration : line 2375</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_set_video_title_display(com.sun.jna.ptr.PointerByReference, int, int)} instead
     */
    @Deprecated 
    void libvlc_media_player_set_video_title_display(Pointer p_mi, int position, int timeout);
    /**
     * Set if, and how, the video title will be shown when media is played.<br>
     * \param p_mi the media player<br>
     * \param position position at which to display the title, or libvlc_position_disable to prevent the title from being displayed<br>
     * \param timeout title display timeout in milliseconds (ignored if libvlc_position_disable)<br>
     * \version libVLC 2.1.0 or later<br>
     * Original signature : <code>void libvlc_media_player_set_video_title_display(libvlc_media_player_t*, libvlc_position_t, unsigned int)</code><br>
     * <i>native declaration : line 2375</i>
     */
    void libvlc_media_player_set_video_title_display(PointerByReference p_mi, int position, int timeout);
    /**
     * Release (free) libvlc_track_description_t<br>
     * \param p_track_description the structure to release<br>
     * Original signature : <code>void libvlc_track_description_list_release(libvlc_track_description_t*)</code><br>
     * <i>native declaration : line 2382</i>
     */
    void libvlc_track_description_list_release(libvlc_track_description_t p_track_description);
    /**
     * \deprecated Use libvlc_track_description_list_release instead<br>
     * Original signature : <code>void libvlc_track_description_release(libvlc_track_description_t*)</code><br>
     * <i>native declaration : line 2388</i>
     */
    void libvlc_track_description_release(libvlc_track_description_t p_track_description);
    /**
     * Toggle fullscreen status on non-embedded video outputs.<br>
     * @warning The same limitations applies to this function<br>
     * as to libvlc_set_fullscreen().<br>
     * \param p_mi the media player<br>
     * Original signature : <code>void libvlc_toggle_fullscreen(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2402</i><br>
     * @deprecated use the safer method {@link #libvlc_toggle_fullscreen(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_toggle_fullscreen(Pointer p_mi);
    /**
     * Toggle fullscreen status on non-embedded video outputs.<br>
     * @warning The same limitations applies to this function<br>
     * as to libvlc_set_fullscreen().<br>
     * \param p_mi the media player<br>
     * Original signature : <code>void libvlc_toggle_fullscreen(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2402</i>
     */
    void libvlc_toggle_fullscreen(PointerByReference p_mi);
    /**
     * Enable or disable fullscreen.<br>
     * @warning With most window managers, only a top-level windows can be in<br>
     * full-screen mode. Hence, this function will not operate properly if<br>
     * libvlc_media_player_set_xwindow() was used to embed the video in a<br>
     * non-top-level window. In that case, the embedding window must be reparented<br>
     * to the root window <b>before</b> fullscreen mode is enabled. You will want<br>
     * to reparent it back to its normal parent when disabling fullscreen.<br>
     * \param p_mi the media player<br>
     * \param b_fullscreen boolean for fullscreen status<br>
     * Original signature : <code>void libvlc_set_fullscreen(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2417</i><br>
     * @deprecated use the safer method {@link #libvlc_set_fullscreen(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    void libvlc_set_fullscreen(Pointer p_mi, int b_fullscreen);
    /**
     * Enable or disable fullscreen.<br>
     * @warning With most window managers, only a top-level windows can be in<br>
     * full-screen mode. Hence, this function will not operate properly if<br>
     * libvlc_media_player_set_xwindow() was used to embed the video in a<br>
     * non-top-level window. In that case, the embedding window must be reparented<br>
     * to the root window <b>before</b> fullscreen mode is enabled. You will want<br>
     * to reparent it back to its normal parent when disabling fullscreen.<br>
     * \param p_mi the media player<br>
     * \param b_fullscreen boolean for fullscreen status<br>
     * Original signature : <code>void libvlc_set_fullscreen(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2417</i>
     */
    void libvlc_set_fullscreen(PointerByReference p_mi, int b_fullscreen);
    /**
     * Get current fullscreen status.<br>
     * \param p_mi the media player<br>
     * \return the fullscreen status (boolean)<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_get_fullscreen(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2427</i><br>
     * @deprecated use the safer method {@link #libvlc_get_fullscreen(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_get_fullscreen(Pointer p_mi);
    /**
     * Get current fullscreen status.<br>
     * \param p_mi the media player<br>
     * \return the fullscreen status (boolean)<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_get_fullscreen(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2427</i>
     */
    int libvlc_get_fullscreen(PointerByReference p_mi);
    /**
     * Enable or disable key press events handling, according to the LibVLC hotkeys<br>
     * configuration. By default and for historical reasons, keyboard events are<br>
     * handled by the LibVLC video widget.<br>
     * \note On X11, there can be only one subscriber for key press and mouse<br>
     * click events per window. If your application has subscribed to those events<br>
     * for the X window ID of the video widget, then LibVLC will not be able to<br>
     * handle key presses and mouse clicks in any case.<br>
     * \warning This function is only implemented for X11 and Win32 at the moment.<br>
     * \param p_mi the media player<br>
     * \param on true to handle key press events, false to ignore them.<br>
     * Original signature : <code>void libvlc_video_set_key_input(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2445</i><br>
     * @deprecated use the safer method {@link #libvlc_video_set_key_input(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    void libvlc_video_set_key_input(Pointer p_mi, int on);
    /**
     * Enable or disable key press events handling, according to the LibVLC hotkeys<br>
     * configuration. By default and for historical reasons, keyboard events are<br>
     * handled by the LibVLC video widget.<br>
     * \note On X11, there can be only one subscriber for key press and mouse<br>
     * click events per window. If your application has subscribed to those events<br>
     * for the X window ID of the video widget, then LibVLC will not be able to<br>
     * handle key presses and mouse clicks in any case.<br>
     * \warning This function is only implemented for X11 and Win32 at the moment.<br>
     * \param p_mi the media player<br>
     * \param on true to handle key press events, false to ignore them.<br>
     * Original signature : <code>void libvlc_video_set_key_input(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2445</i>
     */
    void libvlc_video_set_key_input(PointerByReference p_mi, int on);
    /**
     * Enable or disable mouse click events handling. By default, those events are<br>
     * handled. This is needed for DVD menus to work, as well as a few video<br>
     * filters such as "puzzle".<br>
     * \see libvlc_video_set_key_input().<br>
     * \warning This function is only implemented for X11 and Win32 at the moment.<br>
     * \param p_mi the media player<br>
     * \param on true to handle mouse click events, false to ignore them.<br>
     * Original signature : <code>void libvlc_video_set_mouse_input(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2460</i><br>
     * @deprecated use the safer method {@link #libvlc_video_set_mouse_input(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    void libvlc_video_set_mouse_input(Pointer p_mi, int on);
    /**
     * Enable or disable mouse click events handling. By default, those events are<br>
     * handled. This is needed for DVD menus to work, as well as a few video<br>
     * filters such as "puzzle".<br>
     * \see libvlc_video_set_key_input().<br>
     * \warning This function is only implemented for X11 and Win32 at the moment.<br>
     * \param p_mi the media player<br>
     * \param on true to handle mouse click events, false to ignore them.<br>
     * Original signature : <code>void libvlc_video_set_mouse_input(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2460</i>
     */
    void libvlc_video_set_mouse_input(PointerByReference p_mi, int on);
    /**
     * Get the pixel dimensions of a video.<br>
     * \param p_mi media player<br>
     * \param num number of the video (starting from, and most commonly 0)<br>
     * \param px pointer to get the pixel width [OUT]<br>
     * \param py pointer to get the pixel height [OUT]<br>
     * \return 0 on success, -1 if the specified video does not exist<br>
     * Original signature : <code>int libvlc_video_get_size(libvlc_media_player_t*, unsigned, unsigned*, unsigned*)</code><br>
     * <i>native declaration : line 2472</i><br>
     * @deprecated use the safer methods {@link #libvlc_video_get_size(com.sun.jna.ptr.PointerByReference, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #libvlc_video_get_size(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated 
    int libvlc_video_get_size(Pointer p_mi, int num, IntByReference px, IntByReference py);
    /**
     * Get the pixel dimensions of a video.<br>
     * \param p_mi media player<br>
     * \param num number of the video (starting from, and most commonly 0)<br>
     * \param px pointer to get the pixel width [OUT]<br>
     * \param py pointer to get the pixel height [OUT]<br>
     * \return 0 on success, -1 if the specified video does not exist<br>
     * Original signature : <code>int libvlc_video_get_size(libvlc_media_player_t*, unsigned, unsigned*, unsigned*)</code><br>
     * <i>native declaration : line 2472</i>
     */
    int libvlc_video_get_size(PointerByReference p_mi, int num, IntBuffer px, IntBuffer py);
    /**
     * Get the pixel dimensions of a video.<br>
     * \param p_mi media player<br>
     * \param num number of the video (starting from, and most commonly 0)<br>
     * \param px pointer to get the pixel width [OUT]<br>
     * \param py pointer to get the pixel height [OUT]<br>
     * \return 0 on success, -1 if the specified video does not exist<br>
     * Original signature : <code>int libvlc_video_get_size(libvlc_media_player_t*, unsigned, unsigned*, unsigned*)</code><br>
     * <i>native declaration : line 2472</i>
     */
    int libvlc_video_get_size(PointerByReference p_mi, int num, IntByReference px, IntByReference py);
    /**
     * Get current video height.<br>
     * \deprecated Use libvlc_video_get_size() instead.<br>
     * \param p_mi the media player<br>
     * \return the video pixel height or 0 if not applicable<br>
     * Original signature : <code>int libvlc_video_get_height(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2483</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_height(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_video_get_height(Pointer p_mi);
    /**
     * Get current video height.<br>
     * \deprecated Use libvlc_video_get_size() instead.<br>
     * \param p_mi the media player<br>
     * \return the video pixel height or 0 if not applicable<br>
     * Original signature : <code>int libvlc_video_get_height(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2483</i>
     */
    int libvlc_video_get_height(PointerByReference p_mi);
    /**
     * Get current video width.<br>
     * \deprecated Use libvlc_video_get_size() instead.<br>
     * \param p_mi the media player<br>
     * \return the video pixel width or 0 if not applicable<br>
     * Original signature : <code>int libvlc_video_get_width(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2493</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_width(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_video_get_width(Pointer p_mi);
    /**
     * Get current video width.<br>
     * \deprecated Use libvlc_video_get_size() instead.<br>
     * \param p_mi the media player<br>
     * \return the video pixel width or 0 if not applicable<br>
     * Original signature : <code>int libvlc_video_get_width(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2493</i>
     */
    int libvlc_video_get_width(PointerByReference p_mi);
    /**
     * Get the mouse pointer coordinates over a video.<br>
     * Coordinates are expressed in terms of the decoded video resolution,<br>
     * <b>not</b> in terms of pixels on the screen/viewport (to get the latter,<br>
     * you can query your windowing system directly).<br>
     * Either of the coordinates may be negative or larger than the corresponding<br>
     * dimension of the video, if the cursor is outside the rendering area.<br>
     * @warning The coordinates may be out-of-date if the pointer is not located<br>
     * on the video rendering area. LibVLC does not track the pointer if it is<br>
     * outside of the video widget.<br>
     * @note LibVLC does not support multiple pointers (it does of course support<br>
     * multiple input devices sharing the same pointer) at the moment.<br>
     * \param p_mi media player<br>
     * \param num number of the video (starting from, and most commonly 0)<br>
     * \param px pointer to get the abscissa [OUT]<br>
     * \param py pointer to get the ordinate [OUT]<br>
     * \return 0 on success, -1 if the specified video does not exist<br>
     * Original signature : <code>int libvlc_video_get_cursor(libvlc_media_player_t*, unsigned, int*, int*)</code><br>
     * <i>native declaration : line 2518</i><br>
     * @deprecated use the safer methods {@link #libvlc_video_get_cursor(com.sun.jna.ptr.PointerByReference, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #libvlc_video_get_cursor(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated 
    int libvlc_video_get_cursor(Pointer p_mi, int num, IntByReference px, IntByReference py);
    /**
     * Get the mouse pointer coordinates over a video.<br>
     * Coordinates are expressed in terms of the decoded video resolution,<br>
     * <b>not</b> in terms of pixels on the screen/viewport (to get the latter,<br>
     * you can query your windowing system directly).<br>
     * Either of the coordinates may be negative or larger than the corresponding<br>
     * dimension of the video, if the cursor is outside the rendering area.<br>
     * @warning The coordinates may be out-of-date if the pointer is not located<br>
     * on the video rendering area. LibVLC does not track the pointer if it is<br>
     * outside of the video widget.<br>
     * @note LibVLC does not support multiple pointers (it does of course support<br>
     * multiple input devices sharing the same pointer) at the moment.<br>
     * \param p_mi media player<br>
     * \param num number of the video (starting from, and most commonly 0)<br>
     * \param px pointer to get the abscissa [OUT]<br>
     * \param py pointer to get the ordinate [OUT]<br>
     * \return 0 on success, -1 if the specified video does not exist<br>
     * Original signature : <code>int libvlc_video_get_cursor(libvlc_media_player_t*, unsigned, int*, int*)</code><br>
     * <i>native declaration : line 2518</i>
     */
    int libvlc_video_get_cursor(PointerByReference p_mi, int num, IntBuffer px, IntBuffer py);
    /**
     * Get the mouse pointer coordinates over a video.<br>
     * Coordinates are expressed in terms of the decoded video resolution,<br>
     * <b>not</b> in terms of pixels on the screen/viewport (to get the latter,<br>
     * you can query your windowing system directly).<br>
     * Either of the coordinates may be negative or larger than the corresponding<br>
     * dimension of the video, if the cursor is outside the rendering area.<br>
     * @warning The coordinates may be out-of-date if the pointer is not located<br>
     * on the video rendering area. LibVLC does not track the pointer if it is<br>
     * outside of the video widget.<br>
     * @note LibVLC does not support multiple pointers (it does of course support<br>
     * multiple input devices sharing the same pointer) at the moment.<br>
     * \param p_mi media player<br>
     * \param num number of the video (starting from, and most commonly 0)<br>
     * \param px pointer to get the abscissa [OUT]<br>
     * \param py pointer to get the ordinate [OUT]<br>
     * \return 0 on success, -1 if the specified video does not exist<br>
     * Original signature : <code>int libvlc_video_get_cursor(libvlc_media_player_t*, unsigned, int*, int*)</code><br>
     * <i>native declaration : line 2518</i>
     */
    int libvlc_video_get_cursor(PointerByReference p_mi, int num, IntByReference px, IntByReference py);
    /**
     * Get the current video scaling factor.<br>
     * See also libvlc_video_set_scale().<br>
     * \param p_mi the media player<br>
     * \return the currently configured zoom factor, or 0. if the video is set<br>
     * to fit to the output window/drawable automatically.<br>
     * Original signature : <code>float libvlc_video_get_scale(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2529</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_scale(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    float libvlc_video_get_scale(Pointer p_mi);
    /**
     * Get the current video scaling factor.<br>
     * See also libvlc_video_set_scale().<br>
     * \param p_mi the media player<br>
     * \return the currently configured zoom factor, or 0. if the video is set<br>
     * to fit to the output window/drawable automatically.<br>
     * Original signature : <code>float libvlc_video_get_scale(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2529</i>
     */
    float libvlc_video_get_scale(PointerByReference p_mi);
    /**
     * Set the video scaling factor. That is the ratio of the number of pixels on<br>
     * screen to the number of pixels in the original decoded video in each<br>
     * dimension. Zero is a special value; it will adjust the video to the output<br>
     * window/drawable (in windowed mode) or the entire screen.<br>
     * Note that not all video outputs support scaling.<br>
     * \param p_mi the media player<br>
     * \param f_factor the scaling factor, or zero<br>
     * Original signature : <code>void libvlc_video_set_scale(libvlc_media_player_t*, float)</code><br>
     * <i>native declaration : line 2542</i><br>
     * @deprecated use the safer method {@link #libvlc_video_set_scale(com.sun.jna.ptr.PointerByReference, float)} instead
     */
    @Deprecated 
    void libvlc_video_set_scale(Pointer p_mi, float f_factor);
    /**
     * Set the video scaling factor. That is the ratio of the number of pixels on<br>
     * screen to the number of pixels in the original decoded video in each<br>
     * dimension. Zero is a special value; it will adjust the video to the output<br>
     * window/drawable (in windowed mode) or the entire screen.<br>
     * Note that not all video outputs support scaling.<br>
     * \param p_mi the media player<br>
     * \param f_factor the scaling factor, or zero<br>
     * Original signature : <code>void libvlc_video_set_scale(libvlc_media_player_t*, float)</code><br>
     * <i>native declaration : line 2542</i>
     */
    void libvlc_video_set_scale(PointerByReference p_mi, float f_factor);
    /**
     * Get current video aspect ratio.<br>
     * \param p_mi the media player<br>
     * \return the video aspect ratio or NULL if unspecified<br>
     * (the result must be released with free() or libvlc_free()).<br>
     * Original signature : <code>char* libvlc_video_get_aspect_ratio(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2551</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_aspect_ratio(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    Pointer libvlc_video_get_aspect_ratio(Pointer p_mi);
    /**
     * Get current video aspect ratio.<br>
     * \param p_mi the media player<br>
     * \return the video aspect ratio or NULL if unspecified<br>
     * (the result must be released with free() or libvlc_free()).<br>
     * Original signature : <code>char* libvlc_video_get_aspect_ratio(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2551</i>
     */
    Pointer libvlc_video_get_aspect_ratio(PointerByReference p_mi);
    /**
     * Set new video aspect ratio.<br>
     * \param p_mi the media player<br>
     * \param psz_aspect new video aspect-ratio or NULL to reset to default<br>
     * \note Invalid aspect ratios are ignored.<br>
     * Original signature : <code>void libvlc_video_set_aspect_ratio(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2560</i><br>
     * @deprecated use the safer methods {@link #libvlc_video_set_aspect_ratio(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_video_set_aspect_ratio(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_video_set_aspect_ratio(Pointer p_mi, Pointer psz_aspect);
    /**
     * Set new video aspect ratio.<br>
     * \param p_mi the media player<br>
     * \param psz_aspect new video aspect-ratio or NULL to reset to default<br>
     * \note Invalid aspect ratios are ignored.<br>
     * Original signature : <code>void libvlc_video_set_aspect_ratio(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2560</i>
     */
    void libvlc_video_set_aspect_ratio(PointerByReference p_mi, String psz_aspect);
    /**
     * Set new video aspect ratio.<br>
     * \param p_mi the media player<br>
     * \param psz_aspect new video aspect-ratio or NULL to reset to default<br>
     * \note Invalid aspect ratios are ignored.<br>
     * Original signature : <code>void libvlc_video_set_aspect_ratio(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2560</i>
     */
    void libvlc_video_set_aspect_ratio(PointerByReference p_mi, Pointer psz_aspect);
    /**
     * Get current video subtitle.<br>
     * \param p_mi the media player<br>
     * \return the video subtitle selected, or -1 if none<br>
     * Original signature : <code>int libvlc_video_get_spu(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2568</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_spu(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_video_get_spu(Pointer p_mi);
    /**
     * Get current video subtitle.<br>
     * \param p_mi the media player<br>
     * \return the video subtitle selected, or -1 if none<br>
     * Original signature : <code>int libvlc_video_get_spu(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2568</i>
     */
    int libvlc_video_get_spu(PointerByReference p_mi);
    /**
     * Get the number of available video subtitles.<br>
     * \param p_mi the media player<br>
     * \return the number of available video subtitles<br>
     * Original signature : <code>int libvlc_video_get_spu_count(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2576</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_spu_count(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_video_get_spu_count(Pointer p_mi);
    /**
     * Get the number of available video subtitles.<br>
     * \param p_mi the media player<br>
     * \return the number of available video subtitles<br>
     * Original signature : <code>int libvlc_video_get_spu_count(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2576</i>
     */
    int libvlc_video_get_spu_count(PointerByReference p_mi);
    /**
     * Get the description of available video subtitles.<br>
     * \param p_mi the media player<br>
     * \return list containing description of available video subtitles.<br>
     * It must be freed with libvlc_track_description_list_release()<br>
     * Original signature : <code>libvlc_track_description_t* libvlc_video_get_spu_description(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2585</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_spu_description(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    libvlc_track_description_t libvlc_video_get_spu_description(Pointer p_mi);
    /**
     * Get the description of available video subtitles.<br>
     * \param p_mi the media player<br>
     * \return list containing description of available video subtitles.<br>
     * It must be freed with libvlc_track_description_list_release()<br>
     * Original signature : <code>libvlc_track_description_t* libvlc_video_get_spu_description(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2585</i>
     */
    libvlc_track_description_t libvlc_video_get_spu_description(PointerByReference p_mi);
    /**
     * Set new video subtitle.<br>
     * \param p_mi the media player<br>
     * \param i_spu video subtitle track to select (i_id from track description)<br>
     * \return 0 on success, -1 if out of range<br>
     * Original signature : <code>int libvlc_video_set_spu(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2595</i><br>
     * @deprecated use the safer method {@link #libvlc_video_set_spu(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    int libvlc_video_set_spu(Pointer p_mi, int i_spu);
    /**
     * Set new video subtitle.<br>
     * \param p_mi the media player<br>
     * \param i_spu video subtitle track to select (i_id from track description)<br>
     * \return 0 on success, -1 if out of range<br>
     * Original signature : <code>int libvlc_video_set_spu(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2595</i>
     */
    int libvlc_video_set_spu(PointerByReference p_mi, int i_spu);
    /**
     * Set new video subtitle file.<br>
     * \param p_mi the media player<br>
     * \param psz_subtitle new video subtitle file<br>
     * \return the success status (boolean)<br>
     * Original signature : <code>int libvlc_video_set_subtitle_file(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2604</i><br>
     * @deprecated use the safer methods {@link #libvlc_video_set_subtitle_file(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_video_set_subtitle_file(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_video_set_subtitle_file(Pointer p_mi, Pointer psz_subtitle);
    /**
     * Set new video subtitle file.<br>
     * \param p_mi the media player<br>
     * \param psz_subtitle new video subtitle file<br>
     * \return the success status (boolean)<br>
     * Original signature : <code>int libvlc_video_set_subtitle_file(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2604</i>
     */
    int libvlc_video_set_subtitle_file(PointerByReference p_mi, String psz_subtitle);
    /**
     * Set new video subtitle file.<br>
     * \param p_mi the media player<br>
     * \param psz_subtitle new video subtitle file<br>
     * \return the success status (boolean)<br>
     * Original signature : <code>int libvlc_video_set_subtitle_file(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2604</i>
     */
    int libvlc_video_set_subtitle_file(PointerByReference p_mi, Pointer psz_subtitle);
    /**
     * Get the current subtitle delay. Positive values means subtitles are being<br>
     * displayed later, negative values earlier.<br>
     * \param p_mi media player<br>
     * \return time (in microseconds) the display of subtitles is being delayed<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>int64_t libvlc_video_get_spu_delay(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2614</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_spu_delay(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    long libvlc_video_get_spu_delay(Pointer p_mi);
    /**
     * Get the current subtitle delay. Positive values means subtitles are being<br>
     * displayed later, negative values earlier.<br>
     * \param p_mi media player<br>
     * \return time (in microseconds) the display of subtitles is being delayed<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>int64_t libvlc_video_get_spu_delay(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2614</i>
     */
    long libvlc_video_get_spu_delay(PointerByReference p_mi);
    /**
     * Set the subtitle delay. This affects the timing of when the subtitle will<br>
     * be displayed. Positive values result in subtitles being displayed later,<br>
     * while negative values will result in subtitles being displayed earlier.<br>
     * The subtitle delay will be reset to zero each time the media changes.<br>
     * \param p_mi media player<br>
     * \param i_delay time (in microseconds) the display of subtitles should be delayed<br>
     * \return 0 on success, -1 on error<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>int libvlc_video_set_spu_delay(libvlc_media_player_t*, int64_t)</code><br>
     * <i>native declaration : line 2628</i><br>
     * @deprecated use the safer method {@link #libvlc_video_set_spu_delay(com.sun.jna.ptr.PointerByReference, long)} instead
     */
    @Deprecated 
    int libvlc_video_set_spu_delay(Pointer p_mi, long i_delay);
    /**
     * Set the subtitle delay. This affects the timing of when the subtitle will<br>
     * be displayed. Positive values result in subtitles being displayed later,<br>
     * while negative values will result in subtitles being displayed earlier.<br>
     * The subtitle delay will be reset to zero each time the media changes.<br>
     * \param p_mi media player<br>
     * \param i_delay time (in microseconds) the display of subtitles should be delayed<br>
     * \return 0 on success, -1 on error<br>
     * \version LibVLC 2.0.0 or later<br>
     * Original signature : <code>int libvlc_video_set_spu_delay(libvlc_media_player_t*, int64_t)</code><br>
     * <i>native declaration : line 2628</i>
     */
    int libvlc_video_set_spu_delay(PointerByReference p_mi, long i_delay);
    /**
     * Get the description of available titles.<br>
     * \param p_mi the media player<br>
     * \return list containing description of available titles.<br>
     * It must be freed with libvlc_track_description_list_release()<br>
     * Original signature : <code>libvlc_track_description_t* libvlc_video_get_title_description(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2637</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_title_description(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    libvlc_track_description_t libvlc_video_get_title_description(Pointer p_mi);
    /**
     * Get the description of available titles.<br>
     * \param p_mi the media player<br>
     * \return list containing description of available titles.<br>
     * It must be freed with libvlc_track_description_list_release()<br>
     * Original signature : <code>libvlc_track_description_t* libvlc_video_get_title_description(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2637</i>
     */
    libvlc_track_description_t libvlc_video_get_title_description(PointerByReference p_mi);
    /**
     * Get the description of available chapters for specific title.<br>
     * \param p_mi the media player<br>
     * \param i_title selected title<br>
     * \return list containing description of available chapter for title i_title.<br>
     * It must be freed with libvlc_track_description_list_release()<br>
     * Original signature : <code>libvlc_track_description_t* libvlc_video_get_chapter_description(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2648</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_chapter_description(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    libvlc_track_description_t libvlc_video_get_chapter_description(Pointer p_mi, int i_title);
    /**
     * Get the description of available chapters for specific title.<br>
     * \param p_mi the media player<br>
     * \param i_title selected title<br>
     * \return list containing description of available chapter for title i_title.<br>
     * It must be freed with libvlc_track_description_list_release()<br>
     * Original signature : <code>libvlc_track_description_t* libvlc_video_get_chapter_description(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2648</i>
     */
    libvlc_track_description_t libvlc_video_get_chapter_description(PointerByReference p_mi, int i_title);
    /**
     * Get current crop filter geometry.<br>
     * \param p_mi the media player<br>
     * \return the crop filter geometry or NULL if unset<br>
     * Original signature : <code>char* libvlc_video_get_crop_geometry(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2657</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_crop_geometry(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    Pointer libvlc_video_get_crop_geometry(Pointer p_mi);
    /**
     * Get current crop filter geometry.<br>
     * \param p_mi the media player<br>
     * \return the crop filter geometry or NULL if unset<br>
     * Original signature : <code>char* libvlc_video_get_crop_geometry(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2657</i>
     */
    Pointer libvlc_video_get_crop_geometry(PointerByReference p_mi);
    /**
     * Set new crop filter geometry.<br>
     * \param p_mi the media player<br>
     * \param psz_geometry new crop filter geometry (NULL to unset)<br>
     * Original signature : <code>void libvlc_video_set_crop_geometry(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2666</i><br>
     * @deprecated use the safer methods {@link #libvlc_video_set_crop_geometry(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_video_set_crop_geometry(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_video_set_crop_geometry(Pointer p_mi, Pointer psz_geometry);
    /**
     * Set new crop filter geometry.<br>
     * \param p_mi the media player<br>
     * \param psz_geometry new crop filter geometry (NULL to unset)<br>
     * Original signature : <code>void libvlc_video_set_crop_geometry(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2666</i>
     */
    void libvlc_video_set_crop_geometry(PointerByReference p_mi, String psz_geometry);
    /**
     * Set new crop filter geometry.<br>
     * \param p_mi the media player<br>
     * \param psz_geometry new crop filter geometry (NULL to unset)<br>
     * Original signature : <code>void libvlc_video_set_crop_geometry(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2666</i>
     */
    void libvlc_video_set_crop_geometry(PointerByReference p_mi, Pointer psz_geometry);
    /**
     * Get current teletext page requested.<br>
     * \param p_mi the media player<br>
     * \return the current teletext page requested.<br>
     * Original signature : <code>int libvlc_video_get_teletext(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2674</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_teletext(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_video_get_teletext(Pointer p_mi);
    /**
     * Get current teletext page requested.<br>
     * \param p_mi the media player<br>
     * \return the current teletext page requested.<br>
     * Original signature : <code>int libvlc_video_get_teletext(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2674</i>
     */
    int libvlc_video_get_teletext(PointerByReference p_mi);
    /**
     * Set new teletext page to retrieve.<br>
     * \param p_mi the media player<br>
     * \param i_page teletex page number requested<br>
     * Original signature : <code>void libvlc_video_set_teletext(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2682</i><br>
     * @deprecated use the safer method {@link #libvlc_video_set_teletext(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    void libvlc_video_set_teletext(Pointer p_mi, int i_page);
    /**
     * Set new teletext page to retrieve.<br>
     * \param p_mi the media player<br>
     * \param i_page teletex page number requested<br>
     * Original signature : <code>void libvlc_video_set_teletext(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2682</i>
     */
    void libvlc_video_set_teletext(PointerByReference p_mi, int i_page);
    /**
     * Toggle teletext transparent status on video output.<br>
     * \param p_mi the media player<br>
     * Original signature : <code>void libvlc_toggle_teletext(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2689</i><br>
     * @deprecated use the safer method {@link #libvlc_toggle_teletext(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_toggle_teletext(Pointer p_mi);
    /**
     * Toggle teletext transparent status on video output.<br>
     * \param p_mi the media player<br>
     * Original signature : <code>void libvlc_toggle_teletext(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2689</i>
     */
    void libvlc_toggle_teletext(PointerByReference p_mi);
    /**
     * Get number of available video tracks.<br>
     * \param p_mi media player<br>
     * \return the number of available video tracks (int)<br>
     * Original signature : <code>int libvlc_video_get_track_count(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2697</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_track_count(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_video_get_track_count(Pointer p_mi);
    /**
     * Get number of available video tracks.<br>
     * \param p_mi media player<br>
     * \return the number of available video tracks (int)<br>
     * Original signature : <code>int libvlc_video_get_track_count(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2697</i>
     */
    int libvlc_video_get_track_count(PointerByReference p_mi);
    /**
     * Get the description of available video tracks.<br>
     * \param p_mi media player<br>
     * \return list with description of available video tracks, or NULL on error.<br>
     * It must be freed with libvlc_track_description_list_release()<br>
     * Original signature : <code>libvlc_track_description_t* libvlc_video_get_track_description(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2706</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_track_description(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    libvlc_track_description_t libvlc_video_get_track_description(Pointer p_mi);
    /**
     * Get the description of available video tracks.<br>
     * \param p_mi media player<br>
     * \return list with description of available video tracks, or NULL on error.<br>
     * It must be freed with libvlc_track_description_list_release()<br>
     * Original signature : <code>libvlc_track_description_t* libvlc_video_get_track_description(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2706</i>
     */
    libvlc_track_description_t libvlc_video_get_track_description(PointerByReference p_mi);
    /**
     * Get current video track.<br>
     * \param p_mi media player<br>
     * \return the video track ID (int) or -1 if no active input<br>
     * Original signature : <code>int libvlc_video_get_track(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2715</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_track(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_video_get_track(Pointer p_mi);
    /**
     * Get current video track.<br>
     * \param p_mi media player<br>
     * \return the video track ID (int) or -1 if no active input<br>
     * Original signature : <code>int libvlc_video_get_track(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 2715</i>
     */
    int libvlc_video_get_track(PointerByReference p_mi);
    /**
     * Set video track.<br>
     * \param p_mi media player<br>
     * \param i_track the track ID (i_id field from track description)<br>
     * \return 0 on success, -1 if out of range<br>
     * Original signature : <code>int libvlc_video_set_track(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2725</i><br>
     * @deprecated use the safer method {@link #libvlc_video_set_track(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    int libvlc_video_set_track(Pointer p_mi, int i_track);
    /**
     * Set video track.<br>
     * \param p_mi media player<br>
     * \param i_track the track ID (i_id field from track description)<br>
     * \return 0 on success, -1 if out of range<br>
     * Original signature : <code>int libvlc_video_set_track(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 2725</i>
     */
    int libvlc_video_set_track(PointerByReference p_mi, int i_track);
    /**
     * Take a snapshot of the current video window.<br>
     * If i_width AND i_height is 0, original size is used.<br>
     * If i_width XOR i_height is 0, original aspect-ratio is preserved.<br>
     * \param p_mi media player instance<br>
     * \param num number of video output (typically 0 for the first/only one)<br>
     * \param psz_filepath the path where to save the screenshot to<br>
     * \param i_width the snapshot's width<br>
     * \param i_height the snapshot's height<br>
     * \return 0 on success, -1 if the video was not found<br>
     * Original signature : <code>int libvlc_video_take_snapshot(libvlc_media_player_t*, unsigned, const char*, unsigned int, unsigned int)</code><br>
     * <i>native declaration : line 2741</i><br>
     * @deprecated use the safer methods {@link #libvlc_video_take_snapshot(com.sun.jna.ptr.PointerByReference, int, java.lang.String, int, int)} and {@link #libvlc_video_take_snapshot(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.Pointer, int, int)} instead
     */
    @Deprecated 
    int libvlc_video_take_snapshot(Pointer p_mi, int num, Pointer psz_filepath, int i_width, int i_height);
    /**
     * Take a snapshot of the current video window.<br>
     * If i_width AND i_height is 0, original size is used.<br>
     * If i_width XOR i_height is 0, original aspect-ratio is preserved.<br>
     * \param p_mi media player instance<br>
     * \param num number of video output (typically 0 for the first/only one)<br>
     * \param psz_filepath the path where to save the screenshot to<br>
     * \param i_width the snapshot's width<br>
     * \param i_height the snapshot's height<br>
     * \return 0 on success, -1 if the video was not found<br>
     * Original signature : <code>int libvlc_video_take_snapshot(libvlc_media_player_t*, unsigned, const char*, unsigned int, unsigned int)</code><br>
     * <i>native declaration : line 2741</i>
     */
    int libvlc_video_take_snapshot(PointerByReference p_mi, int num, String psz_filepath, int i_width, int i_height);
    /**
     * Take a snapshot of the current video window.<br>
     * If i_width AND i_height is 0, original size is used.<br>
     * If i_width XOR i_height is 0, original aspect-ratio is preserved.<br>
     * \param p_mi media player instance<br>
     * \param num number of video output (typically 0 for the first/only one)<br>
     * \param psz_filepath the path where to save the screenshot to<br>
     * \param i_width the snapshot's width<br>
     * \param i_height the snapshot's height<br>
     * \return 0 on success, -1 if the video was not found<br>
     * Original signature : <code>int libvlc_video_take_snapshot(libvlc_media_player_t*, unsigned, const char*, unsigned int, unsigned int)</code><br>
     * <i>native declaration : line 2741</i>
     */
    int libvlc_video_take_snapshot(PointerByReference p_mi, int num, Pointer psz_filepath, int i_width, int i_height);
    /**
     * Enable or disable deinterlace filter<br>
     * \param p_mi libvlc media player<br>
     * \param psz_mode type of deinterlace filter, NULL to disable<br>
     * Original signature : <code>void libvlc_video_set_deinterlace(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2751</i><br>
     * @deprecated use the safer methods {@link #libvlc_video_set_deinterlace(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_video_set_deinterlace(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_video_set_deinterlace(Pointer p_mi, Pointer psz_mode);
    /**
     * Enable or disable deinterlace filter<br>
     * \param p_mi libvlc media player<br>
     * \param psz_mode type of deinterlace filter, NULL to disable<br>
     * Original signature : <code>void libvlc_video_set_deinterlace(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2751</i>
     */
    void libvlc_video_set_deinterlace(PointerByReference p_mi, String psz_mode);
    /**
     * Enable or disable deinterlace filter<br>
     * \param p_mi libvlc media player<br>
     * \param psz_mode type of deinterlace filter, NULL to disable<br>
     * Original signature : <code>void libvlc_video_set_deinterlace(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2751</i>
     */
    void libvlc_video_set_deinterlace(PointerByReference p_mi, Pointer psz_mode);
    /**
     * Get an integer marquee option value<br>
     * \param p_mi libvlc media player<br>
     * \param option marq option to get \see libvlc_video_marquee_int_option_t<br>
     * Original signature : <code>int libvlc_video_get_marquee_int(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2760</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_marquee_int(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    int libvlc_video_get_marquee_int(Pointer p_mi, int option);
    /**
     * Get an integer marquee option value<br>
     * \param p_mi libvlc media player<br>
     * \param option marq option to get \see libvlc_video_marquee_int_option_t<br>
     * Original signature : <code>int libvlc_video_get_marquee_int(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2760</i>
     */
    int libvlc_video_get_marquee_int(PointerByReference p_mi, int option);
    /**
     * Get a string marquee option value<br>
     * \param p_mi libvlc media player<br>
     * \param option marq option to get \see libvlc_video_marquee_string_option_t<br>
     * Original signature : <code>char* libvlc_video_get_marquee_string(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2769</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_marquee_string(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    Pointer libvlc_video_get_marquee_string(Pointer p_mi, int option);
    /**
     * Get a string marquee option value<br>
     * \param p_mi libvlc media player<br>
     * \param option marq option to get \see libvlc_video_marquee_string_option_t<br>
     * Original signature : <code>char* libvlc_video_get_marquee_string(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2769</i>
     */
    Pointer libvlc_video_get_marquee_string(PointerByReference p_mi, int option);
    /**
     * Enable, disable or set an integer marquee option<br>
     * Setting libvlc_marquee_Enable has the side effect of enabling (arg !0)<br>
     * or disabling (arg 0) the marq filter.<br>
     * \param p_mi libvlc media player<br>
     * \param option marq option to set \see libvlc_video_marquee_int_option_t<br>
     * \param i_val marq option value<br>
     * Original signature : <code>void libvlc_video_set_marquee_int(libvlc_media_player_t*, unsigned, int)</code><br>
     * <i>native declaration : line 2782</i><br>
     * @deprecated use the safer method {@link #libvlc_video_set_marquee_int(com.sun.jna.ptr.PointerByReference, int, int)} instead
     */
    @Deprecated 
    void libvlc_video_set_marquee_int(Pointer p_mi, int option, int i_val);
    /**
     * Enable, disable or set an integer marquee option<br>
     * Setting libvlc_marquee_Enable has the side effect of enabling (arg !0)<br>
     * or disabling (arg 0) the marq filter.<br>
     * \param p_mi libvlc media player<br>
     * \param option marq option to set \see libvlc_video_marquee_int_option_t<br>
     * \param i_val marq option value<br>
     * Original signature : <code>void libvlc_video_set_marquee_int(libvlc_media_player_t*, unsigned, int)</code><br>
     * <i>native declaration : line 2782</i>
     */
    void libvlc_video_set_marquee_int(PointerByReference p_mi, int option, int i_val);
    /**
     * Set a marquee string option<br>
     * \param p_mi libvlc media player<br>
     * \param option marq option to set \see libvlc_video_marquee_string_option_t<br>
     * \param psz_text marq option value<br>
     * Original signature : <code>void libvlc_video_set_marquee_string(libvlc_media_player_t*, unsigned, const char*)</code><br>
     * <i>native declaration : line 2792</i><br>
     * @deprecated use the safer methods {@link #libvlc_video_set_marquee_string(com.sun.jna.ptr.PointerByReference, int, java.lang.String)} and {@link #libvlc_video_set_marquee_string(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_video_set_marquee_string(Pointer p_mi, int option, Pointer psz_text);
    /**
     * Set a marquee string option<br>
     * \param p_mi libvlc media player<br>
     * \param option marq option to set \see libvlc_video_marquee_string_option_t<br>
     * \param psz_text marq option value<br>
     * Original signature : <code>void libvlc_video_set_marquee_string(libvlc_media_player_t*, unsigned, const char*)</code><br>
     * <i>native declaration : line 2792</i>
     */
    void libvlc_video_set_marquee_string(PointerByReference p_mi, int option, String psz_text);
    /**
     * Set a marquee string option<br>
     * \param p_mi libvlc media player<br>
     * \param option marq option to set \see libvlc_video_marquee_string_option_t<br>
     * \param psz_text marq option value<br>
     * Original signature : <code>void libvlc_video_set_marquee_string(libvlc_media_player_t*, unsigned, const char*)</code><br>
     * <i>native declaration : line 2792</i>
     */
    void libvlc_video_set_marquee_string(PointerByReference p_mi, int option, Pointer psz_text);
    /**
     * Get integer logo option.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option logo option to get, values of libvlc_video_logo_option_t<br>
     * Original signature : <code>int libvlc_video_get_logo_int(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2813</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_logo_int(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    int libvlc_video_get_logo_int(Pointer p_mi, int option);
    /**
     * Get integer logo option.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option logo option to get, values of libvlc_video_logo_option_t<br>
     * Original signature : <code>int libvlc_video_get_logo_int(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2813</i>
     */
    int libvlc_video_get_logo_int(PointerByReference p_mi, int option);
    /**
     * Set logo option as integer. Options that take a different type value<br>
     * are ignored.<br>
     * Passing libvlc_logo_enable as option value has the side effect of<br>
     * starting (arg !0) or stopping (arg 0) the logo filter.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option logo option to set, values of libvlc_video_logo_option_t<br>
     * \param value logo option value<br>
     * Original signature : <code>void libvlc_video_set_logo_int(libvlc_media_player_t*, unsigned, int)</code><br>
     * <i>native declaration : line 2826</i><br>
     * @deprecated use the safer method {@link #libvlc_video_set_logo_int(com.sun.jna.ptr.PointerByReference, int, int)} instead
     */
    @Deprecated 
    void libvlc_video_set_logo_int(Pointer p_mi, int option, int value);
    /**
     * Set logo option as integer. Options that take a different type value<br>
     * are ignored.<br>
     * Passing libvlc_logo_enable as option value has the side effect of<br>
     * starting (arg !0) or stopping (arg 0) the logo filter.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option logo option to set, values of libvlc_video_logo_option_t<br>
     * \param value logo option value<br>
     * Original signature : <code>void libvlc_video_set_logo_int(libvlc_media_player_t*, unsigned, int)</code><br>
     * <i>native declaration : line 2826</i>
     */
    void libvlc_video_set_logo_int(PointerByReference p_mi, int option, int value);
    /**
     * Set logo option as string. Options that take a different type value<br>
     * are ignored.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option logo option to set, values of libvlc_video_logo_option_t<br>
     * \param psz_value logo option value<br>
     * Original signature : <code>void libvlc_video_set_logo_string(libvlc_media_player_t*, unsigned, const char*)</code><br>
     * <i>native declaration : line 2837</i><br>
     * @deprecated use the safer methods {@link #libvlc_video_set_logo_string(com.sun.jna.ptr.PointerByReference, int, java.lang.String)} and {@link #libvlc_video_set_logo_string(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_video_set_logo_string(Pointer p_mi, int option, Pointer psz_value);
    /**
     * Set logo option as string. Options that take a different type value<br>
     * are ignored.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option logo option to set, values of libvlc_video_logo_option_t<br>
     * \param psz_value logo option value<br>
     * Original signature : <code>void libvlc_video_set_logo_string(libvlc_media_player_t*, unsigned, const char*)</code><br>
     * <i>native declaration : line 2837</i>
     */
    void libvlc_video_set_logo_string(PointerByReference p_mi, int option, String psz_value);
    /**
     * Set logo option as string. Options that take a different type value<br>
     * are ignored.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option logo option to set, values of libvlc_video_logo_option_t<br>
     * \param psz_value logo option value<br>
     * Original signature : <code>void libvlc_video_set_logo_string(libvlc_media_player_t*, unsigned, const char*)</code><br>
     * <i>native declaration : line 2837</i>
     */
    void libvlc_video_set_logo_string(PointerByReference p_mi, int option, Pointer psz_value);
    /**
     * Get integer adjust option.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option adjust option to get, values of libvlc_video_adjust_option_t<br>
     * \version LibVLC 1.1.1 and later.<br>
     * Original signature : <code>int libvlc_video_get_adjust_int(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2858</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_adjust_int(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    int libvlc_video_get_adjust_int(Pointer p_mi, int option);
    /**
     * Get integer adjust option.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option adjust option to get, values of libvlc_video_adjust_option_t<br>
     * \version LibVLC 1.1.1 and later.<br>
     * Original signature : <code>int libvlc_video_get_adjust_int(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2858</i>
     */
    int libvlc_video_get_adjust_int(PointerByReference p_mi, int option);
    /**
     * Set adjust option as integer. Options that take a different type value<br>
     * are ignored.<br>
     * Passing libvlc_adjust_enable as option value has the side effect of<br>
     * starting (arg !0) or stopping (arg 0) the adjust filter.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option adust option to set, values of libvlc_video_adjust_option_t<br>
     * \param value adjust option value<br>
     * \version LibVLC 1.1.1 and later.<br>
     * Original signature : <code>void libvlc_video_set_adjust_int(libvlc_media_player_t*, unsigned, int)</code><br>
     * <i>native declaration : line 2872</i><br>
     * @deprecated use the safer method {@link #libvlc_video_set_adjust_int(com.sun.jna.ptr.PointerByReference, int, int)} instead
     */
    @Deprecated 
    void libvlc_video_set_adjust_int(Pointer p_mi, int option, int value);
    /**
     * Set adjust option as integer. Options that take a different type value<br>
     * are ignored.<br>
     * Passing libvlc_adjust_enable as option value has the side effect of<br>
     * starting (arg !0) or stopping (arg 0) the adjust filter.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option adust option to set, values of libvlc_video_adjust_option_t<br>
     * \param value adjust option value<br>
     * \version LibVLC 1.1.1 and later.<br>
     * Original signature : <code>void libvlc_video_set_adjust_int(libvlc_media_player_t*, unsigned, int)</code><br>
     * <i>native declaration : line 2872</i>
     */
    void libvlc_video_set_adjust_int(PointerByReference p_mi, int option, int value);
    /**
     * Get float adjust option.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option adjust option to get, values of libvlc_video_adjust_option_t<br>
     * \version LibVLC 1.1.1 and later.<br>
     * Original signature : <code>float libvlc_video_get_adjust_float(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2882</i><br>
     * @deprecated use the safer method {@link #libvlc_video_get_adjust_float(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    float libvlc_video_get_adjust_float(Pointer p_mi, int option);
    /**
     * Get float adjust option.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option adjust option to get, values of libvlc_video_adjust_option_t<br>
     * \version LibVLC 1.1.1 and later.<br>
     * Original signature : <code>float libvlc_video_get_adjust_float(libvlc_media_player_t*, unsigned)</code><br>
     * <i>native declaration : line 2882</i>
     */
    float libvlc_video_get_adjust_float(PointerByReference p_mi, int option);
    /**
     * Set adjust option as float. Options that take a different type value<br>
     * are ignored.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option adust option to set, values of libvlc_video_adjust_option_t<br>
     * \param value adjust option value<br>
     * \version LibVLC 1.1.1 and later.<br>
     * Original signature : <code>void libvlc_video_set_adjust_float(libvlc_media_player_t*, unsigned, float)</code><br>
     * <i>native declaration : line 2894</i><br>
     * @deprecated use the safer method {@link #libvlc_video_set_adjust_float(com.sun.jna.ptr.PointerByReference, int, float)} instead
     */
    @Deprecated 
    void libvlc_video_set_adjust_float(Pointer p_mi, int option, float value);
    /**
     * Set adjust option as float. Options that take a different type value<br>
     * are ignored.<br>
     * \param p_mi libvlc media player instance<br>
     * \param option adust option to set, values of libvlc_video_adjust_option_t<br>
     * \param value adjust option value<br>
     * \version LibVLC 1.1.1 and later.<br>
     * Original signature : <code>void libvlc_video_set_adjust_float(libvlc_media_player_t*, unsigned, float)</code><br>
     * <i>native declaration : line 2894</i>
     */
    void libvlc_video_set_adjust_float(PointerByReference p_mi, int option, float value);
    /**
     * Gets the list of available audio output modules.<br>
     * \param p_instance libvlc instance<br>
     * \return list of available audio outputs. It must be freed with<br>
     *          \see libvlc_audio_output_list_release \see libvlc_audio_output_t .<br>
     *         In case of error, NULL is returned.<br>
     * Original signature : <code>libvlc_audio_output_t* libvlc_audio_output_list_get(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 2939</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_output_list_get(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    libvlc_audio_output_t libvlc_audio_output_list_get(Pointer p_instance);
    /**
     * Gets the list of available audio output modules.<br>
     * \param p_instance libvlc instance<br>
     * \return list of available audio outputs. It must be freed with<br>
     *          \see libvlc_audio_output_list_release \see libvlc_audio_output_t .<br>
     *         In case of error, NULL is returned.<br>
     * Original signature : <code>libvlc_audio_output_t* libvlc_audio_output_list_get(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 2939</i>
     */
    libvlc_audio_output_t libvlc_audio_output_list_get(PointerByReference p_instance);
    /**
     * Frees the list of available audio output modules.<br>
     * \param p_list list with audio outputs for release<br>
     * Original signature : <code>void libvlc_audio_output_list_release(libvlc_audio_output_t*)</code><br>
     * <i>native declaration : line 2948</i>
     */
    void libvlc_audio_output_list_release(libvlc_audio_output_t p_list);
    /**
     * Selects an audio output module.<br>
     * \note Any change will take be effect only after playback is stopped and<br>
     * restarted. Audio output cannot be changed while playing.<br>
     * \param p_mi media player<br>
     * \param psz_name name of audio output,<br>
     *               use psz_name of \see libvlc_audio_output_t<br>
     * \return 0 if function succeded, -1 on error<br>
     * Original signature : <code>int libvlc_audio_output_set(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2960</i><br>
     * @deprecated use the safer methods {@link #libvlc_audio_output_set(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_audio_output_set(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_audio_output_set(Pointer p_mi, Pointer psz_name);
    /**
     * Selects an audio output module.<br>
     * \note Any change will take be effect only after playback is stopped and<br>
     * restarted. Audio output cannot be changed while playing.<br>
     * \param p_mi media player<br>
     * \param psz_name name of audio output,<br>
     *               use psz_name of \see libvlc_audio_output_t<br>
     * \return 0 if function succeded, -1 on error<br>
     * Original signature : <code>int libvlc_audio_output_set(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2960</i>
     */
    int libvlc_audio_output_set(PointerByReference p_mi, String psz_name);
    /**
     * Selects an audio output module.<br>
     * \note Any change will take be effect only after playback is stopped and<br>
     * restarted. Audio output cannot be changed while playing.<br>
     * \param p_mi media player<br>
     * \param psz_name name of audio output,<br>
     *               use psz_name of \see libvlc_audio_output_t<br>
     * \return 0 if function succeded, -1 on error<br>
     * Original signature : <code>int libvlc_audio_output_set(libvlc_media_player_t*, const char*)</code><br>
     * <i>native declaration : line 2960</i>
     */
    int libvlc_audio_output_set(PointerByReference p_mi, Pointer psz_name);
    /**
     * Backward compatibility stub. Do not use in new code.<br>
     * Use libvlc_audio_output_device_list_get() instead.<br>
     * \return always 0.<br>
     * Original signature : <code>int libvlc_audio_output_device_count(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 2969</i><br>
     * @deprecated use the safer methods {@link #libvlc_audio_output_device_count(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_audio_output_device_count(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_audio_output_device_count(Pointer libvlc_instance_tPtr1, Pointer charPtr1);
    /**
     * Backward compatibility stub. Do not use in new code.<br>
     * Use libvlc_audio_output_device_list_get() instead.<br>
     * \return always 0.<br>
     * Original signature : <code>int libvlc_audio_output_device_count(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 2969</i>
     */
    int libvlc_audio_output_device_count(PointerByReference libvlc_instance_tPtr1, String charPtr1);
    /**
     * Backward compatibility stub. Do not use in new code.<br>
     * Use libvlc_audio_output_device_list_get() instead.<br>
     * \return always 0.<br>
     * Original signature : <code>int libvlc_audio_output_device_count(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 2969</i>
     */
    int libvlc_audio_output_device_count(PointerByReference libvlc_instance_tPtr1, Pointer charPtr1);
    /**
     * Backward compatibility stub. Do not use in new code.<br>
     * Use libvlc_audio_output_device_list_get() instead.<br>
     * \return always NULL.<br>
     * Original signature : <code>char* libvlc_audio_output_device_longname(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 2977</i><br>
     * @deprecated use the safer methods {@link #libvlc_audio_output_device_longname(com.sun.jna.ptr.PointerByReference, java.lang.String, int)} and {@link #libvlc_audio_output_device_longname(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int)} instead
     */
    @Deprecated 
    Pointer libvlc_audio_output_device_longname(Pointer libvlc_instance_tPtr1, Pointer charPtr1, int int1);
    /**
     * Backward compatibility stub. Do not use in new code.<br>
     * Use libvlc_audio_output_device_list_get() instead.<br>
     * \return always NULL.<br>
     * Original signature : <code>char* libvlc_audio_output_device_longname(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 2977</i>
     */
    Pointer libvlc_audio_output_device_longname(PointerByReference libvlc_instance_tPtr1, String charPtr1, int int1);
    /**
     * Backward compatibility stub. Do not use in new code.<br>
     * Use libvlc_audio_output_device_list_get() instead.<br>
     * \return always NULL.<br>
     * Original signature : <code>char* libvlc_audio_output_device_longname(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 2977</i>
     */
    Pointer libvlc_audio_output_device_longname(PointerByReference libvlc_instance_tPtr1, Pointer charPtr1, int int1);
    /**
     * Backward compatibility stub. Do not use in new code.<br>
     * Use libvlc_audio_output_device_list_get() instead.<br>
     * \return always NULL.<br>
     * Original signature : <code>char* libvlc_audio_output_device_id(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 2986</i><br>
     * @deprecated use the safer methods {@link #libvlc_audio_output_device_id(com.sun.jna.ptr.PointerByReference, java.lang.String, int)} and {@link #libvlc_audio_output_device_id(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int)} instead
     */
    @Deprecated 
    Pointer libvlc_audio_output_device_id(Pointer libvlc_instance_tPtr1, Pointer charPtr1, int int1);
    /**
     * Backward compatibility stub. Do not use in new code.<br>
     * Use libvlc_audio_output_device_list_get() instead.<br>
     * \return always NULL.<br>
     * Original signature : <code>char* libvlc_audio_output_device_id(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 2986</i>
     */
    Pointer libvlc_audio_output_device_id(PointerByReference libvlc_instance_tPtr1, String charPtr1, int int1);
    /**
     * Backward compatibility stub. Do not use in new code.<br>
     * Use libvlc_audio_output_device_list_get() instead.<br>
     * \return always NULL.<br>
     * Original signature : <code>char* libvlc_audio_output_device_id(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 2986</i>
     */
    Pointer libvlc_audio_output_device_id(PointerByReference libvlc_instance_tPtr1, Pointer charPtr1, int int1);
    /**
     * Gets a list of potential audio output devices,<br>
     * \see libvlc_audio_output_device_set().<br>
     * \note Not all audio outputs support enumerating devices.<br>
     * The audio output may be functional even if the list is empty (NULL).<br>
     * \note The list may not be exhaustive.<br>
     * \warning Some audio output devices in the list might not actually work in<br>
     * some circumstances. By default, it is recommended to not specify any<br>
     * explicit audio device.<br>
     * \param mp media player<br>
     * \return A NULL-terminated linked list of potential audio output devices.<br>
     * It must be freed with libvlc_audio_output_device_list_release()<br>
     * \version LibVLC 2.2.0 or later.<br>
     * Original signature : <code>libvlc_audio_output_device_t* libvlc_audio_output_device_enum(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3006</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_output_device_enum(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    libvlc_audio_output_device_t libvlc_audio_output_device_enum(Pointer mp);
    /**
     * Gets a list of potential audio output devices,<br>
     * \see libvlc_audio_output_device_set().<br>
     * \note Not all audio outputs support enumerating devices.<br>
     * The audio output may be functional even if the list is empty (NULL).<br>
     * \note The list may not be exhaustive.<br>
     * \warning Some audio output devices in the list might not actually work in<br>
     * some circumstances. By default, it is recommended to not specify any<br>
     * explicit audio device.<br>
     * \param mp media player<br>
     * \return A NULL-terminated linked list of potential audio output devices.<br>
     * It must be freed with libvlc_audio_output_device_list_release()<br>
     * \version LibVLC 2.2.0 or later.<br>
     * Original signature : <code>libvlc_audio_output_device_t* libvlc_audio_output_device_enum(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3006</i>
     */
    libvlc_audio_output_device_t libvlc_audio_output_device_enum(PointerByReference mp);
    /**
     * Gets a list of audio output devices for a given audio output module,<br>
     * \see libvlc_audio_output_device_set().<br>
     * \note Not all audio outputs support this. In particular, an empty (NULL)<br>
     * list of devices does <b>not</b> imply that the specified audio output does<br>
     * not work.<br>
     * \note The list might not be exhaustive.<br>
     * \warning Some audio output devices in the list might not actually work in<br>
     * some circumstances. By default, it is recommended to not specify any<br>
     * explicit audio device.<br>
     * \param p_instance libvlc instance<br>
     * \param psz_aout audio output name<br>
     *                 (as returned by libvlc_audio_output_list_get())<br>
     * \return A NULL-terminated linked list of potential audio output devices.<br>
     * It must be freed with libvlc_audio_output_device_list_release()<br>
     * \version LibVLC 2.1.0 or later.<br>
     * Original signature : <code>libvlc_audio_output_device_t* libvlc_audio_output_device_list_get(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 3030</i><br>
     * @deprecated use the safer methods {@link #libvlc_audio_output_device_list_get(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_audio_output_device_list_get(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    libvlc_audio_output_device_t libvlc_audio_output_device_list_get(Pointer p_instance, Pointer aout);
    /**
     * Gets a list of audio output devices for a given audio output module,<br>
     * \see libvlc_audio_output_device_set().<br>
     * \note Not all audio outputs support this. In particular, an empty (NULL)<br>
     * list of devices does <b>not</b> imply that the specified audio output does<br>
     * not work.<br>
     * \note The list might not be exhaustive.<br>
     * \warning Some audio output devices in the list might not actually work in<br>
     * some circumstances. By default, it is recommended to not specify any<br>
     * explicit audio device.<br>
     * \param p_instance libvlc instance<br>
     * \param psz_aout audio output name<br>
     *                 (as returned by libvlc_audio_output_list_get())<br>
     * \return A NULL-terminated linked list of potential audio output devices.<br>
     * It must be freed with libvlc_audio_output_device_list_release()<br>
     * \version LibVLC 2.1.0 or later.<br>
     * Original signature : <code>libvlc_audio_output_device_t* libvlc_audio_output_device_list_get(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 3030</i>
     */
    libvlc_audio_output_device_t libvlc_audio_output_device_list_get(PointerByReference p_instance, String aout);
    /**
     * Gets a list of audio output devices for a given audio output module,<br>
     * \see libvlc_audio_output_device_set().<br>
     * \note Not all audio outputs support this. In particular, an empty (NULL)<br>
     * list of devices does <b>not</b> imply that the specified audio output does<br>
     * not work.<br>
     * \note The list might not be exhaustive.<br>
     * \warning Some audio output devices in the list might not actually work in<br>
     * some circumstances. By default, it is recommended to not specify any<br>
     * explicit audio device.<br>
     * \param p_instance libvlc instance<br>
     * \param psz_aout audio output name<br>
     *                 (as returned by libvlc_audio_output_list_get())<br>
     * \return A NULL-terminated linked list of potential audio output devices.<br>
     * It must be freed with libvlc_audio_output_device_list_release()<br>
     * \version LibVLC 2.1.0 or later.<br>
     * Original signature : <code>libvlc_audio_output_device_t* libvlc_audio_output_device_list_get(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 3030</i>
     */
    libvlc_audio_output_device_t libvlc_audio_output_device_list_get(PointerByReference p_instance, Pointer aout);
    /**
     * Frees a list of available audio output devices.<br>
     * \param p_list list with audio outputs for release<br>
     * \version LibVLC 2.1.0 or later.<br>
     * Original signature : <code>void libvlc_audio_output_device_list_release(libvlc_audio_output_device_t*)</code><br>
     * <i>native declaration : line 3040</i>
     */
    void libvlc_audio_output_device_list_release(libvlc_audio_output_device_t p_list);
    /**
     * Configures an explicit audio output device.<br>
     * If the module paramater is NULL, audio output will be moved to the device<br>
     * specified by the device identifier string immediately. This is the<br>
     * recommended usage.<br>
     * A list of adequate potential device strings can be obtained with<br>
     * libvlc_audio_output_device_enum().<br>
     * However passing NULL is supported in LibVLC version 2.2.0 and later only;<br>
     * in earlier versions, this function would have no effects when the module<br>
     * parameter was NULL.<br>
     * If the module parameter is not NULL, the device parameter of the<br>
     * corresponding audio output, if it exists, will be set to the specified<br>
     * string. Note that some audio output modules do not have such a parameter<br>
     * (notably MMDevice and PulseAudio).<br>
     * A list of adequate potential device strings can be obtained with<br>
     * libvlc_audio_output_device_list_get().<br>
     * \note This function does not select the specified audio output plugin.<br>
     * libvlc_audio_output_set() is used for that purpose.<br>
     * \warning The syntax for the device parameter depends on the audio output.<br>
     * Some audio output modules require further parameters (e.g. a channels map<br>
     * in the case of ALSA).<br>
     * \param mp media player<br>
     * \param module If NULL, current audio output module.<br>
     *               if non-NULL, name of audio output module<br>
     * (\see libvlc_audio_output_t)<br>
     * \param device_id device identifier string<br>
     * \return Nothing. Errors are ignored (this is a design bug).<br>
     * Original signature : <code>void libvlc_audio_output_device_set(libvlc_media_player_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 3080</i><br>
     * @deprecated use the safer methods {@link #libvlc_audio_output_device_set(com.sun.jna.ptr.PointerByReference, java.lang.String, java.lang.String)} and {@link #libvlc_audio_output_device_set(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    void libvlc_audio_output_device_set(Pointer mp, Pointer module, Pointer device_id);
    /**
     * Configures an explicit audio output device.<br>
     * If the module paramater is NULL, audio output will be moved to the device<br>
     * specified by the device identifier string immediately. This is the<br>
     * recommended usage.<br>
     * A list of adequate potential device strings can be obtained with<br>
     * libvlc_audio_output_device_enum().<br>
     * However passing NULL is supported in LibVLC version 2.2.0 and later only;<br>
     * in earlier versions, this function would have no effects when the module<br>
     * parameter was NULL.<br>
     * If the module parameter is not NULL, the device parameter of the<br>
     * corresponding audio output, if it exists, will be set to the specified<br>
     * string. Note that some audio output modules do not have such a parameter<br>
     * (notably MMDevice and PulseAudio).<br>
     * A list of adequate potential device strings can be obtained with<br>
     * libvlc_audio_output_device_list_get().<br>
     * \note This function does not select the specified audio output plugin.<br>
     * libvlc_audio_output_set() is used for that purpose.<br>
     * \warning The syntax for the device parameter depends on the audio output.<br>
     * Some audio output modules require further parameters (e.g. a channels map<br>
     * in the case of ALSA).<br>
     * \param mp media player<br>
     * \param module If NULL, current audio output module.<br>
     *               if non-NULL, name of audio output module<br>
     * (\see libvlc_audio_output_t)<br>
     * \param device_id device identifier string<br>
     * \return Nothing. Errors are ignored (this is a design bug).<br>
     * Original signature : <code>void libvlc_audio_output_device_set(libvlc_media_player_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 3080</i>
     */
    void libvlc_audio_output_device_set(PointerByReference mp, String module, String device_id);
    /**
     * Configures an explicit audio output device.<br>
     * If the module paramater is NULL, audio output will be moved to the device<br>
     * specified by the device identifier string immediately. This is the<br>
     * recommended usage.<br>
     * A list of adequate potential device strings can be obtained with<br>
     * libvlc_audio_output_device_enum().<br>
     * However passing NULL is supported in LibVLC version 2.2.0 and later only;<br>
     * in earlier versions, this function would have no effects when the module<br>
     * parameter was NULL.<br>
     * If the module parameter is not NULL, the device parameter of the<br>
     * corresponding audio output, if it exists, will be set to the specified<br>
     * string. Note that some audio output modules do not have such a parameter<br>
     * (notably MMDevice and PulseAudio).<br>
     * A list of adequate potential device strings can be obtained with<br>
     * libvlc_audio_output_device_list_get().<br>
     * \note This function does not select the specified audio output plugin.<br>
     * libvlc_audio_output_set() is used for that purpose.<br>
     * \warning The syntax for the device parameter depends on the audio output.<br>
     * Some audio output modules require further parameters (e.g. a channels map<br>
     * in the case of ALSA).<br>
     * \param mp media player<br>
     * \param module If NULL, current audio output module.<br>
     *               if non-NULL, name of audio output module<br>
     * (\see libvlc_audio_output_t)<br>
     * \param device_id device identifier string<br>
     * \return Nothing. Errors are ignored (this is a design bug).<br>
     * Original signature : <code>void libvlc_audio_output_device_set(libvlc_media_player_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 3080</i>
     */
    void libvlc_audio_output_device_set(PointerByReference mp, Pointer module, Pointer device_id);
    /**
     * Get the current audio output device identifier.<br>
     * This complements libvlc_audio_output_device_set().<br>
     * \warning The initial value for the current audio output device identifier<br>
     * may not be set or may be some unknown value. A LibVLC application should<br>
     * compare this value against the known device identifiers (e.g. those that<br>
     * were previously retrieved by a call to libvlc_audio_output_device_enum or<br>
     * libvlc_audio_output_device_list_get) to find the current audio output device.<br>
     * It is possible that the selected audio output device changes (an external<br>
     * change) without a call to libvlc_audio_output_device_set. That may make this<br>
     * method unsuitable to use if a LibVLC application is attempting to track<br>
     * dynamic audio device changes as they happen.<br>
     * \param mp media player<br>
     * \return the current audio output device identifier<br>
     *         NULL if no device is selected or in case of error<br>
     *         (the result must be released with free() or libvlc_free()).<br>
     * \version LibVLC 3.0.0 or later.<br>
     * Original signature : <code>char* libvlc_audio_output_device_get(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3106</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_output_device_get(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    Pointer libvlc_audio_output_device_get(Pointer mp);
    /**
     * Get the current audio output device identifier.<br>
     * This complements libvlc_audio_output_device_set().<br>
     * \warning The initial value for the current audio output device identifier<br>
     * may not be set or may be some unknown value. A LibVLC application should<br>
     * compare this value against the known device identifiers (e.g. those that<br>
     * were previously retrieved by a call to libvlc_audio_output_device_enum or<br>
     * libvlc_audio_output_device_list_get) to find the current audio output device.<br>
     * It is possible that the selected audio output device changes (an external<br>
     * change) without a call to libvlc_audio_output_device_set. That may make this<br>
     * method unsuitable to use if a LibVLC application is attempting to track<br>
     * dynamic audio device changes as they happen.<br>
     * \param mp media player<br>
     * \return the current audio output device identifier<br>
     *         NULL if no device is selected or in case of error<br>
     *         (the result must be released with free() or libvlc_free()).<br>
     * \version LibVLC 3.0.0 or later.<br>
     * Original signature : <code>char* libvlc_audio_output_device_get(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3106</i>
     */
    Pointer libvlc_audio_output_device_get(PointerByReference mp);
    /**
     * Stub for backward compatibility.<br>
     * \return always -1.<br>
     * Original signature : <code>int libvlc_audio_output_get_device_type(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3113</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_output_get_device_type(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_audio_output_get_device_type(Pointer p_mi);
    /**
     * Stub for backward compatibility.<br>
     * \return always -1.<br>
     * Original signature : <code>int libvlc_audio_output_get_device_type(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3113</i>
     */
    int libvlc_audio_output_get_device_type(PointerByReference p_mi);
    /**
     * Stub for backward compatibility.<br>
     * Original signature : <code>void libvlc_audio_output_set_device_type(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 3119</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_output_set_device_type(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    void libvlc_audio_output_set_device_type(Pointer libvlc_media_player_tPtr1, int int1);
    /**
     * Stub for backward compatibility.<br>
     * Original signature : <code>void libvlc_audio_output_set_device_type(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 3119</i>
     */
    void libvlc_audio_output_set_device_type(PointerByReference libvlc_media_player_tPtr1, int int1);
    /**
     * Toggle mute status.<br>
     * \param p_mi media player<br>
     * \warning Toggling mute atomically is not always possible: On some platforms,<br>
     * other processes can mute the VLC audio playback stream asynchronously. Thus,<br>
     * there is a small race condition where toggling will not work.<br>
     * See also the limitations of libvlc_audio_set_mute().<br>
     * Original signature : <code>void libvlc_audio_toggle_mute(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3132</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_toggle_mute(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_audio_toggle_mute(Pointer p_mi);
    /**
     * Toggle mute status.<br>
     * \param p_mi media player<br>
     * \warning Toggling mute atomically is not always possible: On some platforms,<br>
     * other processes can mute the VLC audio playback stream asynchronously. Thus,<br>
     * there is a small race condition where toggling will not work.<br>
     * See also the limitations of libvlc_audio_set_mute().<br>
     * Original signature : <code>void libvlc_audio_toggle_mute(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3132</i>
     */
    void libvlc_audio_toggle_mute(PointerByReference p_mi);
    /**
     * Get current mute status.<br>
     * \param p_mi media player<br>
     * \return the mute status (boolean) if defined, -1 if undefined/unapplicable<br>
     * Original signature : <code>int libvlc_audio_get_mute(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3140</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_get_mute(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_audio_get_mute(Pointer p_mi);
    /**
     * Get current mute status.<br>
     * \param p_mi media player<br>
     * \return the mute status (boolean) if defined, -1 if undefined/unapplicable<br>
     * Original signature : <code>int libvlc_audio_get_mute(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3140</i>
     */
    int libvlc_audio_get_mute(PointerByReference p_mi);
    /**
     * Set mute status.<br>
     * \param p_mi media player<br>
     * \param status If status is true then mute, otherwise unmute<br>
     * \warning This function does not always work. If there are no active audio<br>
     * playback stream, the mute status might not be available. If digital<br>
     * pass-through (S/PDIF, HDMI...) is in use, muting may be unapplicable. Also<br>
     * some audio output plugins do not support muting at all.<br>
     * \note To force silent playback, disable all audio tracks. This is more<br>
     * efficient and reliable than mute.<br>
     * Original signature : <code>void libvlc_audio_set_mute(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 3154</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_set_mute(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    void libvlc_audio_set_mute(Pointer p_mi, int status);
    /**
     * Set mute status.<br>
     * \param p_mi media player<br>
     * \param status If status is true then mute, otherwise unmute<br>
     * \warning This function does not always work. If there are no active audio<br>
     * playback stream, the mute status might not be available. If digital<br>
     * pass-through (S/PDIF, HDMI...) is in use, muting may be unapplicable. Also<br>
     * some audio output plugins do not support muting at all.<br>
     * \note To force silent playback, disable all audio tracks. This is more<br>
     * efficient and reliable than mute.<br>
     * Original signature : <code>void libvlc_audio_set_mute(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 3154</i>
     */
    void libvlc_audio_set_mute(PointerByReference p_mi, int status);
    /**
     * Get current software audio volume.<br>
     * \param p_mi media player<br>
     * \return the software volume in percents<br>
     * (0 = mute, 100 = nominal / 0dB)<br>
     * Original signature : <code>int libvlc_audio_get_volume(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3163</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_get_volume(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_audio_get_volume(Pointer p_mi);
    /**
     * Get current software audio volume.<br>
     * \param p_mi media player<br>
     * \return the software volume in percents<br>
     * (0 = mute, 100 = nominal / 0dB)<br>
     * Original signature : <code>int libvlc_audio_get_volume(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3163</i>
     */
    int libvlc_audio_get_volume(PointerByReference p_mi);
    /**
     * Set current software audio volume.<br>
     * \param p_mi media player<br>
     * \param i_volume the volume in percents (0 = mute, 100 = 0dB)<br>
     * \return 0 if the volume was set, -1 if it was out of range<br>
     * Original signature : <code>int libvlc_audio_set_volume(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 3172</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_set_volume(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    int libvlc_audio_set_volume(Pointer p_mi, int i_volume);
    /**
     * Set current software audio volume.<br>
     * \param p_mi media player<br>
     * \param i_volume the volume in percents (0 = mute, 100 = 0dB)<br>
     * \return 0 if the volume was set, -1 if it was out of range<br>
     * Original signature : <code>int libvlc_audio_set_volume(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 3172</i>
     */
    int libvlc_audio_set_volume(PointerByReference p_mi, int i_volume);
    /**
     * Get number of available audio tracks.<br>
     * \param p_mi media player<br>
     * \return the number of available audio tracks (int), or -1 if unavailable<br>
     * Original signature : <code>int libvlc_audio_get_track_count(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3180</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_get_track_count(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_audio_get_track_count(Pointer p_mi);
    /**
     * Get number of available audio tracks.<br>
     * \param p_mi media player<br>
     * \return the number of available audio tracks (int), or -1 if unavailable<br>
     * Original signature : <code>int libvlc_audio_get_track_count(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3180</i>
     */
    int libvlc_audio_get_track_count(PointerByReference p_mi);
    /**
     * Get the description of available audio tracks.<br>
     * \param p_mi media player<br>
     * \return list with description of available audio tracks, or NULL.<br>
     * It must be freed with libvlc_track_description_list_release()<br>
     * Original signature : <code>libvlc_track_description_t* libvlc_audio_get_track_description(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3189</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_get_track_description(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    libvlc_track_description_t libvlc_audio_get_track_description(Pointer p_mi);
    /**
     * Get the description of available audio tracks.<br>
     * \param p_mi media player<br>
     * \return list with description of available audio tracks, or NULL.<br>
     * It must be freed with libvlc_track_description_list_release()<br>
     * Original signature : <code>libvlc_track_description_t* libvlc_audio_get_track_description(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3189</i>
     */
    libvlc_track_description_t libvlc_audio_get_track_description(PointerByReference p_mi);
    /**
     * Get current audio track.<br>
     * \param p_mi media player<br>
     * \return the audio track ID or -1 if no active input.<br>
     * Original signature : <code>int libvlc_audio_get_track(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3198</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_get_track(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_audio_get_track(Pointer p_mi);
    /**
     * Get current audio track.<br>
     * \param p_mi media player<br>
     * \return the audio track ID or -1 if no active input.<br>
     * Original signature : <code>int libvlc_audio_get_track(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3198</i>
     */
    int libvlc_audio_get_track(PointerByReference p_mi);
    /**
     * Set current audio track.<br>
     * \param p_mi media player<br>
     * \param i_track the track ID (i_id field from track description)<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_audio_set_track(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 3207</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_set_track(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    int libvlc_audio_set_track(Pointer p_mi, int i_track);
    /**
     * Set current audio track.<br>
     * \param p_mi media player<br>
     * \param i_track the track ID (i_id field from track description)<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_audio_set_track(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 3207</i>
     */
    int libvlc_audio_set_track(PointerByReference p_mi, int i_track);
    /**
     * Get current audio channel.<br>
     * \param p_mi media player<br>
     * \return the audio channel \see libvlc_audio_output_channel_t<br>
     * Original signature : <code>int libvlc_audio_get_channel(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3215</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_get_channel(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_audio_get_channel(Pointer p_mi);
    /**
     * Get current audio channel.<br>
     * \param p_mi media player<br>
     * \return the audio channel \see libvlc_audio_output_channel_t<br>
     * Original signature : <code>int libvlc_audio_get_channel(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3215</i>
     */
    int libvlc_audio_get_channel(PointerByReference p_mi);
    /**
     * Set current audio channel.<br>
     * \param p_mi media player<br>
     * \param channel the audio channel, \see libvlc_audio_output_channel_t<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_audio_set_channel(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 3224</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_set_channel(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    int libvlc_audio_set_channel(Pointer p_mi, int channel);
    /**
     * Set current audio channel.<br>
     * \param p_mi media player<br>
     * \param channel the audio channel, \see libvlc_audio_output_channel_t<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_audio_set_channel(libvlc_media_player_t*, int)</code><br>
     * <i>native declaration : line 3224</i>
     */
    int libvlc_audio_set_channel(PointerByReference p_mi, int channel);
    /**
     * Get current audio delay.<br>
     * \param p_mi media player<br>
     * \return the audio delay (microseconds)<br>
     * \version LibVLC 1.1.1 or later<br>
     * Original signature : <code>int64_t libvlc_audio_get_delay(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3233</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_get_delay(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    long libvlc_audio_get_delay(Pointer p_mi);
    /**
     * Get current audio delay.<br>
     * \param p_mi media player<br>
     * \return the audio delay (microseconds)<br>
     * \version LibVLC 1.1.1 or later<br>
     * Original signature : <code>int64_t libvlc_audio_get_delay(libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3233</i>
     */
    long libvlc_audio_get_delay(PointerByReference p_mi);
    /**
     * Set current audio delay. The audio delay will be reset to zero each time the media changes.<br>
     * \param p_mi media player<br>
     * \param i_delay the audio delay (microseconds)<br>
     * \return 0 on success, -1 on error<br>
     * \version LibVLC 1.1.1 or later<br>
     * Original signature : <code>int libvlc_audio_set_delay(libvlc_media_player_t*, int64_t)</code><br>
     * <i>native declaration : line 3243</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_set_delay(com.sun.jna.ptr.PointerByReference, long)} instead
     */
    @Deprecated 
    int libvlc_audio_set_delay(Pointer p_mi, long i_delay);
    /**
     * Set current audio delay. The audio delay will be reset to zero each time the media changes.<br>
     * \param p_mi media player<br>
     * \param i_delay the audio delay (microseconds)<br>
     * \return 0 on success, -1 on error<br>
     * \version LibVLC 1.1.1 or later<br>
     * Original signature : <code>int libvlc_audio_set_delay(libvlc_media_player_t*, int64_t)</code><br>
     * <i>native declaration : line 3243</i>
     */
    int libvlc_audio_set_delay(PointerByReference p_mi, long i_delay);
    /**
     * Get the number of equalizer presets.<br>
     * \return number of presets<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>int libvlc_audio_equalizer_get_preset_count()</code><br>
     * <i>native declaration : line 3251</i>
     */
    int libvlc_audio_equalizer_get_preset_count();
    /**
     * Get the name of a particular equalizer preset.<br>
     * This name can be used, for example, to prepare a preset label or menu in a user<br>
     * interface.<br>
     * \param u_index index of the preset, counting from zero<br>
     * \return preset name, or NULL if there is no such preset<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>char* libvlc_audio_equalizer_get_preset_name(unsigned)</code><br>
     * <i>native declaration : line 3263</i>
     */
    Pointer libvlc_audio_equalizer_get_preset_name(int u_index);
    /**
     * Get the number of distinct frequency bands for an equalizer.<br>
     * \return number of frequency bands<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>int libvlc_audio_equalizer_get_band_count()</code><br>
     * <i>native declaration : line 3271</i>
     */
    int libvlc_audio_equalizer_get_band_count();
    /**
     * Get a particular equalizer band frequency.<br>
     * This value can be used, for example, to create a label for an equalizer band control<br>
     * in a user interface.<br>
     * \param u_index index of the band, counting from zero<br>
     * \return equalizer band frequency (Hz), or -1 if there is no such band<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>float libvlc_audio_equalizer_get_band_frequency(unsigned)</code><br>
     * <i>native declaration : line 3283</i>
     */
    float libvlc_audio_equalizer_get_band_frequency(int u_index);
    /**
     * Create a new default equalizer, with all frequency values zeroed.<br>
     * The new equalizer can subsequently be applied to a media player by invoking<br>
     * libvlc_media_player_set_equalizer().<br>
     * The returned handle should be freed via libvlc_audio_equalizer_release() when<br>
     * it is no longer needed.<br>
     * \return opaque equalizer handle, or NULL on error<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>libvlc_equalizer_t* libvlc_audio_equalizer_new()</code><br>
     * <i>native declaration : line 3297</i>
     */
    PointerByReference libvlc_audio_equalizer_new();
    /**
     * Create a new equalizer, with initial frequency values copied from an existing<br>
     * preset.<br>
     * The new equalizer can subsequently be applied to a media player by invoking<br>
     * libvlc_media_player_set_equalizer().<br>
     * The returned handle should be freed via libvlc_audio_equalizer_release() when<br>
     * it is no longer needed.<br>
     * \param u_index index of the preset, counting from zero<br>
     * \return opaque equalizer handle, or NULL on error<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>libvlc_equalizer_t* libvlc_audio_equalizer_new_from_preset(unsigned)</code><br>
     * <i>native declaration : line 3313</i>
     */
    PointerByReference libvlc_audio_equalizer_new_from_preset(int u_index);
    /**
     * Release a previously created equalizer instance.<br>
     * The equalizer was previously created by using libvlc_audio_equalizer_new() or<br>
     * libvlc_audio_equalizer_new_from_preset().<br>
     * It is safe to invoke this method with a NULL p_equalizer parameter for no effect.<br>
     * \param p_equalizer opaque equalizer handle, or NULL<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>void libvlc_audio_equalizer_release(libvlc_equalizer_t*)</code><br>
     * <i>native declaration : line 3326</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_equalizer_release(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_audio_equalizer_release(Pointer p_equalizer);
    /**
     * Release a previously created equalizer instance.<br>
     * The equalizer was previously created by using libvlc_audio_equalizer_new() or<br>
     * libvlc_audio_equalizer_new_from_preset().<br>
     * It is safe to invoke this method with a NULL p_equalizer parameter for no effect.<br>
     * \param p_equalizer opaque equalizer handle, or NULL<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>void libvlc_audio_equalizer_release(libvlc_equalizer_t*)</code><br>
     * <i>native declaration : line 3326</i>
     */
    void libvlc_audio_equalizer_release(PointerByReference p_equalizer);
    /**
     * Set a new pre-amplification value for an equalizer.<br>
     * The new equalizer settings are subsequently applied to a media player by invoking<br>
     * libvlc_media_player_set_equalizer().<br>
     * The supplied amplification value will be clamped to the -20.0 to +20.0 range.<br>
     * \param p_equalizer valid equalizer handle, must not be NULL<br>
     * \param f_preamp preamp value (-20.0 to 20.0 Hz)<br>
     * \return zero on success, -1 on error<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>int libvlc_audio_equalizer_set_preamp(libvlc_equalizer_t*, float)</code><br>
     * <i>native declaration : line 3341</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_equalizer_set_preamp(com.sun.jna.ptr.PointerByReference, float)} instead
     */
    @Deprecated 
    int libvlc_audio_equalizer_set_preamp(Pointer p_equalizer, float f_preamp);
    /**
     * Set a new pre-amplification value for an equalizer.<br>
     * The new equalizer settings are subsequently applied to a media player by invoking<br>
     * libvlc_media_player_set_equalizer().<br>
     * The supplied amplification value will be clamped to the -20.0 to +20.0 range.<br>
     * \param p_equalizer valid equalizer handle, must not be NULL<br>
     * \param f_preamp preamp value (-20.0 to 20.0 Hz)<br>
     * \return zero on success, -1 on error<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>int libvlc_audio_equalizer_set_preamp(libvlc_equalizer_t*, float)</code><br>
     * <i>native declaration : line 3341</i>
     */
    int libvlc_audio_equalizer_set_preamp(PointerByReference p_equalizer, float f_preamp);
    /**
     * Get the current pre-amplification value from an equalizer.<br>
     * \param p_equalizer valid equalizer handle, must not be NULL<br>
     * \return preamp value (Hz)<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>float libvlc_audio_equalizer_get_preamp(libvlc_equalizer_t*)</code><br>
     * <i>native declaration : line 3350</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_equalizer_get_preamp(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    float libvlc_audio_equalizer_get_preamp(Pointer p_equalizer);
    /**
     * Get the current pre-amplification value from an equalizer.<br>
     * \param p_equalizer valid equalizer handle, must not be NULL<br>
     * \return preamp value (Hz)<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>float libvlc_audio_equalizer_get_preamp(libvlc_equalizer_t*)</code><br>
     * <i>native declaration : line 3350</i>
     */
    float libvlc_audio_equalizer_get_preamp(PointerByReference p_equalizer);
    /**
     * Set a new amplification value for a particular equalizer frequency band.<br>
     * The new equalizer settings are subsequently applied to a media player by invoking<br>
     * libvlc_media_player_set_equalizer().<br>
     * The supplied amplification value will be clamped to the -20.0 to +20.0 range.<br>
     * \param p_equalizer valid equalizer handle, must not be NULL<br>
     * \param f_amp amplification value (-20.0 to 20.0 Hz)<br>
     * \param u_band index, counting from zero, of the frequency band to set<br>
     * \return zero on success, -1 on error<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>int libvlc_audio_equalizer_set_amp_at_index(libvlc_equalizer_t*, float, unsigned)</code><br>
     * <i>native declaration : line 3366</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_equalizer_set_amp_at_index(com.sun.jna.ptr.PointerByReference, float, int)} instead
     */
    @Deprecated 
    int libvlc_audio_equalizer_set_amp_at_index(Pointer p_equalizer, float f_amp, int u_band);
    /**
     * Set a new amplification value for a particular equalizer frequency band.<br>
     * The new equalizer settings are subsequently applied to a media player by invoking<br>
     * libvlc_media_player_set_equalizer().<br>
     * The supplied amplification value will be clamped to the -20.0 to +20.0 range.<br>
     * \param p_equalizer valid equalizer handle, must not be NULL<br>
     * \param f_amp amplification value (-20.0 to 20.0 Hz)<br>
     * \param u_band index, counting from zero, of the frequency band to set<br>
     * \return zero on success, -1 on error<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>int libvlc_audio_equalizer_set_amp_at_index(libvlc_equalizer_t*, float, unsigned)</code><br>
     * <i>native declaration : line 3366</i>
     */
    int libvlc_audio_equalizer_set_amp_at_index(PointerByReference p_equalizer, float f_amp, int u_band);
    /**
     * Get the amplification value for a particular equalizer frequency band.<br>
     * \param p_equalizer valid equalizer handle, must not be NULL<br>
     * \param u_band index, counting from zero, of the frequency band to get<br>
     * \return amplification value (Hz); NaN if there is no such frequency band<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>float libvlc_audio_equalizer_get_amp_at_index(libvlc_equalizer_t*, unsigned)</code><br>
     * <i>native declaration : line 3376</i><br>
     * @deprecated use the safer method {@link #libvlc_audio_equalizer_get_amp_at_index(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    float libvlc_audio_equalizer_get_amp_at_index(Pointer p_equalizer, int u_band);
    /**
     * Get the amplification value for a particular equalizer frequency band.<br>
     * \param p_equalizer valid equalizer handle, must not be NULL<br>
     * \param u_band index, counting from zero, of the frequency band to get<br>
     * \return amplification value (Hz); NaN if there is no such frequency band<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>float libvlc_audio_equalizer_get_amp_at_index(libvlc_equalizer_t*, unsigned)</code><br>
     * <i>native declaration : line 3376</i>
     */
    float libvlc_audio_equalizer_get_amp_at_index(PointerByReference p_equalizer, int u_band);
    /**
     * Apply new equalizer settings to a media player.<br>
     * The equalizer is first created by invoking libvlc_audio_equalizer_new() or<br>
     * libvlc_audio_equalizer_new_from_preset().<br>
     * It is possible to apply new equalizer settings to a media player whether the media<br>
     * player is currently playing media or not.<br>
     * Invoking this method will immediately apply the new equalizer settings to the audio<br>
     * output of the currently playing media if there is any.<br>
     * If there is no currently playing media, the new equalizer settings will be applied<br>
     * later if and when new media is played.<br>
     * Equalizer settings will automatically be applied to subsequently played media.<br>
     * To disable the equalizer for a media player invoke this method passing NULL for the<br>
     * p_equalizer parameter.<br>
     * The media player does not keep a reference to the supplied equalizer so it is safe<br>
     * for an application to release the equalizer reference any time after this method<br>
     * returns.<br>
     * \param p_mi opaque media player handle<br>
     * \param p_equalizer opaque equalizer handle, or NULL to disable the equalizer for this media player<br>
     * \return zero on success, -1 on error<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>int libvlc_media_player_set_equalizer(libvlc_media_player_t*, libvlc_equalizer_t*)</code><br>
     * <i>native declaration : line 3407</i><br>
     * @deprecated use the safer method {@link #libvlc_media_player_set_equalizer(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_player_set_equalizer(Pointer p_mi, Pointer p_equalizer);
    /**
     * Apply new equalizer settings to a media player.<br>
     * The equalizer is first created by invoking libvlc_audio_equalizer_new() or<br>
     * libvlc_audio_equalizer_new_from_preset().<br>
     * It is possible to apply new equalizer settings to a media player whether the media<br>
     * player is currently playing media or not.<br>
     * Invoking this method will immediately apply the new equalizer settings to the audio<br>
     * output of the currently playing media if there is any.<br>
     * If there is no currently playing media, the new equalizer settings will be applied<br>
     * later if and when new media is played.<br>
     * Equalizer settings will automatically be applied to subsequently played media.<br>
     * To disable the equalizer for a media player invoke this method passing NULL for the<br>
     * p_equalizer parameter.<br>
     * The media player does not keep a reference to the supplied equalizer so it is safe<br>
     * for an application to release the equalizer reference any time after this method<br>
     * returns.<br>
     * \param p_mi opaque media player handle<br>
     * \param p_equalizer opaque equalizer handle, or NULL to disable the equalizer for this media player<br>
     * \return zero on success, -1 on error<br>
     * \version LibVLC 2.2.0 or later<br>
     * Original signature : <code>int libvlc_media_player_set_equalizer(libvlc_media_player_t*, libvlc_equalizer_t*)</code><br>
     * <i>native declaration : line 3407</i>
     */
    int libvlc_media_player_set_equalizer(PointerByReference p_mi, PointerByReference p_equalizer);
    /**
     * Create an empty media list.<br>
     * \param p_instance libvlc instance<br>
     * \return empty media list, or NULL on error<br>
     * Original signature : <code>libvlc_media_list_t* libvlc_media_list_new(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 3467</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_new(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_list_new(Pointer p_instance);
    /**
     * Create an empty media list.<br>
     * \param p_instance libvlc instance<br>
     * \return empty media list, or NULL on error<br>
     * Original signature : <code>libvlc_media_list_t* libvlc_media_list_new(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 3467</i>
     */
    PointerByReference libvlc_media_list_new(PointerByReference p_instance);
    /**
     * Release media list created with libvlc_media_list_new().<br>
     * \param p_ml a media list created with libvlc_media_list_new()<br>
     * Original signature : <code>void libvlc_media_list_release(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3475</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_release(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_list_release(Pointer p_ml);
    /**
     * Release media list created with libvlc_media_list_new().<br>
     * \param p_ml a media list created with libvlc_media_list_new()<br>
     * Original signature : <code>void libvlc_media_list_release(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3475</i>
     */
    void libvlc_media_list_release(PointerByReference p_ml);
    /**
     * Retain reference to a media list<br>
     * \param p_ml a media list created with libvlc_media_list_new()<br>
     * Original signature : <code>void libvlc_media_list_retain(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3483</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_retain(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_list_retain(Pointer p_ml);
    /**
     * Retain reference to a media list<br>
     * \param p_ml a media list created with libvlc_media_list_new()<br>
     * Original signature : <code>void libvlc_media_list_retain(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3483</i>
     */
    void libvlc_media_list_retain(PointerByReference p_ml);
    /**
     * Original signature : <code>int libvlc_media_list_add_file_content(libvlc_media_list_t*, const char*)</code><br>
     * <i>native declaration : line 3486</i><br>
     * @deprecated use the safer methods {@link #libvlc_media_list_add_file_content(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_media_list_add_file_content(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_media_list_add_file_content(Pointer p_ml, Pointer psz_uri);
    /**
     * Original signature : <code>int libvlc_media_list_add_file_content(libvlc_media_list_t*, const char*)</code><br>
     * <i>native declaration : line 3486</i>
     */
    int libvlc_media_list_add_file_content(PointerByReference p_ml, String psz_uri);
    /**
     * Original signature : <code>int libvlc_media_list_add_file_content(libvlc_media_list_t*, const char*)</code><br>
     * <i>native declaration : line 3486</i>
     */
    int libvlc_media_list_add_file_content(PointerByReference p_ml, Pointer psz_uri);
    /**
     * Associate media instance with this media list instance.<br>
     * If another media instance was present it will be released.<br>
     * The libvlc_media_list_lock should NOT be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \param p_md media instance to add<br>
     * Original signature : <code>void libvlc_media_list_set_media(libvlc_media_list_t*, libvlc_media_t*)</code><br>
     * <i>native declaration : line 3498</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_set_media(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_list_set_media(Pointer p_ml, Pointer p_md);
    /**
     * Associate media instance with this media list instance.<br>
     * If another media instance was present it will be released.<br>
     * The libvlc_media_list_lock should NOT be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \param p_md media instance to add<br>
     * Original signature : <code>void libvlc_media_list_set_media(libvlc_media_list_t*, libvlc_media_t*)</code><br>
     * <i>native declaration : line 3498</i>
     */
    void libvlc_media_list_set_media(PointerByReference p_ml, PointerByReference p_md);
    /**
     * Get media instance from this media list instance. This action will increase<br>
     * the refcount on the media instance.<br>
     * The libvlc_media_list_lock should NOT be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \return media instance<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_list_media(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3509</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_media(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_list_media(Pointer p_ml);
    /**
     * Get media instance from this media list instance. This action will increase<br>
     * the refcount on the media instance.<br>
     * The libvlc_media_list_lock should NOT be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \return media instance<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_list_media(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3509</i>
     */
    PointerByReference libvlc_media_list_media(PointerByReference p_ml);
    /**
     * Add media instance to media list<br>
     * The libvlc_media_list_lock should be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \param p_md a media instance<br>
     * \return 0 on success, -1 if the media list is read-only<br>
     * Original signature : <code>int libvlc_media_list_add_media(libvlc_media_list_t*, libvlc_media_t*)</code><br>
     * <i>native declaration : line 3520</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_add_media(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_list_add_media(Pointer p_ml, Pointer p_md);
    /**
     * Add media instance to media list<br>
     * The libvlc_media_list_lock should be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \param p_md a media instance<br>
     * \return 0 on success, -1 if the media list is read-only<br>
     * Original signature : <code>int libvlc_media_list_add_media(libvlc_media_list_t*, libvlc_media_t*)</code><br>
     * <i>native declaration : line 3520</i>
     */
    int libvlc_media_list_add_media(PointerByReference p_ml, PointerByReference p_md);
    /**
     * Insert media instance in media list on a position<br>
     * The libvlc_media_list_lock should be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \param p_md a media instance<br>
     * \param i_pos position in array where to insert<br>
     * \return 0 on success, -1 if the media list is read-only<br>
     * Original signature : <code>int libvlc_media_list_insert_media(libvlc_media_list_t*, libvlc_media_t*, int)</code><br>
     * <i>native declaration : line 3532</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_insert_media(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    int libvlc_media_list_insert_media(Pointer p_ml, Pointer p_md, int i_pos);
    /**
     * Insert media instance in media list on a position<br>
     * The libvlc_media_list_lock should be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \param p_md a media instance<br>
     * \param i_pos position in array where to insert<br>
     * \return 0 on success, -1 if the media list is read-only<br>
     * Original signature : <code>int libvlc_media_list_insert_media(libvlc_media_list_t*, libvlc_media_t*, int)</code><br>
     * <i>native declaration : line 3532</i>
     */
    int libvlc_media_list_insert_media(PointerByReference p_ml, PointerByReference p_md, int i_pos);
    /**
     * Remove media instance from media list on a position<br>
     * The libvlc_media_list_lock should be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \param i_pos position in array where to insert<br>
     * \return 0 on success, -1 if the list is read-only or the item was not found<br>
     * Original signature : <code>int libvlc_media_list_remove_index(libvlc_media_list_t*, int)</code><br>
     * <i>native declaration : line 3544</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_remove_index(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    int libvlc_media_list_remove_index(Pointer p_ml, int i_pos);
    /**
     * Remove media instance from media list on a position<br>
     * The libvlc_media_list_lock should be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \param i_pos position in array where to insert<br>
     * \return 0 on success, -1 if the list is read-only or the item was not found<br>
     * Original signature : <code>int libvlc_media_list_remove_index(libvlc_media_list_t*, int)</code><br>
     * <i>native declaration : line 3544</i>
     */
    int libvlc_media_list_remove_index(PointerByReference p_ml, int i_pos);
    /**
     * Get count on media list items<br>
     * The libvlc_media_list_lock should be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \return number of items in media list<br>
     * Original signature : <code>int libvlc_media_list_count(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3554</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_count(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_list_count(Pointer p_ml);
    /**
     * Get count on media list items<br>
     * The libvlc_media_list_lock should be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \return number of items in media list<br>
     * Original signature : <code>int libvlc_media_list_count(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3554</i>
     */
    int libvlc_media_list_count(PointerByReference p_ml);
    /**
     * List media instance in media list at a position<br>
     * The libvlc_media_list_lock should be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \param i_pos position in array where to insert<br>
     * \return media instance at position i_pos, or NULL if not found.<br>
     * In case of success, libvlc_media_retain() is called to increase the refcount<br>
     * on the media.<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_list_item_at_index(libvlc_media_list_t*, int)</code><br>
     * <i>native declaration : line 3567</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_item_at_index(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_list_item_at_index(Pointer p_ml, int i_pos);
    /**
     * List media instance in media list at a position<br>
     * The libvlc_media_list_lock should be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \param i_pos position in array where to insert<br>
     * \return media instance at position i_pos, or NULL if not found.<br>
     * In case of success, libvlc_media_retain() is called to increase the refcount<br>
     * on the media.<br>
     * Original signature : <code>libvlc_media_t* libvlc_media_list_item_at_index(libvlc_media_list_t*, int)</code><br>
     * <i>native declaration : line 3567</i>
     */
    PointerByReference libvlc_media_list_item_at_index(PointerByReference p_ml, int i_pos);
    /**
     * Find index position of List media instance in media list.<br>
     * Warning: the function will return the first matched position.<br>
     * The libvlc_media_list_lock should be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \param p_md media instance<br>
     * \return position of media instance or -1 if media not found<br>
     * Original signature : <code>int libvlc_media_list_index_of_item(libvlc_media_list_t*, libvlc_media_t*)</code><br>
     * <i>native declaration : line 3578</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_index_of_item(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_list_index_of_item(Pointer p_ml, Pointer p_md);
    /**
     * Find index position of List media instance in media list.<br>
     * Warning: the function will return the first matched position.<br>
     * The libvlc_media_list_lock should be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * \param p_md media instance<br>
     * \return position of media instance or -1 if media not found<br>
     * Original signature : <code>int libvlc_media_list_index_of_item(libvlc_media_list_t*, libvlc_media_t*)</code><br>
     * <i>native declaration : line 3578</i>
     */
    int libvlc_media_list_index_of_item(PointerByReference p_ml, PointerByReference p_md);
    /**
     * This indicates if this media list is read-only from a user point of view<br>
     * \param p_ml media list instance<br>
     * \return 1 on readonly, 0 on readwrite<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_list_is_readonly(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3590</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_is_readonly(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_list_is_readonly(Pointer p_ml);
    /**
     * This indicates if this media list is read-only from a user point of view<br>
     * \param p_ml media list instance<br>
     * \return 1 on readonly, 0 on readwrite<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_list_is_readonly(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3590</i>
     */
    int libvlc_media_list_is_readonly(PointerByReference p_ml);
    /**
     * Get lock on media list items<br>
     * \param p_ml a media list instance<br>
     * Original signature : <code>void libvlc_media_list_lock(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3598</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_lock(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_list_lock(Pointer p_ml);
    /**
     * Get lock on media list items<br>
     * \param p_ml a media list instance<br>
     * Original signature : <code>void libvlc_media_list_lock(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3598</i>
     */
    void libvlc_media_list_lock(PointerByReference p_ml);
    /**
     * Release lock on media list items<br>
     * The libvlc_media_list_lock should be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * Original signature : <code>void libvlc_media_list_unlock(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3607</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_unlock(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_list_unlock(Pointer p_ml);
    /**
     * Release lock on media list items<br>
     * The libvlc_media_list_lock should be held upon entering this function.<br>
     * \param p_ml a media list instance<br>
     * Original signature : <code>void libvlc_media_list_unlock(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3607</i>
     */
    void libvlc_media_list_unlock(PointerByReference p_ml);
    /**
     * Get libvlc_event_manager from this media list instance.<br>
     * The p_event_manager is immutable, so you don't have to hold the lock<br>
     * \param p_ml a media list instance<br>
     * \return libvlc_event_manager<br>
     * Original signature : <code>libvlc_event_manager_t* libvlc_media_list_event_manager(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3617</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_event_manager(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_list_event_manager(Pointer p_ml);
    /**
     * Get libvlc_event_manager from this media list instance.<br>
     * The p_event_manager is immutable, so you don't have to hold the lock<br>
     * \param p_ml a media list instance<br>
     * \return libvlc_event_manager<br>
     * Original signature : <code>libvlc_event_manager_t* libvlc_media_list_event_manager(libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3617</i>
     */
    PointerByReference libvlc_media_list_event_manager(PointerByReference p_ml);
    /**
     * Create new media_list_player.<br>
     * \param p_instance libvlc instance<br>
     * \return media list player instance or NULL on error<br>
     * Original signature : <code>libvlc_media_list_player_t* libvlc_media_list_player_new(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 3693</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_new(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_list_player_new(Pointer p_instance);
    /**
     * Create new media_list_player.<br>
     * \param p_instance libvlc instance<br>
     * \return media list player instance or NULL on error<br>
     * Original signature : <code>libvlc_media_list_player_t* libvlc_media_list_player_new(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 3693</i>
     */
    PointerByReference libvlc_media_list_player_new(PointerByReference p_instance);
    /**
     * Release a media_list_player after use<br>
     * Decrement the reference count of a media player object. If the<br>
     * reference count is 0, then libvlc_media_list_player_release() will<br>
     * release the media player object. If the media player object<br>
     * has been released, then it should not be used again.<br>
     * \param p_mlp media list player instance<br>
     * Original signature : <code>void libvlc_media_list_player_release(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3705</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_release(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_list_player_release(Pointer p_mlp);
    /**
     * Release a media_list_player after use<br>
     * Decrement the reference count of a media player object. If the<br>
     * reference count is 0, then libvlc_media_list_player_release() will<br>
     * release the media player object. If the media player object<br>
     * has been released, then it should not be used again.<br>
     * \param p_mlp media list player instance<br>
     * Original signature : <code>void libvlc_media_list_player_release(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3705</i>
     */
    void libvlc_media_list_player_release(PointerByReference p_mlp);
    /**
     * Retain a reference to a media player list object. Use<br>
     * libvlc_media_list_player_release() to decrement reference count.<br>
     * \param p_mlp media player list object<br>
     * Original signature : <code>void libvlc_media_list_player_retain(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3714</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_retain(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_list_player_retain(Pointer p_mlp);
    /**
     * Retain a reference to a media player list object. Use<br>
     * libvlc_media_list_player_release() to decrement reference count.<br>
     * \param p_mlp media player list object<br>
     * Original signature : <code>void libvlc_media_list_player_retain(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3714</i>
     */
    void libvlc_media_list_player_retain(PointerByReference p_mlp);
    /**
     * Return the event manager of this media_list_player.<br>
     * \param p_mlp media list player instance<br>
     * \return the event manager<br>
     * Original signature : <code>libvlc_event_manager_t* libvlc_media_list_player_event_manager(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3723</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_event_manager(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_list_player_event_manager(Pointer p_mlp);
    /**
     * Return the event manager of this media_list_player.<br>
     * \param p_mlp media list player instance<br>
     * \return the event manager<br>
     * Original signature : <code>libvlc_event_manager_t* libvlc_media_list_player_event_manager(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3723</i>
     */
    PointerByReference libvlc_media_list_player_event_manager(PointerByReference p_mlp);
    /**
     * Replace media player in media_list_player with this instance.<br>
     * \param p_mlp media list player instance<br>
     * \param p_mi media player instance<br>
     * Original signature : <code>void libvlc_media_list_player_set_media_player(libvlc_media_list_player_t*, libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3732</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_set_media_player(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_list_player_set_media_player(Pointer p_mlp, Pointer p_mi);
    /**
     * Replace media player in media_list_player with this instance.<br>
     * \param p_mlp media list player instance<br>
     * \param p_mi media player instance<br>
     * Original signature : <code>void libvlc_media_list_player_set_media_player(libvlc_media_list_player_t*, libvlc_media_player_t*)</code><br>
     * <i>native declaration : line 3732</i>
     */
    void libvlc_media_list_player_set_media_player(PointerByReference p_mlp, PointerByReference p_mi);
    /**
     * Set the media list associated with the player<br>
     * \param p_mlp media list player instance<br>
     * \param p_mlist list of media<br>
     * Original signature : <code>void libvlc_media_list_player_set_media_list(libvlc_media_list_player_t*, libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3743</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_set_media_list(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_list_player_set_media_list(Pointer p_mlp, Pointer p_mlist);
    /**
     * Set the media list associated with the player<br>
     * \param p_mlp media list player instance<br>
     * \param p_mlist list of media<br>
     * Original signature : <code>void libvlc_media_list_player_set_media_list(libvlc_media_list_player_t*, libvlc_media_list_t*)</code><br>
     * <i>native declaration : line 3743</i>
     */
    void libvlc_media_list_player_set_media_list(PointerByReference p_mlp, PointerByReference p_mlist);
    /**
     * Play media list<br>
     * \param p_mlp media list player instance<br>
     * Original signature : <code>void libvlc_media_list_player_play(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3754</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_play(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_list_player_play(Pointer p_mlp);
    /**
     * Play media list<br>
     * \param p_mlp media list player instance<br>
     * Original signature : <code>void libvlc_media_list_player_play(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3754</i>
     */
    void libvlc_media_list_player_play(PointerByReference p_mlp);
    /**
     * Toggle pause (or resume) media list<br>
     * \param p_mlp media list player instance<br>
     * Original signature : <code>void libvlc_media_list_player_pause(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3762</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_pause(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_list_player_pause(Pointer p_mlp);
    /**
     * Toggle pause (or resume) media list<br>
     * \param p_mlp media list player instance<br>
     * Original signature : <code>void libvlc_media_list_player_pause(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3762</i>
     */
    void libvlc_media_list_player_pause(PointerByReference p_mlp);
    /**
     * Is media list playing?<br>
     * \param p_mlp media list player instance<br>
     * \return true for playing and false for not playing<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_list_player_is_playing(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3772</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_is_playing(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_list_player_is_playing(Pointer p_mlp);
    /**
     * Is media list playing?<br>
     * \param p_mlp media list player instance<br>
     * \return true for playing and false for not playing<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_list_player_is_playing(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3772</i>
     */
    int libvlc_media_list_player_is_playing(PointerByReference p_mlp);
    /**
     * Get current libvlc_state of media list player<br>
     * \param p_mlp media list player instance<br>
     * \return libvlc_state_t for media list player<br>
     * Original signature : <code>libvlc_state_t libvlc_media_list_player_get_state(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3781</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_get_state(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_list_player_get_state(Pointer p_mlp);
    /**
     * Get current libvlc_state of media list player<br>
     * \param p_mlp media list player instance<br>
     * \return libvlc_state_t for media list player<br>
     * Original signature : <code>libvlc_state_t libvlc_media_list_player_get_state(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3781</i>
     */
    int libvlc_media_list_player_get_state(PointerByReference p_mlp);
    /**
     * Play media list item at position index<br>
     * \param p_mlp media list player instance<br>
     * \param i_index index in media list to play<br>
     * \return 0 upon success -1 if the item wasn't found<br>
     * Original signature : <code>int libvlc_media_list_player_play_item_at_index(libvlc_media_list_player_t*, int)</code><br>
     * <i>native declaration : line 3792</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_play_item_at_index(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    int libvlc_media_list_player_play_item_at_index(Pointer p_mlp, int i_index);
    /**
     * Play media list item at position index<br>
     * \param p_mlp media list player instance<br>
     * \param i_index index in media list to play<br>
     * \return 0 upon success -1 if the item wasn't found<br>
     * Original signature : <code>int libvlc_media_list_player_play_item_at_index(libvlc_media_list_player_t*, int)</code><br>
     * <i>native declaration : line 3792</i>
     */
    int libvlc_media_list_player_play_item_at_index(PointerByReference p_mlp, int i_index);
    /**
     * Play the given media item<br>
     * \param p_mlp media list player instance<br>
     * \param p_md the media instance<br>
     * \return 0 upon success, -1 if the media is not part of the media list<br>
     * Original signature : <code>int libvlc_media_list_player_play_item(libvlc_media_list_player_t*, libvlc_media_t*)</code><br>
     * <i>native declaration : line 3803</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_play_item(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_list_player_play_item(Pointer p_mlp, Pointer p_md);
    /**
     * Play the given media item<br>
     * \param p_mlp media list player instance<br>
     * \param p_md the media instance<br>
     * \return 0 upon success, -1 if the media is not part of the media list<br>
     * Original signature : <code>int libvlc_media_list_player_play_item(libvlc_media_list_player_t*, libvlc_media_t*)</code><br>
     * <i>native declaration : line 3803</i>
     */
    int libvlc_media_list_player_play_item(PointerByReference p_mlp, PointerByReference p_md);
    /**
     * Stop playing media list<br>
     * \param p_mlp media list player instance<br>
     * Original signature : <code>void libvlc_media_list_player_stop(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3811</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_stop(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_list_player_stop(Pointer p_mlp);
    /**
     * Stop playing media list<br>
     * \param p_mlp media list player instance<br>
     * Original signature : <code>void libvlc_media_list_player_stop(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3811</i>
     */
    void libvlc_media_list_player_stop(PointerByReference p_mlp);
    /**
     * Play next item from media list<br>
     * \param p_mlp media list player instance<br>
     * \return 0 upon success -1 if there is no next item<br>
     * Original signature : <code>int libvlc_media_list_player_next(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3821</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_next(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_list_player_next(Pointer p_mlp);
    /**
     * Play next item from media list<br>
     * \param p_mlp media list player instance<br>
     * \return 0 upon success -1 if there is no next item<br>
     * Original signature : <code>int libvlc_media_list_player_next(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3821</i>
     */
    int libvlc_media_list_player_next(PointerByReference p_mlp);
    /**
     * Play previous item from media list<br>
     * \param p_mlp media list player instance<br>
     * \return 0 upon success -1 if there is no previous item<br>
     * Original signature : <code>int libvlc_media_list_player_previous(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3830</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_previous(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_list_player_previous(Pointer p_mlp);
    /**
     * Play previous item from media list<br>
     * \param p_mlp media list player instance<br>
     * \return 0 upon success -1 if there is no previous item<br>
     * Original signature : <code>int libvlc_media_list_player_previous(libvlc_media_list_player_t*)</code><br>
     * <i>native declaration : line 3830</i>
     */
    int libvlc_media_list_player_previous(PointerByReference p_mlp);
    /**
     * Sets the playback mode for the playlist<br>
     * \param p_mlp media list player instance<br>
     * \param e_mode playback mode specification<br>
     * Original signature : <code>void libvlc_media_list_player_set_playback_mode(libvlc_media_list_player_t*, libvlc_playback_mode_t)</code><br>
     * <i>native declaration : line 3841</i><br>
     * @deprecated use the safer method {@link #libvlc_media_list_player_set_playback_mode(com.sun.jna.ptr.PointerByReference, int)} instead
     */
    @Deprecated 
    void libvlc_media_list_player_set_playback_mode(Pointer p_mlp, int e_mode);
    /**
     * Sets the playback mode for the playlist<br>
     * \param p_mlp media list player instance<br>
     * \param e_mode playback mode specification<br>
     * Original signature : <code>void libvlc_media_list_player_set_playback_mode(libvlc_media_list_player_t*, libvlc_playback_mode_t)</code><br>
     * <i>native declaration : line 3841</i>
     */
    void libvlc_media_list_player_set_playback_mode(PointerByReference p_mlp, int e_mode);
    /**
     * Create an new Media Library object<br>
     * \param p_instance the libvlc instance<br>
     * \return a new object or NULL on error<br>
     * Original signature : <code>libvlc_media_library_t* libvlc_media_library_new(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 3901</i><br>
     * @deprecated use the safer method {@link #libvlc_media_library_new(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_library_new(Pointer p_instance);
    /**
     * Create an new Media Library object<br>
     * \param p_instance the libvlc instance<br>
     * \return a new object or NULL on error<br>
     * Original signature : <code>libvlc_media_library_t* libvlc_media_library_new(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 3901</i>
     */
    PointerByReference libvlc_media_library_new(PointerByReference p_instance);
    /**
     * Release media library object. This functions decrements the<br>
     * reference count of the media library object. If it reaches 0,<br>
     * then the object will be released.<br>
     * \param p_mlib media library object<br>
     * Original signature : <code>void libvlc_media_library_release(libvlc_media_library_t*)</code><br>
     * <i>native declaration : line 3911</i><br>
     * @deprecated use the safer method {@link #libvlc_media_library_release(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_library_release(Pointer p_mlib);
    /**
     * Release media library object. This functions decrements the<br>
     * reference count of the media library object. If it reaches 0,<br>
     * then the object will be released.<br>
     * \param p_mlib media library object<br>
     * Original signature : <code>void libvlc_media_library_release(libvlc_media_library_t*)</code><br>
     * <i>native declaration : line 3911</i>
     */
    void libvlc_media_library_release(PointerByReference p_mlib);
    /**
     * Retain a reference to a media library object. This function will<br>
     * increment the reference counting for this object. Use<br>
     * libvlc_media_library_release() to decrement the reference count.<br>
     * \param p_mlib media library object<br>
     * Original signature : <code>void libvlc_media_library_retain(libvlc_media_library_t*)</code><br>
     * <i>native declaration : line 3921</i><br>
     * @deprecated use the safer method {@link #libvlc_media_library_retain(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_library_retain(Pointer p_mlib);
    /**
     * Retain a reference to a media library object. This function will<br>
     * increment the reference counting for this object. Use<br>
     * libvlc_media_library_release() to decrement the reference count.<br>
     * \param p_mlib media library object<br>
     * Original signature : <code>void libvlc_media_library_retain(libvlc_media_library_t*)</code><br>
     * <i>native declaration : line 3921</i>
     */
    void libvlc_media_library_retain(PointerByReference p_mlib);
    /**
     * Load media library.<br>
     * \param p_mlib media library object<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_media_library_load(libvlc_media_library_t*)</code><br>
     * <i>native declaration : line 3930</i><br>
     * @deprecated use the safer method {@link #libvlc_media_library_load(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_library_load(Pointer p_mlib);
    /**
     * Load media library.<br>
     * \param p_mlib media library object<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_media_library_load(libvlc_media_library_t*)</code><br>
     * <i>native declaration : line 3930</i>
     */
    int libvlc_media_library_load(PointerByReference p_mlib);
    /**
     * Get media library subitems.<br>
     * \param p_mlib media library object<br>
     * \return media list subitems<br>
     * Original signature : <code>libvlc_media_list_t* libvlc_media_library_media_list(libvlc_media_library_t*)</code><br>
     * <i>native declaration : line 3939</i><br>
     * @deprecated use the safer method {@link #libvlc_media_library_media_list(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_library_media_list(Pointer p_mlib);
    /**
     * Get media library subitems.<br>
     * \param p_mlib media library object<br>
     * \return media list subitems<br>
     * Original signature : <code>libvlc_media_list_t* libvlc_media_library_media_list(libvlc_media_library_t*)</code><br>
     * <i>native declaration : line 3939</i>
     */
    PointerByReference libvlc_media_library_media_list(PointerByReference p_mlib);
    /**
     * \deprecated Use libvlc_media_discoverer_new() and libvlc_media_discoverer_start().<br>
     * Original signature : <code>libvlc_media_discoverer_t* libvlc_media_discoverer_new_from_name(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4002</i><br>
     * @deprecated use the safer methods {@link #libvlc_media_discoverer_new_from_name(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_media_discoverer_new_from_name(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_discoverer_new_from_name(Pointer p_inst, Pointer psz_name);
    /**
     * \deprecated Use libvlc_media_discoverer_new() and libvlc_media_discoverer_start().<br>
     * Original signature : <code>libvlc_media_discoverer_t* libvlc_media_discoverer_new_from_name(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4002</i>
     */
    PointerByReference libvlc_media_discoverer_new_from_name(PointerByReference p_inst, String psz_name);
    /**
     * \deprecated Use libvlc_media_discoverer_new() and libvlc_media_discoverer_start().<br>
     * Original signature : <code>libvlc_media_discoverer_t* libvlc_media_discoverer_new_from_name(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4002</i>
     */
    PointerByReference libvlc_media_discoverer_new_from_name(PointerByReference p_inst, Pointer psz_name);
    /**
     * Create a media discoverer object by name.<br>
     * After this object is created, you should attach to events in order to be<br>
     * notified of the discoverer state.<br>
     * You should also attach to media_list events in order to be notified of new<br>
     * items discovered.<br>
     * You need to call libvlc_media_discoverer_start() in order to start the<br>
     * discovery.<br>
     * \see libvlc_media_discoverer_media_list<br>
     * \see libvlc_media_discoverer_event_manager<br>
     * \see libvlc_media_discoverer_start<br>
     * \param p_inst libvlc instance<br>
     * \param psz_name service name<br>
     * \return media discover object or NULL in case of error<br>
     * \version LibVLC 3.0.0 or later<br>
     * Original signature : <code>libvlc_media_discoverer_t* libvlc_media_discoverer_new(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4026</i><br>
     * @deprecated use the safer methods {@link #libvlc_media_discoverer_new(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_media_discoverer_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_discoverer_new(Pointer p_inst, Pointer psz_name);
    /**
     * Create a media discoverer object by name.<br>
     * After this object is created, you should attach to events in order to be<br>
     * notified of the discoverer state.<br>
     * You should also attach to media_list events in order to be notified of new<br>
     * items discovered.<br>
     * You need to call libvlc_media_discoverer_start() in order to start the<br>
     * discovery.<br>
     * \see libvlc_media_discoverer_media_list<br>
     * \see libvlc_media_discoverer_event_manager<br>
     * \see libvlc_media_discoverer_start<br>
     * \param p_inst libvlc instance<br>
     * \param psz_name service name<br>
     * \return media discover object or NULL in case of error<br>
     * \version LibVLC 3.0.0 or later<br>
     * Original signature : <code>libvlc_media_discoverer_t* libvlc_media_discoverer_new(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4026</i>
     */
    PointerByReference libvlc_media_discoverer_new(PointerByReference p_inst, String psz_name);
    /**
     * Create a media discoverer object by name.<br>
     * After this object is created, you should attach to events in order to be<br>
     * notified of the discoverer state.<br>
     * You should also attach to media_list events in order to be notified of new<br>
     * items discovered.<br>
     * You need to call libvlc_media_discoverer_start() in order to start the<br>
     * discovery.<br>
     * \see libvlc_media_discoverer_media_list<br>
     * \see libvlc_media_discoverer_event_manager<br>
     * \see libvlc_media_discoverer_start<br>
     * \param p_inst libvlc instance<br>
     * \param psz_name service name<br>
     * \return media discover object or NULL in case of error<br>
     * \version LibVLC 3.0.0 or later<br>
     * Original signature : <code>libvlc_media_discoverer_t* libvlc_media_discoverer_new(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4026</i>
     */
    PointerByReference libvlc_media_discoverer_new(PointerByReference p_inst, Pointer psz_name);
    /**
     * Start media discovery.<br>
     * To stop it, call libvlc_media_discoverer_stop() or<br>
     * libvlc_media_discoverer_release() directly.<br>
     * \see libvlc_media_discoverer_stop<br>
     * \param p_mdis media discover object<br>
     * \return -1 in case of error, 0 otherwise<br>
     * \version LibVLC 3.0.0 or later<br>
     * Original signature : <code>int libvlc_media_discoverer_start(libvlc_media_discoverer_t*)</code><br>
     * <i>native declaration : line 4042</i><br>
     * @deprecated use the safer method {@link #libvlc_media_discoverer_start(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_discoverer_start(Pointer p_mdis);
    /**
     * Start media discovery.<br>
     * To stop it, call libvlc_media_discoverer_stop() or<br>
     * libvlc_media_discoverer_release() directly.<br>
     * \see libvlc_media_discoverer_stop<br>
     * \param p_mdis media discover object<br>
     * \return -1 in case of error, 0 otherwise<br>
     * \version LibVLC 3.0.0 or later<br>
     * Original signature : <code>int libvlc_media_discoverer_start(libvlc_media_discoverer_t*)</code><br>
     * <i>native declaration : line 4042</i>
     */
    int libvlc_media_discoverer_start(PointerByReference p_mdis);
    /**
     * Stop media discovery.<br>
     * \see libvlc_media_discoverer_start<br>
     * \param p_mdis media discover object<br>
     * \version LibVLC 3.0.0 or later<br>
     * Original signature : <code>void libvlc_media_discoverer_stop(libvlc_media_discoverer_t*)</code><br>
     * <i>native declaration : line 4053</i><br>
     * @deprecated use the safer method {@link #libvlc_media_discoverer_stop(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_discoverer_stop(Pointer p_mdis);
    /**
     * Stop media discovery.<br>
     * \see libvlc_media_discoverer_start<br>
     * \param p_mdis media discover object<br>
     * \version LibVLC 3.0.0 or later<br>
     * Original signature : <code>void libvlc_media_discoverer_stop(libvlc_media_discoverer_t*)</code><br>
     * <i>native declaration : line 4053</i>
     */
    void libvlc_media_discoverer_stop(PointerByReference p_mdis);
    /**
     * Release media discover object. If the reference count reaches 0, then<br>
     * the object will be released.<br>
     * \param p_mdis media service discover object<br>
     * Original signature : <code>void libvlc_media_discoverer_release(libvlc_media_discoverer_t*)</code><br>
     * <i>native declaration : line 4062</i><br>
     * @deprecated use the safer method {@link #libvlc_media_discoverer_release(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_media_discoverer_release(Pointer p_mdis);
    /**
     * Release media discover object. If the reference count reaches 0, then<br>
     * the object will be released.<br>
     * \param p_mdis media service discover object<br>
     * Original signature : <code>void libvlc_media_discoverer_release(libvlc_media_discoverer_t*)</code><br>
     * <i>native declaration : line 4062</i>
     */
    void libvlc_media_discoverer_release(PointerByReference p_mdis);
    /**
     * Get media service discover object its localized name.<br>
     * \param p_mdis media discover object<br>
     * \return localized name<br>
     * Original signature : <code>char* libvlc_media_discoverer_localized_name(libvlc_media_discoverer_t*)</code><br>
     * <i>native declaration : line 4070</i><br>
     * @deprecated use the safer method {@link #libvlc_media_discoverer_localized_name(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    Pointer libvlc_media_discoverer_localized_name(Pointer p_mdis);
    /**
     * Get media service discover object its localized name.<br>
     * \param p_mdis media discover object<br>
     * \return localized name<br>
     * Original signature : <code>char* libvlc_media_discoverer_localized_name(libvlc_media_discoverer_t*)</code><br>
     * <i>native declaration : line 4070</i>
     */
    Pointer libvlc_media_discoverer_localized_name(PointerByReference p_mdis);
    /**
     * Get media service discover media list.<br>
     * \param p_mdis media service discover object<br>
     * \return list of media items<br>
     * Original signature : <code>libvlc_media_list_t* libvlc_media_discoverer_media_list(libvlc_media_discoverer_t*)</code><br>
     * <i>native declaration : line 4078</i><br>
     * @deprecated use the safer method {@link #libvlc_media_discoverer_media_list(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_discoverer_media_list(Pointer p_mdis);
    /**
     * Get media service discover media list.<br>
     * \param p_mdis media service discover object<br>
     * \return list of media items<br>
     * Original signature : <code>libvlc_media_list_t* libvlc_media_discoverer_media_list(libvlc_media_discoverer_t*)</code><br>
     * <i>native declaration : line 4078</i>
     */
    PointerByReference libvlc_media_discoverer_media_list(PointerByReference p_mdis);
    /**
     * Get event manager from media service discover object.<br>
     * \param p_mdis media service discover object<br>
     * \return event manager object.<br>
     * Original signature : <code>libvlc_event_manager_t* libvlc_media_discoverer_event_manager(libvlc_media_discoverer_t*)</code><br>
     * <i>native declaration : line 4086</i><br>
     * @deprecated use the safer method {@link #libvlc_media_discoverer_event_manager(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_media_discoverer_event_manager(Pointer p_mdis);
    /**
     * Get event manager from media service discover object.<br>
     * \param p_mdis media service discover object<br>
     * \return event manager object.<br>
     * Original signature : <code>libvlc_event_manager_t* libvlc_media_discoverer_event_manager(libvlc_media_discoverer_t*)</code><br>
     * <i>native declaration : line 4086</i>
     */
    PointerByReference libvlc_media_discoverer_event_manager(PointerByReference p_mdis);
    /**
     * Query if media service discover object is running.<br>
     * \param p_mdis media service discover object<br>
     * \return true if running, false if not<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_discoverer_is_running(libvlc_media_discoverer_t*)</code><br>
     * <i>native declaration : line 4097</i><br>
     * @deprecated use the safer method {@link #libvlc_media_discoverer_is_running(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    int libvlc_media_discoverer_is_running(Pointer p_mdis);
    /**
     * Query if media service discover object is running.<br>
     * \param p_mdis media service discover object<br>
     * \return true if running, false if not<br>
     * \libvlc_return_bool<br>
     * Original signature : <code>int libvlc_media_discoverer_is_running(libvlc_media_discoverer_t*)</code><br>
     * <i>native declaration : line 4097</i>
     */
    int libvlc_media_discoverer_is_running(PointerByReference p_mdis);
    /**
     * Release the vlm instance related to the given libvlc_instance_t<br>
     * \param p_instance the instance<br>
     * Original signature : <code>void libvlc_vlm_release(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 4157</i><br>
     * @deprecated use the safer method {@link #libvlc_vlm_release(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    void libvlc_vlm_release(Pointer p_instance);
    /**
     * Release the vlm instance related to the given libvlc_instance_t<br>
     * \param p_instance the instance<br>
     * Original signature : <code>void libvlc_vlm_release(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 4157</i>
     */
    void libvlc_vlm_release(PointerByReference p_instance);
    /**
     * Add a broadcast, with one input.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the new broadcast<br>
     * \param psz_input the input MRL<br>
     * \param psz_output the output MRL (the parameter to the "sout" variable)<br>
     * \param i_options number of additional options<br>
     * \param ppsz_options additional options<br>
     * \param b_enabled boolean for enabling the new broadcast<br>
     * \param b_loop Should this broadcast be played in loop ?<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_add_broadcast(libvlc_instance_t*, const char*, const char*, const char*, int, const const char**, int, int)</code><br>
     * <i>native declaration : line 4172</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_add_broadcast(com.sun.jna.ptr.PointerByReference, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String[], int, int)} and {@link #libvlc_vlm_add_broadcast(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, int, int)} instead
     */
    @Deprecated 
    int libvlc_vlm_add_broadcast(Pointer p_instance, Pointer psz_name, Pointer psz_input, Pointer psz_output, int i_options, PointerByReference ppsz_options, int b_enabled, int b_loop);
    /**
     * Add a broadcast, with one input.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the new broadcast<br>
     * \param psz_input the input MRL<br>
     * \param psz_output the output MRL (the parameter to the "sout" variable)<br>
     * \param i_options number of additional options<br>
     * \param ppsz_options additional options<br>
     * \param b_enabled boolean for enabling the new broadcast<br>
     * \param b_loop Should this broadcast be played in loop ?<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_add_broadcast(libvlc_instance_t*, const char*, const char*, const char*, int, const const char**, int, int)</code><br>
     * <i>native declaration : line 4172</i>
     */
    int libvlc_vlm_add_broadcast(PointerByReference p_instance, String psz_name, String psz_input, String psz_output, int i_options, String ppsz_options[], int b_enabled, int b_loop);
    /**
     * Add a broadcast, with one input.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the new broadcast<br>
     * \param psz_input the input MRL<br>
     * \param psz_output the output MRL (the parameter to the "sout" variable)<br>
     * \param i_options number of additional options<br>
     * \param ppsz_options additional options<br>
     * \param b_enabled boolean for enabling the new broadcast<br>
     * \param b_loop Should this broadcast be played in loop ?<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_add_broadcast(libvlc_instance_t*, const char*, const char*, const char*, int, const const char**, int, int)</code><br>
     * <i>native declaration : line 4172</i>
     */
    int libvlc_vlm_add_broadcast(PointerByReference p_instance, Pointer psz_name, Pointer psz_input, Pointer psz_output, int i_options, PointerByReference ppsz_options, int b_enabled, int b_loop);
    /**
     * Add a vod, with one input.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the new vod media<br>
     * \param psz_input the input MRL<br>
     * \param i_options number of additional options<br>
     * \param ppsz_options additional options<br>
     * \param b_enabled boolean for enabling the new vod<br>
     * \param psz_mux the muxer of the vod media<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_add_vod(libvlc_instance_t*, const char*, const char*, int, const const char**, int, const char*)</code><br>
     * <i>native declaration : line 4190</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_add_vod(com.sun.jna.ptr.PointerByReference, java.lang.String, java.lang.String, int, java.lang.String[], int, java.lang.String)} and {@link #libvlc_vlm_add_vod(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, int, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_vlm_add_vod(Pointer p_instance, Pointer psz_name, Pointer psz_input, int i_options, PointerByReference ppsz_options, int b_enabled, Pointer psz_mux);
    /**
     * Add a vod, with one input.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the new vod media<br>
     * \param psz_input the input MRL<br>
     * \param i_options number of additional options<br>
     * \param ppsz_options additional options<br>
     * \param b_enabled boolean for enabling the new vod<br>
     * \param psz_mux the muxer of the vod media<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_add_vod(libvlc_instance_t*, const char*, const char*, int, const const char**, int, const char*)</code><br>
     * <i>native declaration : line 4190</i>
     */
    int libvlc_vlm_add_vod(PointerByReference p_instance, String psz_name, String psz_input, int i_options, String ppsz_options[], int b_enabled, String psz_mux);
    /**
     * Add a vod, with one input.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the new vod media<br>
     * \param psz_input the input MRL<br>
     * \param i_options number of additional options<br>
     * \param ppsz_options additional options<br>
     * \param b_enabled boolean for enabling the new vod<br>
     * \param psz_mux the muxer of the vod media<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_add_vod(libvlc_instance_t*, const char*, const char*, int, const const char**, int, const char*)</code><br>
     * <i>native declaration : line 4190</i>
     */
    int libvlc_vlm_add_vod(PointerByReference p_instance, Pointer psz_name, Pointer psz_input, int i_options, PointerByReference ppsz_options, int b_enabled, Pointer psz_mux);
    /**
     * Delete a media (VOD or broadcast).<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to delete<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_del_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4202</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_del_media(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_vlm_del_media(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_vlm_del_media(Pointer p_instance, Pointer psz_name);
    /**
     * Delete a media (VOD or broadcast).<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to delete<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_del_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4202</i>
     */
    int libvlc_vlm_del_media(PointerByReference p_instance, String psz_name);
    /**
     * Delete a media (VOD or broadcast).<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to delete<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_del_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4202</i>
     */
    int libvlc_vlm_del_media(PointerByReference p_instance, Pointer psz_name);
    /**
     * Enable or disable a media (VOD or broadcast).<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param b_enabled the new status<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_enabled(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4213</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_set_enabled(com.sun.jna.ptr.PointerByReference, java.lang.String, int)} and {@link #libvlc_vlm_set_enabled(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int)} instead
     */
    @Deprecated 
    int libvlc_vlm_set_enabled(Pointer p_instance, Pointer psz_name, int b_enabled);
    /**
     * Enable or disable a media (VOD or broadcast).<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param b_enabled the new status<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_enabled(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4213</i>
     */
    int libvlc_vlm_set_enabled(PointerByReference p_instance, String psz_name, int b_enabled);
    /**
     * Enable or disable a media (VOD or broadcast).<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param b_enabled the new status<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_enabled(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4213</i>
     */
    int libvlc_vlm_set_enabled(PointerByReference p_instance, Pointer psz_name, int b_enabled);
    /**
     * Set the output for a media.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param psz_output the output MRL (the parameter to the "sout" variable)<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_output(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 4224</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_set_output(com.sun.jna.ptr.PointerByReference, java.lang.String, java.lang.String)} and {@link #libvlc_vlm_set_output(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_vlm_set_output(Pointer p_instance, Pointer psz_name, Pointer psz_output);
    /**
     * Set the output for a media.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param psz_output the output MRL (the parameter to the "sout" variable)<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_output(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 4224</i>
     */
    int libvlc_vlm_set_output(PointerByReference p_instance, String psz_name, String psz_output);
    /**
     * Set the output for a media.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param psz_output the output MRL (the parameter to the "sout" variable)<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_output(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 4224</i>
     */
    int libvlc_vlm_set_output(PointerByReference p_instance, Pointer psz_name, Pointer psz_output);
    /**
     * Set a media's input MRL. This will delete all existing inputs and<br>
     * add the specified one.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param psz_input the input MRL<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_input(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 4237</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_set_input(com.sun.jna.ptr.PointerByReference, java.lang.String, java.lang.String)} and {@link #libvlc_vlm_set_input(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_vlm_set_input(Pointer p_instance, Pointer psz_name, Pointer psz_input);
    /**
     * Set a media's input MRL. This will delete all existing inputs and<br>
     * add the specified one.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param psz_input the input MRL<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_input(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 4237</i>
     */
    int libvlc_vlm_set_input(PointerByReference p_instance, String psz_name, String psz_input);
    /**
     * Set a media's input MRL. This will delete all existing inputs and<br>
     * add the specified one.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param psz_input the input MRL<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_input(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 4237</i>
     */
    int libvlc_vlm_set_input(PointerByReference p_instance, Pointer psz_name, Pointer psz_input);
    /**
     * Add a media's input MRL. This will add the specified one.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param psz_input the input MRL<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_add_input(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 4249</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_add_input(com.sun.jna.ptr.PointerByReference, java.lang.String, java.lang.String)} and {@link #libvlc_vlm_add_input(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_vlm_add_input(Pointer p_instance, Pointer psz_name, Pointer psz_input);
    /**
     * Add a media's input MRL. This will add the specified one.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param psz_input the input MRL<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_add_input(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 4249</i>
     */
    int libvlc_vlm_add_input(PointerByReference p_instance, String psz_name, String psz_input);
    /**
     * Add a media's input MRL. This will add the specified one.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param psz_input the input MRL<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_add_input(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 4249</i>
     */
    int libvlc_vlm_add_input(PointerByReference p_instance, Pointer psz_name, Pointer psz_input);
    /**
     * Set a media's loop status.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param b_loop the new status<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_loop(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4261</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_set_loop(com.sun.jna.ptr.PointerByReference, java.lang.String, int)} and {@link #libvlc_vlm_set_loop(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int)} instead
     */
    @Deprecated 
    int libvlc_vlm_set_loop(Pointer p_instance, Pointer psz_name, int b_loop);
    /**
     * Set a media's loop status.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param b_loop the new status<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_loop(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4261</i>
     */
    int libvlc_vlm_set_loop(PointerByReference p_instance, String psz_name, int b_loop);
    /**
     * Set a media's loop status.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param b_loop the new status<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_loop(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4261</i>
     */
    int libvlc_vlm_set_loop(PointerByReference p_instance, Pointer psz_name, int b_loop);
    /**
     * Set a media's vod muxer.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param psz_mux the new muxer<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_mux(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 4273</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_set_mux(com.sun.jna.ptr.PointerByReference, java.lang.String, java.lang.String)} and {@link #libvlc_vlm_set_mux(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_vlm_set_mux(Pointer p_instance, Pointer psz_name, Pointer psz_mux);
    /**
     * Set a media's vod muxer.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param psz_mux the new muxer<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_mux(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 4273</i>
     */
    int libvlc_vlm_set_mux(PointerByReference p_instance, String psz_name, String psz_mux);
    /**
     * Set a media's vod muxer.<br>
     * \param p_instance the instance<br>
     * \param psz_name the media to work on<br>
     * \param psz_mux the new muxer<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_set_mux(libvlc_instance_t*, const char*, const char*)</code><br>
     * <i>native declaration : line 4273</i>
     */
    int libvlc_vlm_set_mux(PointerByReference p_instance, Pointer psz_name, Pointer psz_mux);
    /**
     * Edit the parameters of a media. This will delete all existing inputs and<br>
     * add the specified one.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the new broadcast<br>
     * \param psz_input the input MRL<br>
     * \param psz_output the output MRL (the parameter to the "sout" variable)<br>
     * \param i_options number of additional options<br>
     * \param ppsz_options additional options<br>
     * \param b_enabled boolean for enabling the new broadcast<br>
     * \param b_loop Should this broadcast be played in loop ?<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_change_media(libvlc_instance_t*, const char*, const char*, const char*, int, const const char**, int, int)</code><br>
     * <i>native declaration : line 4291</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_change_media(com.sun.jna.ptr.PointerByReference, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String[], int, int)} and {@link #libvlc_vlm_change_media(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, int, int)} instead
     */
    @Deprecated 
    int libvlc_vlm_change_media(Pointer p_instance, Pointer psz_name, Pointer psz_input, Pointer psz_output, int i_options, PointerByReference ppsz_options, int b_enabled, int b_loop);
    /**
     * Edit the parameters of a media. This will delete all existing inputs and<br>
     * add the specified one.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the new broadcast<br>
     * \param psz_input the input MRL<br>
     * \param psz_output the output MRL (the parameter to the "sout" variable)<br>
     * \param i_options number of additional options<br>
     * \param ppsz_options additional options<br>
     * \param b_enabled boolean for enabling the new broadcast<br>
     * \param b_loop Should this broadcast be played in loop ?<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_change_media(libvlc_instance_t*, const char*, const char*, const char*, int, const const char**, int, int)</code><br>
     * <i>native declaration : line 4291</i>
     */
    int libvlc_vlm_change_media(PointerByReference p_instance, String psz_name, String psz_input, String psz_output, int i_options, String ppsz_options[], int b_enabled, int b_loop);
    /**
     * Edit the parameters of a media. This will delete all existing inputs and<br>
     * add the specified one.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the new broadcast<br>
     * \param psz_input the input MRL<br>
     * \param psz_output the output MRL (the parameter to the "sout" variable)<br>
     * \param i_options number of additional options<br>
     * \param ppsz_options additional options<br>
     * \param b_enabled boolean for enabling the new broadcast<br>
     * \param b_loop Should this broadcast be played in loop ?<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_change_media(libvlc_instance_t*, const char*, const char*, const char*, int, const const char**, int, int)</code><br>
     * <i>native declaration : line 4291</i>
     */
    int libvlc_vlm_change_media(PointerByReference p_instance, Pointer psz_name, Pointer psz_input, Pointer psz_output, int i_options, PointerByReference ppsz_options, int b_enabled, int b_loop);
    /**
     * Play the named broadcast.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the broadcast<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_play_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4304</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_play_media(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_vlm_play_media(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_vlm_play_media(Pointer p_instance, Pointer psz_name);
    /**
     * Play the named broadcast.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the broadcast<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_play_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4304</i>
     */
    int libvlc_vlm_play_media(PointerByReference p_instance, String psz_name);
    /**
     * Play the named broadcast.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the broadcast<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_play_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4304</i>
     */
    int libvlc_vlm_play_media(PointerByReference p_instance, Pointer psz_name);
    /**
     * Stop the named broadcast.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the broadcast<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_stop_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4314</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_stop_media(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_vlm_stop_media(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_vlm_stop_media(Pointer p_instance, Pointer psz_name);
    /**
     * Stop the named broadcast.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the broadcast<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_stop_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4314</i>
     */
    int libvlc_vlm_stop_media(PointerByReference p_instance, String psz_name);
    /**
     * Stop the named broadcast.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the broadcast<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_stop_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4314</i>
     */
    int libvlc_vlm_stop_media(PointerByReference p_instance, Pointer psz_name);
    /**
     * Pause the named broadcast.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the broadcast<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_pause_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4324</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_pause_media(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_vlm_pause_media(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    int libvlc_vlm_pause_media(Pointer p_instance, Pointer psz_name);
    /**
     * Pause the named broadcast.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the broadcast<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_pause_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4324</i>
     */
    int libvlc_vlm_pause_media(PointerByReference p_instance, String psz_name);
    /**
     * Pause the named broadcast.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the broadcast<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_pause_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4324</i>
     */
    int libvlc_vlm_pause_media(PointerByReference p_instance, Pointer psz_name);
    /**
     * Seek in the named broadcast.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the broadcast<br>
     * \param f_percentage the percentage to seek to<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_seek_media(libvlc_instance_t*, const char*, float)</code><br>
     * <i>native declaration : line 4335</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_seek_media(com.sun.jna.ptr.PointerByReference, java.lang.String, float)} and {@link #libvlc_vlm_seek_media(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, float)} instead
     */
    @Deprecated 
    int libvlc_vlm_seek_media(Pointer p_instance, Pointer psz_name, float f_percentage);
    /**
     * Seek in the named broadcast.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the broadcast<br>
     * \param f_percentage the percentage to seek to<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_seek_media(libvlc_instance_t*, const char*, float)</code><br>
     * <i>native declaration : line 4335</i>
     */
    int libvlc_vlm_seek_media(PointerByReference p_instance, String psz_name, float f_percentage);
    /**
     * Seek in the named broadcast.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the broadcast<br>
     * \param f_percentage the percentage to seek to<br>
     * \return 0 on success, -1 on error<br>
     * Original signature : <code>int libvlc_vlm_seek_media(libvlc_instance_t*, const char*, float)</code><br>
     * <i>native declaration : line 4335</i>
     */
    int libvlc_vlm_seek_media(PointerByReference p_instance, Pointer psz_name, float f_percentage);
    /**
     * Return information about the named media as a JSON<br>
     * string representation.<br>
     * This function is mainly intended for debugging use,<br>
     * if you want programmatic access to the state of<br>
     * a vlm_media_instance_t, please use the corresponding<br>
     * libvlc_vlm_get_media_instance_xxx -functions.<br>
     * Currently there are no such functions available for<br>
     * vlm_media_t though.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the media,<br>
     *      if the name is an empty string, all media is described<br>
     * \return string with information about named media, or NULL on error<br>
     * Original signature : <code>char* libvlc_vlm_show_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4355</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_show_media(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #libvlc_vlm_show_media(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated 
    Pointer libvlc_vlm_show_media(Pointer p_instance, Pointer psz_name);
    /**
     * Return information about the named media as a JSON<br>
     * string representation.<br>
     * This function is mainly intended for debugging use,<br>
     * if you want programmatic access to the state of<br>
     * a vlm_media_instance_t, please use the corresponding<br>
     * libvlc_vlm_get_media_instance_xxx -functions.<br>
     * Currently there are no such functions available for<br>
     * vlm_media_t though.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the media,<br>
     *      if the name is an empty string, all media is described<br>
     * \return string with information about named media, or NULL on error<br>
     * Original signature : <code>char* libvlc_vlm_show_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4355</i>
     */
    Pointer libvlc_vlm_show_media(PointerByReference p_instance, String psz_name);
    /**
     * Return information about the named media as a JSON<br>
     * string representation.<br>
     * This function is mainly intended for debugging use,<br>
     * if you want programmatic access to the state of<br>
     * a vlm_media_instance_t, please use the corresponding<br>
     * libvlc_vlm_get_media_instance_xxx -functions.<br>
     * Currently there are no such functions available for<br>
     * vlm_media_t though.<br>
     * \param p_instance the instance<br>
     * \param psz_name the name of the media,<br>
     *      if the name is an empty string, all media is described<br>
     * \return string with information about named media, or NULL on error<br>
     * Original signature : <code>char* libvlc_vlm_show_media(libvlc_instance_t*, const char*)</code><br>
     * <i>native declaration : line 4355</i>
     */
    Pointer libvlc_vlm_show_media(PointerByReference p_instance, Pointer psz_name);
    /**
     * Get vlm_media instance position by name or instance id<br>
     * \param p_instance a libvlc instance<br>
     * \param psz_name name of vlm media instance<br>
     * \param i_instance instance id<br>
     * \return position as float or -1. on error<br>
     * Original signature : <code>float libvlc_vlm_get_media_instance_position(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4366</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_get_media_instance_position(com.sun.jna.ptr.PointerByReference, java.lang.String, int)} and {@link #libvlc_vlm_get_media_instance_position(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int)} instead
     */
    @Deprecated 
    float libvlc_vlm_get_media_instance_position(Pointer p_instance, Pointer psz_name, int i_instance);
    /**
     * Get vlm_media instance position by name or instance id<br>
     * \param p_instance a libvlc instance<br>
     * \param psz_name name of vlm media instance<br>
     * \param i_instance instance id<br>
     * \return position as float or -1. on error<br>
     * Original signature : <code>float libvlc_vlm_get_media_instance_position(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4366</i>
     */
    float libvlc_vlm_get_media_instance_position(PointerByReference p_instance, String psz_name, int i_instance);
    /**
     * Get vlm_media instance position by name or instance id<br>
     * \param p_instance a libvlc instance<br>
     * \param psz_name name of vlm media instance<br>
     * \param i_instance instance id<br>
     * \return position as float or -1. on error<br>
     * Original signature : <code>float libvlc_vlm_get_media_instance_position(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4366</i>
     */
    float libvlc_vlm_get_media_instance_position(PointerByReference p_instance, Pointer psz_name, int i_instance);
    /**
     * Get vlm_media instance time by name or instance id<br>
     * \param p_instance a libvlc instance<br>
     * \param psz_name name of vlm media instance<br>
     * \param i_instance instance id<br>
     * \return time as integer or -1 on error<br>
     * Original signature : <code>int libvlc_vlm_get_media_instance_time(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4378</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_get_media_instance_time(com.sun.jna.ptr.PointerByReference, java.lang.String, int)} and {@link #libvlc_vlm_get_media_instance_time(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int)} instead
     */
    @Deprecated 
    int libvlc_vlm_get_media_instance_time(Pointer p_instance, Pointer psz_name, int i_instance);
    /**
     * Get vlm_media instance time by name or instance id<br>
     * \param p_instance a libvlc instance<br>
     * \param psz_name name of vlm media instance<br>
     * \param i_instance instance id<br>
     * \return time as integer or -1 on error<br>
     * Original signature : <code>int libvlc_vlm_get_media_instance_time(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4378</i>
     */
    int libvlc_vlm_get_media_instance_time(PointerByReference p_instance, String psz_name, int i_instance);
    /**
     * Get vlm_media instance time by name or instance id<br>
     * \param p_instance a libvlc instance<br>
     * \param psz_name name of vlm media instance<br>
     * \param i_instance instance id<br>
     * \return time as integer or -1 on error<br>
     * Original signature : <code>int libvlc_vlm_get_media_instance_time(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4378</i>
     */
    int libvlc_vlm_get_media_instance_time(PointerByReference p_instance, Pointer psz_name, int i_instance);
    /**
     * Get vlm_media instance length by name or instance id<br>
     * \param p_instance a libvlc instance<br>
     * \param psz_name name of vlm media instance<br>
     * \param i_instance instance id<br>
     * \return length of media item or -1 on error<br>
     * Original signature : <code>int libvlc_vlm_get_media_instance_length(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4390</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_get_media_instance_length(com.sun.jna.ptr.PointerByReference, java.lang.String, int)} and {@link #libvlc_vlm_get_media_instance_length(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int)} instead
     */
    @Deprecated 
    int libvlc_vlm_get_media_instance_length(Pointer p_instance, Pointer psz_name, int i_instance);
    /**
     * Get vlm_media instance length by name or instance id<br>
     * \param p_instance a libvlc instance<br>
     * \param psz_name name of vlm media instance<br>
     * \param i_instance instance id<br>
     * \return length of media item or -1 on error<br>
     * Original signature : <code>int libvlc_vlm_get_media_instance_length(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4390</i>
     */
    int libvlc_vlm_get_media_instance_length(PointerByReference p_instance, String psz_name, int i_instance);
    /**
     * Get vlm_media instance length by name or instance id<br>
     * \param p_instance a libvlc instance<br>
     * \param psz_name name of vlm media instance<br>
     * \param i_instance instance id<br>
     * \return length of media item or -1 on error<br>
     * Original signature : <code>int libvlc_vlm_get_media_instance_length(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4390</i>
     */
    int libvlc_vlm_get_media_instance_length(PointerByReference p_instance, Pointer psz_name, int i_instance);
    /**
     * Get vlm_media instance playback rate by name or instance id<br>
     * \param p_instance a libvlc instance<br>
     * \param psz_name name of vlm media instance<br>
     * \param i_instance instance id<br>
     * \return playback rate or -1 on error<br>
     * Original signature : <code>int libvlc_vlm_get_media_instance_rate(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4402</i><br>
     * @deprecated use the safer methods {@link #libvlc_vlm_get_media_instance_rate(com.sun.jna.ptr.PointerByReference, java.lang.String, int)} and {@link #libvlc_vlm_get_media_instance_rate(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int)} instead
     */
    @Deprecated 
    int libvlc_vlm_get_media_instance_rate(Pointer p_instance, Pointer psz_name, int i_instance);
    /**
     * Get vlm_media instance playback rate by name or instance id<br>
     * \param p_instance a libvlc instance<br>
     * \param psz_name name of vlm media instance<br>
     * \param i_instance instance id<br>
     * \return playback rate or -1 on error<br>
     * Original signature : <code>int libvlc_vlm_get_media_instance_rate(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4402</i>
     */
    int libvlc_vlm_get_media_instance_rate(PointerByReference p_instance, String psz_name, int i_instance);
    /**
     * Get vlm_media instance playback rate by name or instance id<br>
     * \param p_instance a libvlc instance<br>
     * \param psz_name name of vlm media instance<br>
     * \param i_instance instance id<br>
     * \return playback rate or -1 on error<br>
     * Original signature : <code>int libvlc_vlm_get_media_instance_rate(libvlc_instance_t*, const char*, int)</code><br>
     * <i>native declaration : line 4402</i>
     */
    int libvlc_vlm_get_media_instance_rate(PointerByReference p_instance, Pointer psz_name, int i_instance);
    /**
     * Get libvlc_event_manager from a vlm media.<br>
     * The p_event_manager is immutable, so you don't have to hold the lock<br>
     * \param p_instance a libvlc instance<br>
     * \return libvlc_event_manager<br>
     * Original signature : <code>libvlc_event_manager_t* libvlc_vlm_get_event_manager(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 4446</i><br>
     * @deprecated use the safer method {@link #libvlc_vlm_get_event_manager(com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated 
    PointerByReference libvlc_vlm_get_event_manager(Pointer p_instance);
    /**
     * Get libvlc_event_manager from a vlm media.<br>
     * The p_event_manager is immutable, so you don't have to hold the lock<br>
     * \param p_instance a libvlc instance<br>
     * \return libvlc_event_manager<br>
     * Original signature : <code>libvlc_event_manager_t* libvlc_vlm_get_event_manager(libvlc_instance_t*)</code><br>
     * <i>native declaration : line 4446</i>
     */
    PointerByReference libvlc_vlm_get_event_manager(PointerByReference p_instance);
    public static class libvlc_media_read_cb extends PointerType {
        public libvlc_media_read_cb(Pointer address) {
            super(address);
        }
        public libvlc_media_read_cb() {
            super();
        }
    };
    public static class libvlc_media_player_t extends PointerType {
        public libvlc_media_player_t(Pointer address) {
            super(address);
        }
        public libvlc_media_player_t() {
            super();
        }
    };
    public static class libvlc_media_discoverer_t extends PointerType {
        public libvlc_media_discoverer_t(Pointer address) {
            super(address);
        }
        public libvlc_media_discoverer_t() {
            super();
        }
    };
    public static class libvlc_log_iterator_t extends PointerType {
        public libvlc_log_iterator_t(Pointer address) {
            super(address);
        }
        public libvlc_log_iterator_t() {
            super();
        }
    };
    public static class libvlc_event_t extends PointerType {
        public libvlc_event_t(Pointer address) {
            super(address);
        }
        public libvlc_event_t() {
            super();
        }
    };
    public static class libvlc_media_library_t extends PointerType {
        public libvlc_media_library_t(Pointer address) {
            super(address);
        }
        public libvlc_media_library_t() {
            super();
        }
    };
    public static class libvlc_media_t extends PointerType {
        public libvlc_media_t(Pointer address) {
            super(address);
        }
        public libvlc_media_t() {
            super();
        }
    };
    public static class libvlc_instance_t extends PointerType {
        public libvlc_instance_t(Pointer address) {
            super(address);
        }
        public libvlc_instance_t() {
            super();
        }
    };
    public static class libvlc_log_t extends PointerType {
        public libvlc_log_t(Pointer address) {
            super(address);
        }
        public libvlc_log_t() {
            super();
        }
    };
    public static class libvlc_media_list_player_t extends PointerType {
        public libvlc_media_list_player_t(Pointer address) {
            super(address);
        }
        public libvlc_media_list_player_t() {
            super();
        }
    };
    public static class libvlc_event_manager_t extends PointerType {
        public libvlc_event_manager_t(Pointer address) {
            super(address);
        }
        public libvlc_event_manager_t() {
            super();
        }
    };
    public static class FILE extends PointerType {
        public FILE(Pointer address) {
            super(address);
        }
        public FILE() {
            super();
        }
    };
    public static class libvlc_equalizer_t extends PointerType {
        public libvlc_equalizer_t(Pointer address) {
            super(address);
        }
        public libvlc_equalizer_t() {
            super();
        }
    };
    public static class libvlc_media_list_t extends PointerType {
        public libvlc_media_list_t(Pointer address) {
            super(address);
        }
        public libvlc_media_list_t() {
            super();
        }
    };
}

